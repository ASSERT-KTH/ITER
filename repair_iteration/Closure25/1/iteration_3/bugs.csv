bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverse(arg,  n);  Node  functionScope  =  n.getFirstChild();  [CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n);  Node  functionScope  =  n.getFirstChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	non-compiled	[CE]  method  traverse  in  class  TypeInference  cannot  be  applied  to  given  types;	152	None	replace
2	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getFirstChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	compilable	  [FE]  ComparisonFailure  	152	1	replace
3	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getFirstChild();  [FE]  ComparisonFailure  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getFirstChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	compilable	  [FE]  ComparisonFailure  	152	1	replace
4	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	add	scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getLastChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	compilable	  [FE]  ComparisonFailure  	152	1	replace
5	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getLastChild();  [FE]  ComparisonFailure  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope);  Node  functionScope  =  n.getLastChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	compilable	  [FE]  ComparisonFailure  	152	1	replace
6	[BUG]  [BUGGY]  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Node  functionScope  =  n.getFirstChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
7	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope);  Node  functionScope  =  arg.getFirstChild();  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope);  Node  functionScope  =  arg.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope);  Node  functionScope  =  arg.getFirstChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
8	[BUG]  [BUGGY]  Node  functionScope  =  arg.getFirstChild();  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Node  functionScope  =  arg.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Node  functionScope  =  arg.getFirstChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
9	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getLastChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
10	[BUG]  [BUGGY]  scope  =  traverseNode(functionScope,  arg);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(functionScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(functionScope,  arg);	  scope    =    traverseNode(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
11	[BUG]  [BUGGY]  scope  =  traverseNode(n,  arg);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(n,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(n,  arg);	  scope    =    traverseNode(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
12	[BUG]  [BUGGY]  scope  =  traverseNode(n,  functionScope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(n,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(n,  functionScope);	  scope    =    traverseNode(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
13	[BUG]  [BUGGY]  scope  =  traverseNode(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(scope,  functionScope);	  scope    =    traverseNode(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
14	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  functionScope,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  functionScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  functionScope,  type);	  scope    =    traverseNode(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
15	[BUG]  [BUGGY]  Scope  scope  =  traverse(arg,  null);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Scope  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Scope  scope  =  traverse(arg,  null);	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
16	[BUG]  [BUGGY]  scope  =  traverse(arg,  null.cloneTree());  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null.cloneTree());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null.cloneTree());	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
17	[BUG]  [BUGGY]  scope  =  traverse(arg,  null.getJSType());  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null.getJSType());	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
18	[BUG]  [BUGGY]  scope  =  traverse(arg,  false);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  false);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  false);	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
19	[BUG]  [BUGGY]  scope  =(Node)arg.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.getFirstChild();	          scope    =(Node)arg.getJSType();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
20	[BUG]  [BUGGY]  scope  =(Node)arg.getLastChild();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.getLastChild();	          scope    =(Node)arg.getJSType();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
21	[BUG]  [BUGGY]  scope  =(Node)arg.getFirstChild().getJSType();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.getFirstChild().getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.getFirstChild().getJSType();	          scope    =(Node)arg.getJSType();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
22	[BUG]  [BUGGY]  scope  =(Node)arg.cloneTree();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.cloneTree();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.cloneTree();	          scope    =(Node)arg.getJSType();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
23	[BUG]  [BUGGY]  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
24	[BUG]  [BUGGY]  n.setJSType(type);  scope  =  traverse(arg,  scope);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(type);  scope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(type);  scope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
25	[BUG]  [BUGGY]  n.setJSType(type);  scope  =  traverse(arg,  syntacticScope);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(type);  scope  =  traverse(arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(type);  scope  =  traverse(arg,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
26	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope,  arg);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope,  arg);	  scope    =    traverse(functionScope,    arg);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
27	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n,  arg);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  n,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  n,  arg);	  scope    =    traverse(functionScope,    arg);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
28	[BUG]  [BUGGY]  scope  =  traverse(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  functionScope);	  scope    =    traverse(functionScope,    arg);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
29	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  scope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  scope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    scope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
30	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  functionScope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  functionScope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    functionScope  =  traverse(arg,  functionScope);  if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
31	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  scope  =  traverse(arg,  functionScope);  if(functionScope  ==  null)  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  scope  =  traverse(arg,  functionScope);  if(functionScope  ==  null)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    scope  =  traverse(arg,  functionScope);  if(functionScope  ==  null)  {  scope  =  traverse(arg,  functionScope);  }	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
32	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  Node  functionScope  =  arg.getNext();  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  Node  functionScope  =  arg.getNext();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    Node  functionScope  =  arg.getNext();	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
33	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  JSType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  JSType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    JSType  functionScope  =  n.getJSType();	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
34	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  functionScope  =  traverse(arg,  functionScope);  if(functionScope  ==  null)  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  functionScope  =  traverse(arg,  functionScope);  if(functionScope  ==  null)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    functionScope  =  traverse(arg,  functionScope);  if(functionScope  ==  null)  {  scope  =  traverse(arg,  functionScope);  }	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
35	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  scope  =  traverse(arg,  functionScope);  if(functionScope  >=  null)  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  scope  =  traverse(arg,  functionScope);  if(functionScope  >=  null)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    scope  =  traverse(arg,  functionScope);  if(functionScope  >=  null)  {  scope  =  traverse(arg,  functionScope);  }	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
36	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionType  functionScope  =  arg.getFunctionScope();  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionType  functionScope  =  arg.getFunctionScope();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    FunctionType  functionScope  =  arg.getFunctionScope();	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
37	[BUG]  [BUGGY]  Scope  scope  =  traverse(arg,  n);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Scope  scope  =  traverse(arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Scope  scope  =  traverse(arg,  n);	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
38	[BUG]  [BUGGY]  State  state  =  n.getState();  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  State  state  =  n.getState();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	State  state  =  n.getState();	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
39	[BUG]  [BUGGY]  scope  =  traverse(n,  arg.getJSType(),  constructor);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg.getJSType(),  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg.getJSType(),  constructor);	  scope    =    traverse(arg,    n.getJSType(),    constructor);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
40	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.getJSType(),  arg);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  n.getJSType(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  n.getJSType(),  arg);	  scope    =    traverse(arg,    n.getJSType(),    constructor);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
41	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructor.getJSType(),  n);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructor.getJSType(),  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructor.getJSType(),  n);	  scope    =    traverse(arg,    n.getJSType(),    constructor);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
42	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  constructor,  type);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  constructor,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  constructor,  type);	  scope    =    traverse(arg,    n.getJSType(),    constructor);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
43	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  arg);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n.getJSType(),  arg);	  scope    =    traverse(arg,    n.getJSType(),    constructor);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
44	[BUG]  [BUGGY]  n.removeChild(arg.cloneTree());  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg.cloneTree());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg.cloneTree());	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
45	[BUG]  [BUGGY]  n.removeChild(arg.getNext());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg.getNext());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg.getNext());	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
46	[BUG]  [BUGGY]  n.removeChild(arg.getString());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg.getString());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg.getString());	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
47	[BUG]  [BUGGY]  n.removeChild(arg.getLastChild());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg.getLastChild());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg.getLastChild());	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
48	[BUG]  [BUGGY]  scope  =  traverse(n,  arg.getJSType(),  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg.getJSType(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg.getJSType(),  scope);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
49	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  scope,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  scope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  scope,  type);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
50	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  scope,  registry);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  scope,  registry);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  scope,  registry);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
51	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg.getJSType(),  n);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg.getJSType(),  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg.getJSType(),  n);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
52	[BUG]  [BUGGY]  scope  =  traverse(registry,  n,  arg,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  n,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  n,  arg,  type);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
53	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  constructorType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  constructorType);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
54	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  type,  n);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  type,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  type,  n);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
55	[BUG]  [BUGGY]  scope  =  traverse(registry,  type,  arg);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  type,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  type,  arg);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
56	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  constructorType,  type);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  constructorType,  type);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
57	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  null,  type);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  null,  type);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
58	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  type,  context);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  type,  context);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  type,  context);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
59	[BUG]  [BUGGY]  n.setJSType(arg);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg);	          n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
60	[BUG]  [BUGGY]  n.setJSType(ct.getInstanceType());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(ct.getInstanceType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(ct.getInstanceType());	          n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
61	[BUG]  [BUGGY]  n.setJSType(arg.getFirstChild());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getFirstChild());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getFirstChild());	          n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
62	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  constructorType);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  constructorType);	  scope    =    traverse(arg,    null,    ct);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
63	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  constructor);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  constructor);	  scope    =    traverse(arg,    null,    ct);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
64	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  context);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  context);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  context);	  scope    =    traverse(arg,    null,    ct);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
65	[BUG]  [BUGGY]  FunctionType  functionScope  =  traverse(arg,  scope);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  FunctionType  functionScope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	FunctionType  functionScope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
66	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
67	[BUG]  [BUGGY]  scope  =  traverse(scope,  functionScope);  FunctionType  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  functionScope);  FunctionType  functionScope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  functionScope);  FunctionType  functionScope  =  traverse(arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
68	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  scope);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  scope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
69	[BUG]  [BUGGY]  FunctionType  functionScope  =  traverse(arg,  syntacticScope);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  FunctionType  functionScope  =  traverse(arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	FunctionType  functionScope  =  traverse(arg,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
70	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  n);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  n);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
71	[BUG]  [BUGGY]  FunctionType  functionScope  =  traverse(scope,  arg);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  FunctionType  functionScope  =  traverse(scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	FunctionType  functionScope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
72	[BUG]  [BUGGY]          n.setJSType(constructorType);  n.setJSType(constructorType);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  n.setJSType(constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    n.setJSType(constructorType);	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
73	[BUG]  [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  n.setJSType(constructorType);  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  n.setJSType(constructorType);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  n.setJSType(constructorType);  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
74	[BUG]  [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  n.setJSType(constructorType);  }  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  n.setJSType(constructorType);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  n.setJSType(constructorType);  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
75	[BUG]  [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(constructorType);  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(constructorType);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(constructorType);  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
76	[BUG]  [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  <  arg.getNext())  {  n.setJSType(constructorType);  }  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  <  arg.getNext())  {  n.setJSType(constructorType);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  <  arg.getNext())  {  n.setJSType(constructorType);  }	  	non-compiled	[CE]  not  a  statement	116	None	add
77	[BUG]  [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  type  =  arg.getInstanceType();  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  type  =  arg.getInstanceType();  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  type  =  arg.getInstanceType();  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
78	[BUG]  [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  n.getJSType(constructorType);  }  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  n.getJSType(constructorType);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  n.getJSType(constructorType);  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
79	[BUG]  [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    if(constructorType!=  null)  {  n.setJSType(constructorType);  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
80	[BUG]  [BUGGY]  scope  =  traverse(n,  constructor,  arg);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  constructor,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  constructor,  arg);	  scope    =    traverse(arg,    constructor,    n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
81	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructor,  n);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  constructor,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  constructor,  n);	  scope    =    traverse(arg,    constructor,    n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
82	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  constructorType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  constructorType);	  scope    =    traverse(arg,    constructor,    n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
83	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
84	[BUG]  [BUGGY]  if(arg.getType()!=  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()!=  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()!=  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
85	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
86	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
87	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
88	[BUG]  [BUGGY]  if(arg.getType()!=  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()!=  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()!=  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
89	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  n.setJSType(arg.getJSType());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  n.setJSType(arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    n.setJSType(arg.getJSType());	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
90	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  n.setJSType(arg.getJSType());  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  n.setJSType(arg.getJSType());  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.isConstructor())  {  n.setJSType(arg.getJSType());  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
91	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  n.setJSType(arg.getJSType());  }  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  n.setJSType(arg.getJSType());  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  n.setJSType(arg.getJSType());  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
92	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(arg.getJSType());  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(arg.getJSType());  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(arg.getJSType());  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
93	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  <  arg.getNext())  {  n.setJSType(arg.getJSType());  }  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  <  arg.getNext())  {  n.setJSType(arg.getJSType());  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  <  arg.getNext())  {  n.setJSType(arg.getJSType());  }	  	non-compiled	[CE]  not  a  statement	114	None	add
94	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.next())  {  n.setJSType(arg.getJSType());  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.next())  {  n.setJSType(arg.getJSType());  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.next())  {  n.setJSType(arg.getJSType());  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
95	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  Node  arg  =  constructor.getNext();  n.setJSType(arg.getJSType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  Node  arg  =  constructor.getNext();  n.setJSType(arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    Node  arg  =  constructor.getNext();  n.setJSType(arg.getJSType());	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
96	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  Node  arg  =  constructor.getFirstChild();  n.setJSType(arg.getJSType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  Node  arg  =  constructor.getFirstChild();  n.setJSType(arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    Node  arg  =  constructor.getFirstChild();  n.setJSType(arg.getJSType());	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
97	[BUG]  [BUGGY]  scope  =  traverse(n,  constructorType,  arg);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  constructorType,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  constructorType,  arg);	  scope    =    traverse(constructorType,    arg);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
98	[BUG]  [BUGGY]  scope  =  traverse(registry,  constructorType,  arg);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  constructorType,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  constructorType,  arg);	  scope    =    traverse(constructorType,    arg);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
99	[BUG]  [BUGGY]  scope  =  traverse(g,  constructorType,  arg);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g,  constructorType,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  constructorType,  arg);	  scope    =    traverse(constructorType,    arg);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
100	[BUG]  [BUGGY]  scope  =  traverse(constructorType,  n,  arg);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructorType,  n,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructorType,  n,  arg);	  scope    =    traverse(constructorType,    arg);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
101	[BUG]  [BUGGY]  scope  =  traverse(n,  syntacticScope,  arg);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  syntacticScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  syntacticScope,  arg);	  scope    =    traverse(arg,    syntacticScope,    n);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
102	[BUG]  [BUGGY]  scope  =  traverse(scope,  syntacticScope,  n);  [CE]  class,  interface,  or  enum  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  syntacticScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  syntacticScope,  n);	  scope    =    traverse(arg,    syntacticScope,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
103	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  syntacticScope);  [CE]  class,  interface,  or  enum  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  syntacticScope);	  scope    =    traverse(arg,    syntacticScope,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
104	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  n,  scope);  [CE]  class,  interface,  or  enum  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope,  n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  n,  scope);	  scope    =    traverse(arg,    syntacticScope,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
105	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  arg,  n);  [CE]  class,  interface,  or  enum  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  arg,  n);	  scope    =    traverse(arg,    syntacticScope,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
106	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  arg,  n);  [CE]  class,  interface,  or  enum  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(syntacticScope,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  arg,  n);	  scope    =    traverse(arg,    syntacticScope,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
107	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  n,  type);  [CE]  class,  interface,  or  enum  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  n,  type);	  scope    =    traverse(arg,    syntacticScope,    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
108	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  class,  interface,  or  enum  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	add
109	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [CE]  class,  interface,  or  enum  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	add
110	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  class,  interface,  or  enum  expected  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	add
111	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  class,  interface,  or  enum  expected  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	add
112	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  class,  interface,  or  enum  expected  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	add
113	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
114	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }	  	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	add
115	[BUG]  [BUGGY]  scope  =  traverse(n,  type,  arg.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  type,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  type,  arg.getJSType());	  scope    =    traverse(arg,    type,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
116	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  type.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  type.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  type.getJSType());	  scope    =    traverse(arg,    type,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
117	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  type,  n.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  type,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  type,  n.getJSType());	  scope    =    traverse(arg,    type,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
118	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  type.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  type.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  type.getJSType());	  scope    =    traverse(arg,    type,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
119	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg.getJSType());	  scope    =    traverse(arg,    type,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
120	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  scope);  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  scope);	  scope    =    traverse(n,    scope,    arg);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
121	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  arg,  type);  [CE]  class,  interface,  or  enum  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  scope,  arg,  type);	  scope    =    traverse(n,    scope,    arg);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
122	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg,  type);  [CE]  class,  interface,  or  enum  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg,  type);	  scope    =    traverse(scope,    n,    arg);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
123	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  type,  arg);  [CE]  class,  interface,  or  enum  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  type,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  type,  arg);	  scope    =    traverse(scope,    n,    arg);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
124	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg,  null);	  scope    =    traverse(scope,    n,    arg);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
125	[BUG]  [BUGGY]  scope  =  traverse(registry,  n,  arg);  [CE]  class,  interface,  or  enum  expected  [FE]                                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  n,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  n,  arg);	  scope    =    traverse(scope,    n,    arg);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
126	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  this.functionScope);  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  this.functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  this.functionScope);	  scope    =    traverse(arg,    n,    context);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
127	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  state.scope);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  state.scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  state.scope);	  scope    =    traverse(arg,    n,    context);    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
128	[BUG]  [BUGGY]  scope  =  traverse(n,  type,  arg);  [CE]  class,  interface,  or  enum  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  type,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  type,  arg);	  scope    =    traverse(n,    arg,    type);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
129	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  constructorType);  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  constructorType);	  scope    =    traverse(n,    arg,    type);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
130	[BUG]  [BUGGY]  scope  =  traverse(n,  constructor,  arg,  type);  [CE]  class,  interface,  or  enum  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  constructor,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  constructor,  arg,  type);	  scope    =    traverse(n,    arg,    type);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
131	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  type,  registry);  [CE]  class,  interface,  or  enum  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  type,  registry);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  type,  registry);	  scope    =    traverse(n,    arg,    type);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
132	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  arg);  [CE]  class,  interface,  or  enum  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  n,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  n,  arg);	  scope    =    traverse(arg,    n,    constructor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
133	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  constructor,  type);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  constructor,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  constructor,  type);	  scope    =    traverse(arg,    n,    constructor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
134	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  type,  constructor);  [CE]  class,  interface,  or  enum  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  type,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  type,  constructor);	  scope    =    traverse(arg,    n,    constructor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
135	[BUG]  [BUGGY]  scope  =  traverse(structor,  n,  arg);  [CE]  class,  interface,  or  enum  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  n,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  n,  arg);	  scope    =    traverse(arg,    n,    constructor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
136	[BUG]  [BUGGY]  scope  =  traverse(arg.n,  n.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.n,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.n,  n.getJSType());	  scope    =    traverse(g,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
137	[BUG]  [BUGGY]  scope  =  traverse(arg.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.getJSType());	  scope    =    traverse(g,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
138	[BUG]  [BUGGY]  scope  =  traverse(arg,  node.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  node.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  node.getJSType());	  scope    =    traverse(g,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
139	[BUG]  [BUGGY]  scope  =  traverse(arg,  type.getJSType());  [CE]  class,  interface,  or  enum  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  type.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type.getJSType());	  scope    =    traverse(g,    n.getJSType());    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
140	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  scope);  [CE]  class,  interface,  or  enum  expected  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
141	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  n);  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  n);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
142	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  trueScope);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  trueScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  trueScope);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
143	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope);  functionScope  =  traverse(arg,  scope);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  functionScope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope);  functionScope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
144	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  null);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
145	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  falseScope);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  falseScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  falseScope);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
146	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  type,  constructor);  [CE]  class,  interface,  or  enum  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  type,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  type,  constructor);	  scope    =    traverse(arg,    type,    constructor);    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
147	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  constructor);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  constructor);	  scope    =    traverse(arg,    type,    constructor);    	non-compiled	[CE]  ';'  expected	96	None	replace
148	[BUG]  [BUGGY]  scope  =  traverse(constructor,  type,  arg);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  type,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  type,  arg);	  scope    =    traverse(arg,    type,    constructor);    	non-compiled	[CE]  ';'  expected	96	None	replace
149	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  constructor);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  constructor);	  scope    =    traverse(arg,    type,    constructor);    	non-compiled	[CE]  ';'  expected	96	None	replace
150	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  type,  constructor);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  type,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  type,  constructor);	  scope    =    traverse(arg,    type,    constructor);    	non-compiled	[CE]  ';'  expected	96	None	replace
151	[BUG]  [BUGGY]  scope  =  traverse(scope,  type,  arg);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  type,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  type,  arg);	  scope    =    traverse(arg,    type,    constructor);    	non-compiled	[CE]  ';'  expected	96	None	replace
152	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  this);  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  this);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  this);	  scope    =    traverse(arg,    this);    	non-compiled	[CE]  ';'  expected	120	None	replace
153	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  this);  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  this);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  this);	  scope    =    traverse(arg,    this);    	non-compiled	[CE]  ';'  expected	120	None	replace
154	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  constructorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  constructorType);	  scope    =    traverseNode(arg,    type);    	non-compiled	[CE]  ';'  expected	44	None	replace
155	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  type,  n);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  type,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  type,  n);	  scope    =    traverseNode(arg,    type);    	non-compiled	[CE]  ';'  expected	44	None	replace
156	[BUG]  [BUGGY]  scope  =  traverseNode(scope,  arg);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(scope,  arg);	  scope    =    traverseNode(arg,    type);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
157	[BUG]  [BUGGY]  scope  =  traverseNode(ct,  arg);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(ct,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(ct,  arg);	  scope    =    traverseNode(arg,    type);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
158	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  n.setJSType(type);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
159	[BUG]  [BUGGY]  scope  =  traverse(arg,  n);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n);  n.setJSType(type);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
160	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope);  n.setJSType(type);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
161	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructorType);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructorType);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructorType);  n.setJSType(type);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
162	[BUG]  [BUGGY]  scope  =  traverse(arg,  ct);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  ct);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  ct);  n.setJSType(type);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
163	[BUG]  [BUGGY]  scope  =  traverse(arg,  type);  n.setJSType(functionScope);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  type);  n.setJSType(functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type);  n.setJSType(functionScope);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
164	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));	          n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	119	None	replace
165	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));	          n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	119	None	replace
166	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE));	          n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	119	None	replace
167	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS));	          n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	119	None	replace
168	[BUG]  [BUGGY]  n.setJSType(getNativeType(OPTIONAL_TYPE));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(OPTIONAL_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(OPTIONAL_TYPE));	          n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	119	None	replace
169	[BUG]  [BUGGY]  scope  =  traverse(scope,  functionScope,  n);  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  functionScope,  n);	  scope    =    traverse(arg,    functionScope,    n);    	non-compiled	[CE]  ';'  expected	64	None	replace
170	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  functionScope);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  functionScope);	  scope    =    traverse(arg,    functionScope,    n);    	non-compiled	[CE]  ';'  expected	64	None	replace
171	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  constructor,  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  constructor,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  constructor,  type);	  scope    =    traverse(n,    arg,    constructor);    	non-compiled	[CE]  ';'  expected	45	None	replace
172	[BUG]  [BUGGY]  scope  =  traverse(compiler,  arg,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(compiler,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(compiler,  arg,  n);	  scope    =    traverse(n,    arg,    constructor);    	non-compiled	[CE]  ';'  expected	45	None	replace
173	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(arg,  scope);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
174	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(scope,  arg);  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
175	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(arg,  scope,  syntacticScope);  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(arg,  scope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(arg,  scope,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
176	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(arg,  scope.functionScope);  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(arg,  scope.functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(arg,  scope.functionScope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
177	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(arg,  scope.scope);  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(arg,  scope.scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(arg,  scope.scope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	37	None	replace
178	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  new  FlowScope());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  new  FlowScope());	  scope    =    traverse(arg,    n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	17	None	replace
179	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  new  FlowScope(),  scope);	  scope    =    traverse(arg,    n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	17	None	replace
180	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(scope));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(scope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  new  FlowScope(scope));	  scope    =    traverse(arg,    n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	17	None	replace
181	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  type,  new  FlowScope());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  type,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  type,  new  FlowScope());	  scope    =    traverse(arg,    n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	17	None	replace
182	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  null,  new  FlowScope());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  null,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  null,  new  FlowScope());	  scope    =    traverse(arg,    n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	17	None	replace
183	[BUG]  [BUGGY]  scope  =  traverse(scope,  new  FlowScope(arg));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  new  FlowScope(arg));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  new  FlowScope(arg));	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	16	None	replace
184	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  scope));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  scope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope,  scope));	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	16	None	replace
185	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  type));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  type));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope,  type));	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	16	None	replace
186	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(scope));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  new  FlowScope(scope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope(scope));	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	16	None	replace
187	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  functionScope));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  functionScope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope,  functionScope));	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	16	None	replace
188	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  output));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  output));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope,  output));	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	16	None	replace
189	[BUG]  [BUGGY]  scope  =  traverse(n,  constructor.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  constructor.getJSType());	  scope    =    traverse(constructor,    n.getJSType());    	non-compiled	[CE]  ';'  expected	92	None	replace
190	[BUG]  [BUGGY]  scope  =  traverse(registry,  constructor,  n.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  constructor,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  constructor,  n.getJSType());	  scope    =    traverse(constructor,    n.getJSType());    	non-compiled	[CE]  ';'  expected	92	None	replace
191	[BUG]  [BUGGY]  scope  =  traverse(registry,  n.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  n.getJSType());	  scope    =    traverse(constructor,    n.getJSType());    	non-compiled	[CE]  ';'  expected	92	None	replace
192	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope,  syntacticScope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope,  syntacticScope);	  scope    =    traverse(n,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	77	None	replace
193	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  syntacticScope,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  syntacticScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  syntacticScope,  type);	  scope    =    traverse(n,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	77	None	replace
194	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  syntacticScope,  functionScope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  syntacticScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  syntacticScope,  functionScope);	  scope    =    traverse(n,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	77	None	replace
195	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  syntacticScope,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  syntacticScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  syntacticScope,  scope);	  scope    =    traverse(n,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	77	None	replace
196	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  constructorType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  constructorType);	  scope    =    traverse(arg,    constructorType);    	non-compiled	[CE]  ';'  expected	50	None	replace
197	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructorType,  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructorType,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructorType,  n);	  scope    =    traverse(arg,    constructorType);    	non-compiled	[CE]  ';'  expected	50	None	replace
198	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructor,  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  constructor,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  constructor,  type);	  scope    =    traverse(arg,    constructor,    type);    	non-compiled	[CE]  ';'  expected	95	None	replace
199	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  constructor,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  constructor,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  constructor,  type);	  scope    =    traverse(arg,    constructor,    type);    	non-compiled	[CE]  ';'  expected	95	None	replace
200	[BUG]  [BUGGY]  scope  =  traverse(n,  constructor,  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  constructor,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  constructor,  type);	  scope    =    traverse(arg,    constructor,    type);    	non-compiled	[CE]  ';'  expected	95	None	replace
201	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructor,  arg);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  constructor,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  constructor,  arg);	  scope    =    traverse(arg,    constructor,    type);    	non-compiled	[CE]  ';'  expected	95	None	replace
202	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  ';'  expected	3	None	add
203	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	3	None	add
204	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	3	None	add
205	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
206	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
207	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
208	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
209	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]                  NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
210	[BUG]  [BUGGY]  scope  =  traverse(arg,  registry);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  registry);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  registry);  n.setJSType(type);	  scope    =    traverse(arg,    null);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
211	[BUG]  [BUGGY]  scope  =  traverse(arg,  registry.getNativeType(UNKNOWN_TYPE));  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  registry.getNativeType(UNKNOWN_TYPE));  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  registry.getNativeType(UNKNOWN_TYPE));  n.setJSType(type);	  scope    =    traverse(arg,    null);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
212	[BUG]  [BUGGY]  scope  =  traverse(arg,  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE));  n.setJSType(type);	  scope    =    traverse(arg,    null);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
213	[BUG]  [BUGGY]  scope  =  traverse(arg,  context);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  context);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  context);  n.setJSType(type);	  scope    =    traverse(arg,    null);    n.setJSType(type);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
214	[BUG]  [BUGGY]  scope  =  traverse(arg,  arg);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  arg);	  scope    =    traverse(structor,    arg);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
215	[BUG]  [BUGGY]  n.removeChild(arg);  n.removeChild(arg);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  n.removeChild(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    n.removeChild(arg);	  	non-compiled	[CE]  illegal  start  of  expression	133	None	add
216	[BUG]  [BUGGY]  n.removeChild(arg);  Node  arg  =  constructor.getNext();  n.removeChild(arg);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  Node  arg  =  constructor.getNext();  n.removeChild(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    Node  arg  =  constructor.getNext();  n.removeChild(arg);	  	non-compiled	[CE]  illegal  start  of  expression	133	None	add
217	[BUG]  [BUGGY]  n.removeChild(arg);  Node  arg  =  constructor.getFirstChild();  n.removeChild(arg);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  Node  arg  =  constructor.getFirstChild();  n.removeChild(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    Node  arg  =  constructor.getFirstChild();  n.removeChild(arg);	  	non-compiled	[CE]  ';'  expected	133	None	add
218	[BUG]  [BUGGY]  n.removeChild(arg);  Node  arg  =  constructor.getLastChild();  n.removeChild(arg);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  Node  arg  =  constructor.getLastChild();  n.removeChild(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    Node  arg  =  constructor.getLastChild();  n.removeChild(arg);	  	non-compiled	[CE]  ';'  expected	133	None	add
219	[BUG]  [BUGGY]  n.removeChild(arg);  NodeUtil.removeChild(arg);  n.removeChild(arg);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  NodeUtil.removeChild(arg);  n.removeChild(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    NodeUtil.removeChild(arg);  n.removeChild(arg);	  	non-compiled	[CE]  ';'  expected	133	None	add
220	[BUG]  [BUGGY]  n.removeChild(arg);  Node  arg  =  arg.getNext();  n.removeChild(arg);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  Node  arg  =  arg.getNext();  n.removeChild(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    Node  arg  =  arg.getNext();  n.removeChild(arg);	  	non-compiled	[CE]  ';'  expected	133	None	add
221	[BUG]  [BUGGY]  n.removeChild(arg);  NodeUtil.removeChild(arg);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  NodeUtil.removeChild(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    NodeUtil.removeChild(arg);	  	non-compiled	[CE]  ';'  expected	133	None	add
222	[BUG]  [BUGGY]  n.removeChild(arg);  NodeUtil.removeChild(arg,  scope);  n.removeChild(arg);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  NodeUtil.removeChild(arg,  scope);  n.removeChild(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    NodeUtil.removeChild(arg,  scope);  n.removeChild(arg);	  	non-compiled	[CE]  ';'  expected	133	None	add
223	[BUG]  [BUGGY]  scope  =(Node)arg.nextToken();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.nextToken();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.nextToken();	          scope    =(Node)arg.next();    	non-compiled	[CE]  ';'  expected	25	None	replace
224	[BUG]  [BUGGY]  scope  =(Node)n.next();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)n.next();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)n.next();	          scope    =(Node)arg.next();    	non-compiled	[CE]  ';'  expected	25	None	replace
225	[BUG]  [BUGGY]  scope  =(Node)arg,  n.next();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg,  n.next();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg,  n.next();	          scope    =(Node)arg.next();    	non-compiled	[CE]  ';'  expected	25	None	replace
226	[BUG]  [BUGGY]  scope  =(Node)arg.next(),  scope);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.next(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.next(),  scope);	          scope    =(Node)arg.next();    	non-compiled	[CE]  ';'  expected	25	None	replace
227	[BUG]  [BUGGY]  scope  =  traverse(registry,  constructor,  arg);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  constructor,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  constructor,  arg);	  scope    =    traverse(constructor,    arg);    	non-compiled	[CE]  ';'  expected	47	None	replace
228	[BUG]  [BUGGY]  scope  =  traverse(g,  constructor,  arg);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g,  constructor,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  constructor,  arg);	  scope    =    traverse(constructor,    arg);    	non-compiled	[CE]  ';'  expected	47	None	replace
229	[BUG]  [BUGGY]  FunctionScope  functionScope  =  traverse(arg,  scope);  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  FunctionScope  functionScope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	FunctionScope  functionScope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	106	None	replace
230	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	106	None	replace
231	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(scope,  arg);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	106	None	replace
232	[BUG]  [BUGGY]  functionScope  =  traverse(arg,  scope);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  functionScope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	functionScope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	106	None	replace
233	[BUG]  [BUGGY]  FunctionScope  functionScope  =  traverse(arg,  syntacticScope);  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  FunctionScope  functionScope  =  traverse(arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	FunctionScope  functionScope  =  traverse(arg,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	106	None	replace
234	[BUG]  [BUGGY]  FunctionScope  functionScope  =  traverse(scope,  arg);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  FunctionScope  functionScope  =  traverse(scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	FunctionScope  functionScope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	106	None	replace
235	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg.getType());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg.getType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg.getType());	  scope    =    traverse(scope,    n);    	non-compiled	[CE]  ';'  expected	74	None	replace
236	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg.type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg.type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg.type);	  scope    =    traverse(scope,    n);    	non-compiled	[CE]  ';'  expected	74	None	replace
237	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg.cloneTree());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg.cloneTree());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg.cloneTree());	  scope    =    traverse(scope,    n);    	non-compiled	[CE]  ';'  expected	74	None	replace
238	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
239	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  ';'  expected	103	None	add
240	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
241	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
242	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
243	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
244	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
245	[BUG]  [BUGGY]  scope  =  traverse(arg.getNext(),  new  FlowScope());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.getNext(),  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.getNext(),  new  FlowScope());	  scope    =    traverse(n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	20	None	replace
246	[BUG]  [BUGGY]  scope  =  traverse(arg.next(),  new  FlowScope());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.next(),  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.next(),  new  FlowScope());	  scope    =    traverse(n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	20	None	replace
247	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  new  FlowScope(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope(),  scope);	  scope    =    traverse(n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	20	None	replace
248	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(arg.getType()));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  new  FlowScope(arg.getType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope(arg.getType()));	  scope    =    traverse(n,    new    FlowScope());    	non-compiled	[CE]  ';'  expected	20	None	replace
249	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  arg);  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  arg);	          n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	113	None	replace
250	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  arg));  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  arg));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  arg));	          n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	113	None	replace
251	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);	          n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	113	None	replace
252	[BUG]  [BUGGY]  scope  =  traverse(scope,  functionScope,  syntacticScope);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  functionScope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  functionScope,  syntacticScope);	  scope    =    traverse(arg,    functionScope,    syntacticScope);    	non-compiled	[CE]  ';'  expected	65	None	replace
253	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n,  syntacticScope);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  n,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  n,  syntacticScope);	  scope    =    traverse(arg,    functionScope,    syntacticScope);    	non-compiled	[CE]  ';'  expected	65	None	replace
254	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  functionScope);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(syntacticScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  functionScope);	  scope    =    traverse(arg,    functionScope,    syntacticScope);    	non-compiled	[CE]  ';'  expected	65	None	replace
255	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  n);	  scope    =    traverse(arg,    context,    n);    	non-compiled	[CE]  ';'  expected	108	None	replace
256	[BUG]  [BUGGY]  scope  =  traverse(g,  arg,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  arg,  type);	  scope    =    traverse(ct,    arg,    type);    	non-compiled	[CE]  ';'  expected	62	None	replace
257	[BUG]  [BUGGY]  scope  =  traverse(arg,  ct,  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  ct,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  ct,  type);	  scope    =    traverse(ct,    arg,    type);    	non-compiled	[CE]  ';'  expected	62	None	replace
258	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(n.getJSType(),  type));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(n.getJSType(),  type));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(n.getJSType(),  type));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  ';'  expected	131	None	replace
259	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(arg.getJSType()));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  new  FlowScope(arg.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope(arg.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  ';'  expected	131	None	replace
260	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope.getJSType()));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  ';'  expected	131	None	replace
261	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(constructor.getJSType()));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(constructor.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(constructor.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  ';'  expected	131	None	replace
262	[BUG]  [BUGGY]  scope  =  traverse(scope,  new  FlowScope(arg.getJSType()));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  new  FlowScope(arg.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  new  FlowScope(arg.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  ';'  expected	131	None	replace
263	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(type.getJSType()));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(type.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(type.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  ';'  expected	131	None	replace
264	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(n.getJSType()  +  1));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(n.getJSType()  +  1));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(n.getJSType()  +  1));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  ';'  expected	131	None	replace
265	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(scope,  functionScope);  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	32	None	replace
266	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  scope);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  scope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	32	None	replace
267	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(arg,  syntacticScope);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(arg,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	32	None	replace
268	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg);  JSType  functionScope  =  traverse(scope,  functionScope);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg);  JSType  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg);  JSType  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	32	None	replace
269	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  type,  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  type,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  type,  n);	  scope    =    traverse(scope,    arg,    type);    	non-compiled	[CE]  ';'  expected	141	None	replace
270	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  type,  registry);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  type,  registry);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  type,  registry);	  scope    =    traverse(scope,    arg,    type);    	non-compiled	[CE]  ';'  expected	141	None	replace
271	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n,  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n,  type);	  scope    =    traverse(scope,    arg,    type);    	non-compiled	[CE]  ';'  expected	141	None	replace
272	[BUG]  [BUGGY]  n.setJSType(type);  scope  =  traverse(arg,  null);  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(type);  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(type);  scope  =  traverse(arg,  null);	  scope    =    traverse(arg,    null);    n.setJSType(type);    scope    =    traverse(arg,    null);    	non-compiled	[CE]  ';'  expected	10	None	replace
273	[BUG]  [BUGGY]  scope  =  traverse(n,  constructor,  arg.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  constructor,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  constructor,  arg.getJSType());	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  ';'  expected	130	None	replace
274	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  constructor.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  constructor.getJSType());	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  ';'  expected	130	None	replace
275	[BUG]  [BUGGY]  scope  =  traverse(registry,  n,  arg.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  n,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  n,  arg.getJSType());	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  ';'  expected	130	None	replace
276	[BUG]  [BUGGY]  scope  =  traverse(registry,  n,  constructor.getJSType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  n,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  n,  constructor.getJSType());	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  ';'  expected	130	None	replace
277	[BUG]  [BUGGY]  scope  =  traverse(registry,  constructor,  n,  arg.getJSType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  constructor,  n,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  constructor,  n,  arg.getJSType());	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  ';'  expected	130	None	replace
278	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  n.getJSType());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  n.getJSType());	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  ';'  expected	130	None	replace
279	[BUG]  [BUGGY]  scope  =  traverseNode(constructor,  arg);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(constructor,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(constructor,  arg);	  scope    =    traverseNode(arg,    constructor);    	non-compiled	[CE]  ';'  expected	88	None	replace
280	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  constructor,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  constructor,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  constructor,  n);	  scope    =    traverseNode(arg,    constructor);    	non-compiled	[CE]  ';'  expected	88	None	replace
281	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  constructor,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  constructor,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  constructor,  type);	  scope    =    traverseNode(arg,    constructor);    	non-compiled	[CE]  ';'  expected	88	None	replace
282	[BUG]  [BUGGY]  scope  =  traverseNode(n,  constructor);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(n,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(n,  constructor);	  scope    =    traverseNode(arg,    constructor);    	non-compiled	[CE]  ';'  expected	88	None	replace
283	[BUG]  [BUGGY]  scope  =  traverse(arg,  nScope);  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  nScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  nScope);	  scope    =    traverse(arg,    functionScope);    scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	31	None	replace
284	[BUG]  [BUGGY]  scope  =  arg.getJSType();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  arg.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  arg.getJSType();	          scope    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
285	[BUG]  [BUGGY]  scope  =  n.getJSType(type);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getJSType(type);	          scope    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
286	[BUG]  [BUGGY]  scope  =  ct.getJSType();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  ct.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  ct.getJSType();	          scope    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
287	[BUG]  [BUGGY]  scope  =  constructor.getJSType();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  constructor.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  constructor.getJSType();	          scope    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
288	[BUG]  [BUGGY]  scope  =  type.getJSType();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  type.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  type.getJSType();	          scope    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
289	[BUG]  [BUGGY]  scope  =  n.getJSType()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getJSType()  +  1;  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getJSType()  +  1;	          scope    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	21	None	replace
290	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  null);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  null);	  scope    =    traverse(scope,    arg);    	non-compiled	[CE]  ';'  expected	49	None	replace
291	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	97	None	add
292	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	97	None	add
293	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	97	None	add
294	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }	  	non-compiled	[CE]  ';'  expected	97	None	add
295	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }	  	non-compiled	[CE]  ';'  expected	97	None	add
296	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  }	  	non-compiled	[CE]  ';'  expected	97	None	add
297	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
298	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
299	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    Scope  functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
300	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
301	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    JSType  functionScope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
302	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  Node  functionScope  =  arg.getNext();  scope  =  traverse(functionScope,  functionScope);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  Node  functionScope  =  arg.getNext();  scope  =  traverse(functionScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    Node  functionScope  =  arg.getNext();  scope  =  traverse(functionScope,  functionScope);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
303	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
304	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  Node  functionScope  =  arg.getNext();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  Node  functionScope  =  arg.getNext();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    Node  functionScope  =  arg.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
305	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
306	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
307	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
308	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
309	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
310	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
311	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
312	[BUG]  [BUGGY]  scope  =  traverse(constructorType,  arg,  type);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructorType,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructorType,  arg,  type);	  scope    =    traverse(config,    arg,    type);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
313	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  scope.getJSType());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	68	None	replace
314	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n.getJSType(),  type);	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	68	None	replace
315	[BUG]  [BUGGY]  scope  =  traverse(scope,  syntacticScope,  arg);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  syntacticScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  syntacticScope,  arg);	  scope    =    traverse(syntacticScope,    arg);    	non-compiled	[CE]  ';'  expected	81	None	replace
316	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  n,  arg);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(syntacticScope,  n,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  n,  arg);	  scope    =    traverse(syntacticScope,    arg);    	non-compiled	[CE]  ';'  expected	81	None	replace
317	[BUG]  [BUGGY]  scope  =  traverse(structor,  syntacticScope,  arg);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  syntacticScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  syntacticScope,  arg);	  scope    =    traverse(syntacticScope,    arg);    	non-compiled	[CE]  ';'  expected	81	None	replace
318	[BUG]  [BUGGY]  scope  =  traverse(g,  syntacticScope,  arg);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g,  syntacticScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  syntacticScope,  arg);	  scope    =    traverse(syntacticScope,    arg);    	non-compiled	[CE]  ';'  expected	81	None	replace
319	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  arg,  functionScope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(syntacticScope,  arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  arg,  functionScope);	  scope    =    traverse(functionScope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	127	None	replace
320	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  syntacticScope,  n);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  syntacticScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  syntacticScope,  n);	  scope    =    traverse(functionScope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	127	None	replace
321	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n,  arg,  syntacticScope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  n,  arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  n,  arg,  syntacticScope);	  scope    =    traverse(functionScope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	127	None	replace
322	[BUG]  [BUGGY]  scope  =(Node)arg.clonePath();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.clonePath();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.clonePath();	          scope    =(Node)arg.clone();    	non-compiled	[CE]  ';'  expected	118	None	replace
323	[BUG]  [BUGGY]  scope  =(Node)arg.cloneBinary();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.cloneBinary();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.cloneBinary();	          scope    =(Node)arg.clone();    	non-compiled	[CE]  ';'  expected	118	None	replace
324	[BUG]  [BUGGY]  scope  =(Node)arg.clone(),  scope);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.clone(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.clone(),  scope);	          scope    =(Node)arg.clone();    	non-compiled	[CE]  ';'  expected	118	None	replace
325	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n,  scope);	  scope    =    traverseNode(arg,    n);    	non-compiled	[CE]  ';'  expected	38	None	replace
326	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n,  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n,  type);	  scope    =    traverseNode(arg,    n);    	non-compiled	[CE]  ';'  expected	38	None	replace
327	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n.cloneTree());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n.cloneTree());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n.cloneTree());	  scope    =    traverseNode(arg,    n);    	non-compiled	[CE]  ';'  expected	38	None	replace
328	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n,  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n,  null);	  scope    =    traverseNode(arg,    n);    	non-compiled	[CE]  ';'  expected	38	None	replace
329	[BUG]  [BUGGY]  scope  =  traverseNode(constructor,  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(constructor,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(constructor,  n);	  scope    =    traverseNode(arg,    n);    	non-compiled	[CE]  ';'  expected	38	None	replace
330	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  constructorType,  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  constructorType,  type);	  scope    =    traverse(arg,    n,    type);    	non-compiled	[CE]  ';'  expected	60	None	replace
331	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  type,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  type,  scope);	  scope    =    traverse(arg,    n,    type);    	non-compiled	[CE]  ';'  expected	60	None	replace
332	[BUG]  [BUGGY]  scope  =  traverse(g,  n,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  n,  type);	  scope    =    traverse(arg,    n,    type);    	non-compiled	[CE]  ';'  expected	60	None	replace
333	[BUG]  [BUGGY]  scope  =  traverse(scope,  null,  arg);  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  null,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  null,  arg);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  ';'  expected	82	None	replace
334	[BUG]  [BUGGY]  scope  =  traverse(n,  null,  type);  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  null,  type);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  ';'  expected	82	None	replace
335	[BUG]  [BUGGY]  scope  =  traverse(n,  null,  arg);  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  null,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  null,  arg);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  ';'  expected	82	None	replace
336	[BUG]  [BUGGY]  scope  =  traverse(registry,  null,  arg);  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  null,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  null,  arg);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  ';'  expected	82	None	replace
337	[BUG]  [BUGGY]  scope  =  traverse(arg,  registry,  null,  type);  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  registry,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  registry,  null,  type);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  ';'  expected	82	None	replace
338	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  n,  type);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  n,  type);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  ';'  expected	82	None	replace
339	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  output);  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope,  output);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  output);	  scope    =    traverse(arg,    functionScope,    output);    	non-compiled	[CE]  ';'  expected	110	None	replace
340	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  syntaxNode);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  syntaxNode);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  syntaxNode);	  scope    =    traverse(arg,    functionScope,    output);    	non-compiled	[CE]  ';'  expected	110	None	replace
341	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  status);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  status);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  status);	  scope    =    traverse(arg,    functionScope,    output);    	non-compiled	[CE]  ';'  expected	110	None	replace
342	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  context);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  context);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  context);	  scope    =    traverse(arg,    functionScope,    output);    	non-compiled	[CE]  ';'  expected	110	None	replace
343	[BUG]  [BUGGY]  scope  =  traverse(scope,  functionScope,  null);  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  functionScope,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  functionScope,  null);	  scope    =    traverse(arg,    functionScope,    null);    	non-compiled	[CE]  ';'  expected	109	None	replace
344	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope,  null);  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope,  null);	  scope    =    traverse(arg,    functionScope,    null);    	non-compiled	[CE]  ';'  expected	109	None	replace
345	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  null);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  null);	  scope    =    traverse(arg,    functionScope,    null);    	non-compiled	[CE]  ';'  expected	109	None	replace
346	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  arg,  null);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  arg,  null);	  scope    =    traverse(arg,    functionScope,    null);    	non-compiled	[CE]  ';'  expected	109	None	replace
347	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  type,  null);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  type,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  type,  null);	  scope    =    traverse(arg,    functionScope,    null);    	non-compiled	[CE]  ';'  expected	109	None	replace
348	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  functionScope,  null);  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  functionScope,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  functionScope,  null);	  scope    =    traverse(arg,    functionScope,    null);    	non-compiled	[CE]  ';'  expected	109	None	replace
349	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  null);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  null);	  scope    =    traverse(arg,    functionScope,    null);    	non-compiled	[CE]  ';'  expected	109	None	replace
350	[BUG]  [BUGGY]  scope  =  traverse(n,  arg.getJSType(),  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg.getJSType(),  type);	  scope    =    traverse(n,    arg.getJSType());    	non-compiled	[CE]  ';'  expected	66	None	replace
351	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  ct.getJSType());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  ct.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  ct.getJSType());	  scope    =    traverse(n,    arg.getJSType());    	non-compiled	[CE]  ';'  expected	66	None	replace
352	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(scope,  functionScope);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	33	None	replace
353	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  scope);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  scope);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	33	None	replace
354	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  scope);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  scope);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	33	None	replace
355	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  functionScope);  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  ';'  expected	33	None	replace
356	[BUG]  [BUGGY]  scope  =  arg.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  arg.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  arg.getLastChild();	          scope    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
357	[BUG]  [BUGGY]  scope  =  n.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getFirstChild();	          scope    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
358	[BUG]  [BUGGY]  scope  =  arg.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  arg.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  arg.getFirstChild();	          scope    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
359	[BUG]  [BUGGY]  scope  =  n.getLastChild()  +  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getLastChild()  +  1;  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getLastChild()  +  1;	          scope    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
360	[BUG]  [BUGGY]  scope  =  n.getLastChild().getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getLastChild().getNext();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getLastChild().getNext();	          scope    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
361	[BUG]  [BUGGY]  scope  =  ct.getLastChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  ct.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  ct.getLastChild();	          scope    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
362	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  n);	  scope    =    traverse(arg,    n,    functionScope);    	non-compiled	[CE]  ';'  expected	93	None	replace
363	[BUG]  [BUGGY]  scope  =  traverse(functacticScope,  n,  arg);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functacticScope,  n,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functacticScope,  n,  arg);	  scope    =    traverse(arg,    n,    functionScope);    	non-compiled	[CE]  ';'  expected	93	None	replace
364	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  functionScope,  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  functionScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  functionScope,  type);	  scope    =    traverse(arg,    n,    functionScope);    	non-compiled	[CE]  ';'  expected	93	None	replace
365	[BUG]  [BUGGY]  scope  =  traverse(arg.getJSType(),  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.getJSType(),  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.getJSType(),  n);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	70	None	replace
366	[BUG]  [BUGGY]  scope  =  traverse(n.getJSType(),  arg,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n.getJSType(),  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n.getJSType(),  arg,  type);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	70	None	replace
367	[BUG]  [BUGGY]  scope  =  traverse(n.getJSType(),  type,  arg);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n.getJSType(),  type,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n.getJSType(),  type,  arg);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	70	None	replace
368	[BUG]  [BUGGY]  scope  =  traverse(n.getJSType(),  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n.getJSType(),  type);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	70	None	replace
369	[BUG]  [BUGGY]  scope  =  traverse(scope.getJSType(),  arg);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope.getJSType(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope.getJSType(),  arg);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	70	None	replace
370	[BUG]  [BUGGY]  scope  =  traverse(n.getJSType(),  constructor,  arg);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n.getJSType(),  constructor,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n.getJSType(),  constructor,  arg);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	70	None	replace
371	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  ';'  expected	5	None	add
372	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
373	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
374	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
375	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
376	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	5	None	add
377	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
378	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]                  NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
379	[BUG]  [BUGGY]  n.setJSType(arg.getString());  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getString());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getString());	          n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	117	None	replace
380	[BUG]  [BUGGY]  scope  =  arg.getType();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  arg.getType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  arg.getType();	          scope    =    n.getType();    	non-compiled	[CE]  ';'  expected	27	None	replace
381	[BUG]  [BUGGY]  scope  =  n.getInstanceType();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getInstanceType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getInstanceType();	          scope    =    n.getType();    	non-compiled	[CE]  ';'  expected	27	None	replace
382	[BUG]  [BUGGY]  scope  =  n.getScopeType();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getScopeType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getScopeType();	          scope    =    n.getType();    	non-compiled	[CE]  ';'  expected	27	None	replace
383	[BUG]  [BUGGY]  scope  =  n.getScope();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getScope();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getScope();	          scope    =    n.getType();    	non-compiled	[CE]  ';'  expected	27	None	replace
384	[BUG]  [BUGGY]  scope  =  constructor.getType();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  constructor.getType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  constructor.getType();	          scope    =    n.getType();    	non-compiled	[CE]  ';'  expected	27	None	replace
385	[BUG]  [BUGGY]  scope  =  traverse(n,  null,  arg.getJSType());  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  null,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  null,  arg.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  ';'  expected	84	None	replace
386	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  n.getJSType());  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  n.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  ';'  expected	84	None	replace
387	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  n,  n.getJSType());  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  n,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  n,  n.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  ';'  expected	84	None	replace
388	[BUG]  [BUGGY]  scope  =  traverse(scope,  null,  arg.getJSType());  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  null,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  null,  arg.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  ';'  expected	84	None	replace
389	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  null,  n.getJSType());  [CE]  ';'  expected  [FE]                    NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  null,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  null,  n.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  ';'  expected	84	None	replace
390	[BUG]  [BUGGY]  scope  =  traverse(scope,  null,  n.getJSType());  [CE]  ';'  expected  [FE]                      NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  null,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  null,  n.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  ';'  expected	84	None	replace
391	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg,  syntacticScope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg,  syntacticScope);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	126	None	replace
392	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  syntacticScope,  type);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	126	None	replace
393	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  functionScope,  syntacticScope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  functionScope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  functionScope,  syntacticScope);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	126	None	replace
394	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  syntacticScope,  n);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	126	None	replace
395	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  functionScope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  syntacticScope,  functionScope);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	126	None	replace
396	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  type,  syntacticScope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  type,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  type,  syntacticScope);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  ';'  expected	126	None	replace
397	[BUG]  [BUGGY]  scope  =  traverse(scope,  functionScope,  type);  [CE]  ';'  expected  [FE]        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  functionScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  functionScope,  type);	  scope    =    traverse(arg,    functionScope,    type);    	non-compiled	[CE]  ';'  expected	63	None	replace
398	[BUG]  [BUGGY]  scope  =  traverse(scope,  functionScope,  arg);  [CE]  ';'  expected  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  functionScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  functionScope,  arg);	  scope    =    traverse(arg,    functionScope,    type);    	non-compiled	[CE]  ';'  expected	63	None	replace
399	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n,  type);  [CE]  ';'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  n,  type);	  scope    =    traverse(arg,    functionScope,    type);    	non-compiled	[CE]  ';'  expected	63	None	replace
400	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope,  type);  [CE]  ';'  expected  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope,  type);	  scope    =    traverse(arg,    functionScope,    type);    	non-compiled	[CE]  ';'  expected	63	None	replace
401	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  functionScope,  type);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  functionScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  functionScope,  type);	  scope    =    traverse(arg,    functionScope,    type);    	non-compiled	[CE]  ';'  expected	63	None	replace
402	[BUG]  [BUGGY]  scope  =  traverse(type,  functionScope,  arg);  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(type,  functionScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(type,  functionScope,  arg);	  scope    =    traverse(arg,    functionScope,    type);    	non-compiled	[CE]  ';'  expected	63	None	replace
403	[BUG]  [BUGGY]  scope  =  traverse(arg,  type,  functionScope);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  type,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type,  functionScope);	  scope    =    traverse(arg,    functionScope,    type);    	non-compiled	[CE]  ';'  expected	63	None	replace
404	[BUG]  [BUGGY]  scope  =  traverse(scope,  new  FlowScope(),  arg);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  new  FlowScope(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  new  FlowScope(),  arg);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  ';'  expected	123	None	replace
405	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  functionScope,  scope);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  ';'  expected	123	None	replace
406	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(),  functionScope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  new  FlowScope(),  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope(),  functionScope);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  ';'  expected	123	None	replace
407	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  new  FlowScope(),  arg);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  new  FlowScope(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  new  FlowScope(),  arg);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  ';'  expected	123	None	replace
408	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  syntacticScope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  scope,  syntacticScope);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  ';'  expected	123	None	replace
409	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  functionScope,  type);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  ';'  expected	123	None	replace
410	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg.getJSType(),  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg.getJSType(),  type);	  scope    =    traverse(arg,    n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	67	None	replace
411	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg.getJSType(),  type);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg.getJSType(),  type);	  scope    =    traverse(arg,    n.getJSType(),    type);    	non-compiled	[CE]  ')'  expected	67	None	replace
412	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  type,  scope);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  type,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  type,  scope);	  scope    =    traverse(arg,    n.getJSType(),    type);    	non-compiled	[CE]  ')'  expected	67	None	replace
413	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  constructorType);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  constructorType);	  scope    =    traverse(arg,    n.getJSType(),    type);    	non-compiled	[CE]  ')'  expected	67	None	replace
414	[BUG]  [BUGGY]          n.setJSType(type);  n.setJSType(type);  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    n.setJSType(type);	  	non-compiled	[CE]  ')'  expected	22	None	add
415	[BUG]  [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  ')'  expected	22	None	add
416	[BUG]  [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }	  	non-compiled	[CE]  ')'  expected	22	None	add
417	[BUG]  [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  ')'  expected	22	None	add
418	[BUG]  [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION)  {  n.setJSType(type);  }  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION)  {  n.setJSType(type);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    if(arg.getType()  ==  Token.FUNCTION)  {  n.setJSType(type);  }	  	non-compiled	[CE]  ')'  expected	22	None	add
419	[BUG]  [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  scope.putProp(Node.SOURCENAME_PROP,  null);  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  scope.putProp(Node.SOURCENAME_PROP,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  scope.putProp(Node.SOURCENAME_PROP,  null);  }	  	non-compiled	[CE]  ')'  expected	22	None	add
420	[BUG]  [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  traverseNew  =  true;  }  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  traverseNew  =  true;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  traverseNew  =  true;  }	  	non-compiled	[CE]  ')'  expected	22	None	add
421	[BUG]  [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  scope.putProp(Node.SOURCENAME_PROP,  type);  }  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  scope.putProp(Node.SOURCENAME_PROP,  type);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  n.setJSType(type);  }  else  {  scope.putProp(Node.SOURCENAME_PROP,  type);  }	  	non-compiled	[CE]  ')'  expected	22	None	add
422	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(true));  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(true));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(true));	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  ')'  expected	122	None	replace
423	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope(false));  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope(false));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  new  FlowScope(false));	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  ')'  expected	122	None	replace
424	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false,  scope));  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false,  scope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(false,  scope));	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  ')'  expected	122	None	replace
425	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(false));  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(false));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  new  FlowScope(false));	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  ')'  expected	122	None	replace
426	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(false));  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  new  FlowScope(false));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope(false));	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  ')'  expected	122	None	replace
427	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false),  scope);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(false),  scope);	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  ')'  expected	122	None	replace
428	[BUG]  [BUGGY]  scope  =  traverse(scope,  new  FlowScope(false));  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  new  FlowScope(false));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  new  FlowScope(false));	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  ')'  expected	122	None	replace
429	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ')'  expected	13	None	add
430	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  ')'  expected	13	None	add
431	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ')'  expected	13	None	add
432	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ')'  expected	13	None	add
433	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
434	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ')'  expected  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    Scope  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ')'  expected	13	None	add
435	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }	  	non-compiled	[CE]  ')'  expected	13	None	add
436	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  type,  null);  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  type,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  type,  null);	  scope    =    traverse(arg,    n,    null);    	non-compiled	[CE]  ')'  expected	73	None	replace
437	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  null,  type);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  null,  type);	  scope    =    traverse(arg,    n,    null);    	non-compiled	[CE]  ')'  expected	73	None	replace
438	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  null);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  null);	  scope    =    traverse(arg,    n,    null);    	non-compiled	[CE]  ')'  expected	73	None	replace
439	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  null,  scope);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  null,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  null,  scope);	  scope    =    traverse(arg,    n,    null);    	non-compiled	[CE]  ')'  expected	73	None	replace
440	[BUG]  [BUGGY]  n.setJSType(type.getInstanceType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(type.getInstanceType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(type.getInstanceType());	          n.setJSType(arg.getInstanceType());    	non-compiled	[CE]  ')'  expected	29	None	replace
441	[BUG]  [BUGGY]  n.setJSType(arg,  scope.getInstanceType());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg,  scope.getInstanceType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg,  scope.getInstanceType());	          n.setJSType(arg.getInstanceType());    	non-compiled	[CE]  ')'  expected	29	None	replace
442	[BUG]  [BUGGY]  n.setJSType(type,  arg.getInstanceType());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(type,  arg.getInstanceType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(type,  arg.getInstanceType());	          n.setJSType(arg.getInstanceType());    	non-compiled	[CE]  ')'  expected	29	None	replace
443	[BUG]  [BUGGY]  n.setJSType(constructor.getInstanceType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(constructor.getInstanceType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(constructor.getInstanceType());	          n.setJSType(arg.getInstanceType());    	non-compiled	[CE]  ')'  expected	29	None	replace
444	[BUG]  [BUGGY]  n.setJSType(scope.getInstanceType());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(scope.getInstanceType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(scope.getInstanceType());	          n.setJSType(arg.getInstanceType());    	non-compiled	[CE]  ')'  expected	29	None	replace
445	[BUG]  [BUGGY]  n.setJSType(structor.getInstanceType());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(structor.getInstanceType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(structor.getInstanceType());	          n.setJSType(arg.getInstanceType());    	non-compiled	[CE]  ')'  expected	29	None	replace
446	[BUG]  [BUGGY]  scope  =  traverse(scope,  syntacticScope,  functionScope);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  syntacticScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  syntacticScope,  functionScope);	  scope    =    traverse(arg,    syntacticScope,    functionScope);    	non-compiled	[CE]  ')'  expected	125	None	replace
447	[BUG]  [BUGGY]  scope  =  traverse(n,  syntacticScope,  functionScope);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  syntacticScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  syntacticScope,  functionScope);	  scope    =    traverse(arg,    syntacticScope,    functionScope);    	non-compiled	[CE]  ')'  expected	125	None	replace
448	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructorType,  type);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  constructorType,  type);	  scope    =    traverse(arg,    constructorType,    type);    	non-compiled	[CE]  ')'  expected	86	None	replace
449	[BUG]  [BUGGY]  scope  =  traverse(registry,  constructorType,  type);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  constructorType,  type);	  scope    =    traverse(arg,    constructorType,    type);    	non-compiled	[CE]  ')'  expected	86	None	replace
450	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  constructorType,  type);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  constructorType,  type);	  scope    =    traverse(arg,    constructorType,    type);    	non-compiled	[CE]  ')'  expected	86	None	replace
451	[BUG]  [BUGGY]  scope  =  traverse(n,  constructorType,  type);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  constructorType,  type);	  scope    =    traverse(arg,    constructorType,    type);    	non-compiled	[CE]  ')'  expected	86	None	replace
452	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  scope.getJSType());  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  scope.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  scope.getJSType());	  scope    =    traverse(scope,    arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	56	None	replace
453	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n.getJSType(),  type);  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  n.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n.getJSType(),  type);	  scope    =    traverse(scope,    arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	56	None	replace
454	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n,  arg.getJSType());  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  n,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n,  arg.getJSType());	  scope    =    traverse(scope,    arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	56	None	replace
455	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  type,  n.getJSType());  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  type,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  type,  n.getJSType());	  scope    =    traverse(scope,    arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	56	None	replace
456	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n,  type.getJSType());  [CE]  ')'  expected  [FE]                                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  n,  type.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n,  type.getJSType());	  scope    =    traverse(scope,    arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	56	None	replace
457	[BUG]  [BUGGY]  scope  =  traverse(scope,  syntacticScope,  type);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  syntacticScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  syntacticScope,  type);	  scope    =    traverse(arg,    syntacticScope,    type);    	non-compiled	[CE]  ')'  expected	79	None	replace
458	[BUG]  [BUGGY]  scope  =  traverse(n,  syntacticScope,  type);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  syntacticScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  syntacticScope,  type);	  scope    =    traverse(arg,    syntacticScope,    type);    	non-compiled	[CE]  ')'  expected	79	None	replace
459	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  arg,  type);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  arg,  type);	  scope    =    traverse(arg,    syntacticScope,    type);    	non-compiled	[CE]  ')'  expected	79	None	replace
460	[BUG]  [BUGGY]  scope  =  traverse(registry,  syntacticScope,  type);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  syntacticScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  syntacticScope,  type);	  scope    =    traverse(arg,    syntacticScope,    type);    	non-compiled	[CE]  ')'  expected	79	None	replace
461	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  syntacticScope,  type);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  syntacticScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  syntacticScope,  type);	  scope    =    traverse(arg,    syntacticScope,    type);    	non-compiled	[CE]  ')'  expected	79	None	replace
462	[BUG]  [BUGGY]  scope  =  traverse(type,  syntacticScope,  arg);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(type,  syntacticScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(type,  syntacticScope,  arg);	  scope    =    traverse(arg,    syntacticScope,    type);    	non-compiled	[CE]  ')'  expected	79	None	replace
463	[BUG]  [BUGGY]  scope  =  traverse(scope,  null,  n);  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  null,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  null,  n);	  scope    =    traverse(arg,    null,    n);    	non-compiled	[CE]  ')'  expected	83	None	replace
464	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  type,  n);  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  type,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  type,  n);	  scope    =    traverse(arg,    null,    n);    	non-compiled	[CE]  ')'  expected	83	None	replace
465	[BUG]  [BUGGY]  scope  =  traverse(n,  null,  arg.getType());  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  null,  arg.getType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  null,  arg.getType());	  scope    =    traverse(arg,    null,    n);    	non-compiled	[CE]  ')'  expected	83	None	replace
466	[BUG]  [BUGGY]  scope  =  traverseNode(n,  arg.getJSType());  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(n,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(n,  arg.getJSType());	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	41	None	replace
467	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n.getJSType(),  type);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n.getJSType(),  type);	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	41	None	replace
468	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n,  constructor.getJSType());  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n,  constructor.getJSType());	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	41	None	replace
469	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  constructor.getJSType());  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  constructor.getJSType());	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	41	None	replace
470	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n.getJSType(),  scope);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n.getJSType(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n.getJSType(),  scope);	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	41	None	replace
471	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n.getJSType(),  constructor);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n.getJSType(),  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n.getJSType(),  constructor);	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  ')'  expected	41	None	replace
472	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ')'  expected	101	None	add
473	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  ')'  expected	101	None	add
474	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ')'  expected	101	None	add
475	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ')'  expected	101	None	add
476	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
477	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  ')'  expected  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ')'  expected	101	None	add
478	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
479	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
480	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
481	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
482	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
483	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
484	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  type  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  type  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    scope    =    traverse(arg,    null);    type  =  traverse(arg,  null);  n.setJSType(type);  scope  =  traverse(arg,  null);	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
485	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
486	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
487	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
488	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
489	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  FunctionType  functionScope  =  n.getFunctionScope();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  FunctionType  functionScope  =  n.getFunctionScope();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    FunctionType  functionScope  =  n.getFunctionScope();	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
490	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Node  functionScope  =  arg.getNext();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Node  functionScope  =  arg.getNext();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    Node  functionScope  =  arg.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
491	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Node  functionScope  =  arg.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Node  functionScope  =  arg.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    Node  functionScope  =  arg.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
492	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  syntacticScope,  scope);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  syntacticScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  syntacticScope,  scope);	  scope    =    traverseNode(arg,    syntacticScope);    	non-compiled	[CE]  ')'  expected	40	None	replace
493	[BUG]  [BUGGY]  scope  =  traverseNode(scope,  syntacticScope);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(scope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(scope,  syntacticScope);	  scope    =    traverseNode(arg,    syntacticScope);    	non-compiled	[CE]  ')'  expected	40	None	replace
494	[BUG]  [BUGGY]  scope  =  traverseNode(functionScope,  syntacticScope);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(functionScope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(functionScope,  syntacticScope);	  scope    =    traverseNode(arg,    syntacticScope);    	non-compiled	[CE]  ')'  expected	40	None	replace
495	[BUG]  [BUGGY]  scope  =  traverseNode(n,  syntacticScope);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(n,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(n,  syntacticScope);	  scope    =    traverseNode(arg,    syntacticScope);    	non-compiled	[CE]  ')'  expected	40	None	replace
496	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  syntacticScope,  type);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  syntacticScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  syntacticScope,  type);	  scope    =    traverseNode(arg,    syntacticScope);    	non-compiled	[CE]  ')'  expected	40	None	replace
497	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  syntacticScope,  n);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  syntacticScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  syntacticScope,  n);	  scope    =    traverseNode(arg,    syntacticScope);    	non-compiled	[CE]  ')'  expected	40	None	replace
498	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    n.setJSType(getNativeType(UNKNOWN_TYPE));	  	non-compiled	[CE]  ')'  expected	112	None	add
499	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  Node  arg  =  constructor.getNext();  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  Node  arg  =  constructor.getNext();  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    Node  arg  =  constructor.getNext();  n.setJSType(getNativeType(UNKNOWN_TYPE));	  	non-compiled	[CE]  ')'  expected	112	None	add
500	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  NodeUtil.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  NodeUtil.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    NodeUtil.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE));	  	non-compiled	[CE]  ')'  expected	112	None	add
501	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  NodeUtil.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  NodeUtil.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    NodeUtil.setJSType(getNativeType(UNKNOWN_TYPE));	  	non-compiled	[CE]  ')'  expected	112	None	add
502	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  ((  UnknownType)arg).setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  ((  UnknownType)arg).setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    ((  UnknownType)arg).setJSType(getNativeType(UNKNOWN_TYPE));	  	non-compiled	[CE]  ')'  expected	112	None	add
503	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  else  if(arg.getType()  ==  Token.FUNCTION)  {  return  scope;  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  else  if(arg.getType()  ==  Token.FUNCTION)  {  return  scope;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    n.setJSType(getNativeType(UNKNOWN_TYPE));  }  else  if(arg.getType()  ==  Token.FUNCTION)  {  return  scope;  }	  	non-compiled	[CE]  'else'  without  'if'	112	None	add
504	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  nameNode);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  nameNode);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  nameNode);	  scope    =    traverseNode(arg,    context);    	non-compiled	[CE]  ')'  expected	43	None	replace
505	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  syntacticScope);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  syntacticScope);	  scope    =    traverse(scope,    syntacticScope);    	non-compiled	[CE]  ')'  expected	76	None	replace
506	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  syntacticScope);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  scope,  syntacticScope);	  scope    =    traverse(scope,    syntacticScope);    	non-compiled	[CE]  ')'  expected	76	None	replace
507	[BUG]  [BUGGY]  scope  =  traverse(registry,  syntacticScope);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  syntacticScope);	  scope    =    traverse(scope,    syntacticScope);    	non-compiled	[CE]  ')'  expected	76	None	replace
508	[BUG]  [BUGGY]  scope  =  traverse(arg,  nameNode);  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  nameNode);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  nameNode);	  scope    =    traverse(arg,    output);    	non-compiled	[CE]  ')'  expected	111	None	replace
509	[BUG]  [BUGGY]  scope  =  traverseNode(n,  null);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(n,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(n,  null);	  scope    =    traverseNode(arg,    null);    	non-compiled	[CE]  ')'  expected	42	None	replace
510	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  null,  type);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  null,  type);	  scope    =    traverseNode(arg,    null);    	non-compiled	[CE]  ')'  expected	42	None	replace
511	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  null,  n);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  null,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  null,  n);	  scope    =    traverseNode(arg,    null);    	non-compiled	[CE]  ')'  expected	42	None	replace
512	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  null,  scope);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  null,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  null,  scope);	  scope    =    traverseNode(arg,    null);    	non-compiled	[CE]  ')'  expected	42	None	replace
513	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  null,  n.getJSType());  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  null,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  null,  n.getJSType());	  scope    =    traverseNode(arg,    null);    	non-compiled	[CE]  ')'  expected	42	None	replace
514	[BUG]  [BUGGY]  scope  =  traverse(arg,  newScope);  [CE]  ')'  expected  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  newScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  newScope);	  scope    =    traverse(arg,    functionScope);    if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    	non-compiled	[CE]  ')'  expected	146	None	replace
515	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(syntacticScope));  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(syntacticScope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(syntacticScope));	  scope    =    traverse(arg,    new    FlowScope(functionScope));    	non-compiled	[CE]  ')'  expected	121	None	replace
516	[BUG]  [BUGGY]  scope  =  traverse(scope,  new  FlowScope(functionScope));  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  new  FlowScope(functionScope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  new  FlowScope(functionScope));	  scope    =    traverse(arg,    new    FlowScope(functionScope));    	non-compiled	[CE]  ')'  expected	121	None	replace
517	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope,  scope));  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope,  scope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(functionScope,  scope));	  scope    =    traverse(arg,    new    FlowScope(functionScope));    	non-compiled	[CE]  ')'  expected	121	None	replace
518	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(functionScope));  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  new  FlowScope(functionScope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope(functionScope));	  scope    =    traverse(arg,    new    FlowScope(functionScope));    	non-compiled	[CE]  ')'  expected	121	None	replace
519	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope,  type));  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope,  type));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(functionScope,  type));	  scope    =    traverse(arg,    new    FlowScope(functionScope));    	non-compiled	[CE]  ')'  expected	121	None	replace
520	[BUG]  [BUGGY]  scope  =  traverse(compiler,  arg);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(compiler,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(compiler,  arg);	  scope    =    traverse(arg,    compiler);    	non-compiled	[CE]  ')'  expected	144	None	replace
521	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  compiler);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  compiler);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  compiler);	  scope    =    traverse(arg,    compiler);    	non-compiled	[CE]  ')'  expected	144	None	replace
522	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  compiler);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  compiler);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  compiler);	  scope    =    traverse(arg,    compiler);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
523	[BUG]  [BUGGY]  scope  =  traverse(arg,  compiler,  type);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  compiler,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  compiler,  type);	  scope    =    traverse(arg,    compiler);    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
524	[BUG]  [BUGGY]  scope  =(Node)arg.getNext(),  scope);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.getNext(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.getNext(),  scope);	          scope    =(Node)arg.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
525	[BUG]  [BUGGY]  scope  =(Node)arg.getNext(),  type);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.getNext(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.getNext(),  type);	          scope    =(Node)arg.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
526	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
527	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
528	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
529	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
530	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
531	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  Scope  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [CE]  illegal  start  of  type  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  Scope  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    Scope  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
532	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  type  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
533	[BUG]  [BUGGY]  Scope  functionScope  =  traverse(arg,  scope);  [CE]  illegal  start  of  type  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Scope  functionScope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Scope  functionScope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
534	[BUG]  [BUGGY]  Scope  functionScope  =  traverse(scope,  arg);  [CE]  illegal  start  of  type  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Scope  functionScope  =  traverse(scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Scope  functionScope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
535	[BUG]  [BUGGY]  Scope  functionScope  =  traverse(arg,  scope.cloneTree());  [CE]  illegal  start  of  type  [FE]                      IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Scope  functionScope  =  traverse(arg,  scope.cloneTree());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Scope  functionScope  =  traverse(arg,  scope.cloneTree());	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
536	[BUG]  [BUGGY]  Scope  functionScope  =  traverse(arg,  scope.scope);  [CE]  illegal  start  of  type  [FE]                        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Scope  functionScope  =  traverse(arg,  scope.scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Scope  functionScope  =  traverse(arg,  scope.scope);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
537	[BUG]  [BUGGY]  Scope  functionScope  =  traverse(arg,  syntacticScope);  [CE]  illegal  start  of  type  [FE]                          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Scope  functionScope  =  traverse(arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Scope  functionScope  =  traverse(arg,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
538	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  type  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  type	147	None	add
539	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  type  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  type	147	None	add
540	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  illegal  start  of  type  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  illegal  start  of  type	147	None	add
541	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  type  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  type	147	None	add
542	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  illegal  start  of  type  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    Scope  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  illegal  start  of  type	147	None	add
543	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  type  =  traverse(arg,  functionScope);  [CE]  illegal  start  of  type  [FE]              IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  type  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  n.setJSType(type);  type  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  illegal  start  of  type	147	None	add
544	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.next());  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n.next());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n.next());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
545	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n.next());  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  n.next());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n.next());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
546	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope.next());  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope.next());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope.next());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
547	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg.next(),  type);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg.next(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg.next(),  type);	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
548	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg.next());  [CE]  illegal  start  of  type  [FE]                                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg.next());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg.next());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
549	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg.next(),  n);  [CE]  illegal  start  of  type  [FE]                                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg.next(),  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg.next(),  n);	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
550	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg.getNext());  [CE]  illegal  start  of  type  [FE]                                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg.getNext());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg.getNext());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
551	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  syntax);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  syntax);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  scope,  syntax);	  scope    =    traverse(arg,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
552	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  operationScope);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  operationScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  scope,  operationScope);	  scope    =    traverse(arg,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
553	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  type);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  scope,  type);	  scope    =    traverse(arg,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
554	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  functionScope);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  scope,  functionScope);	  scope    =    traverse(arg,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
555	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  scope  =  traverse(n,  scope);  [CE]  illegal  start  of  type  [FE]    StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  scope  =  traverse(n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    scope  =  traverse(n,  scope);	  	non-compiled	[CE]  illegal  start  of  type	54	None	add
556	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  Scope  n  =  traverse(arg,  scope);  [CE]  illegal  start  of  type  [FE]      StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  Scope  n  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    Scope  n  =  traverse(arg,  scope);	  	non-compiled	[CE]  illegal  start  of  type	54	None	add
557	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(type);  [CE]  illegal  start  of  type  [FE]        StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    n.setJSType(type);	  	non-compiled	[CE]  illegal  start  of  type	54	None	add
558	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(type);  scope  =  traverse(n,  scope);  [CE]  illegal  start  of  type  [FE]          StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(type);  scope  =  traverse(n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    n.setJSType(type);  scope  =  traverse(n,  scope);	  	non-compiled	[CE]  illegal  start  of  type	54	None	add
559	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  Scope  scope  =  traverse(n,  scope);  [CE]  illegal  start  of  type  [FE]            StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  Scope  scope  =  traverse(n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    Scope  scope  =  traverse(n,  scope);	  	non-compiled	[CE]  illegal  start  of  type	54	None	add
560	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  n  =  traverse(arg,  scope);  [CE]  illegal  start  of  type  [FE]              StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  n  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    n  =  traverse(arg,  scope);	  	non-compiled	[CE]  illegal  start  of  type	54	None	add
561	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(type);  scope  =  traverse(arg,  scope);  [CE]  illegal  start  of  type  [FE]                StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(type);  scope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    n.setJSType(type);  scope  =  traverse(arg,  scope);	  	non-compiled	[CE]  illegal  start  of  type	54	None	add
562	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  n,  new  FlowScope());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  n,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  n,  new  FlowScope());	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
563	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  new  FlowScope());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  new  FlowScope());	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
564	[BUG]  [BUGGY]  scope  =  traverse(n,  null,  new  FlowScope());  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  null,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  null,  new  FlowScope());	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
565	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope(),  scope);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  new  FlowScope(),  scope);	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
566	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  type,  new  FlowScope());  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  type,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  type,  new  FlowScope());	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
567	[BUG]  [BUGGY]  scope  =  traverse(arg.getNext(),  scope);  [CE]  illegal  start  of  type  [FE]    StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.getNext(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.getNext(),  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
568	[BUG]  [BUGGY]  scope  =  traverse(arg.getJSType(),  scope);  [CE]  illegal  start  of  type  [FE]      StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.getJSType(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.getJSType(),  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
569	[BUG]  [BUGGY]  scope  =  traverse(arg.next,  scope);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.next,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.next,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
570	[BUG]  [BUGGY]  scope  =  traverse(arg.next(),  scope);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.next(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.next(),  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
571	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    scope  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
572	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Scope  scope  =  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Scope  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    Scope  scope  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
573	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Scope  arg  =  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Scope  arg  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    Scope  arg  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
574	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
575	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
576	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Node  arg  =  constructor.getNext();  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Node  arg  =  constructor.getNext();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    Node  arg  =  constructor.getNext();	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
577	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Node  arg  =  constructor.getFirstChild();  [CE]  cannot  find  symbol  [FE]                NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Node  arg  =  constructor.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    Node  arg  =  constructor.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
578	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  arg);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  arg);	  scope    =    traverse(structor,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
579	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  n);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  n);	  scope    =    traverse(structor,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
580	[BUG]  [BUGGY]  scope  =  traverse(g,  arg,  n);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  arg,  n);	  scope    =    traverse(structor,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
581	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  structor);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  structor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  structor);	  scope    =    traverse(structor,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
582	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
583	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  scope  =  traverse(arg,  functionScope);  Node  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  scope  =  traverse(arg,  functionScope);  Node  n  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    scope  =  traverse(arg,  functionScope);  Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
584	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    Node  functionScope  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
585	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Scope  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Scope  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    Scope  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
586	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Scope  functionScope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Scope  functionScope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    Scope  functionScope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
587	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Scope  functionScope  =  traverse(arg,  functionScope);  Node  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Scope  functionScope  =  traverse(arg,  functionScope);  Node  n  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    Scope  functionScope  =  traverse(arg,  functionScope);  Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
588	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  FunctionType  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  FunctionType  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    FunctionType  functionScope  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
589	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Node  functionScope  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Node  functionScope  =  n.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    Node  functionScope  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
590	[BUG]  [BUGGY]  scope  =  traverse(n,  newScope());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  newScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  newScope());	  scope    =    traverse(arg,    newScope());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
591	[BUG]  [BUGGY]  scope  =  traverse(scope,  newScope());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  newScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  newScope());	  scope    =    traverse(arg,    newScope());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
592	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope());	  scope    =    traverse(arg,    newScope());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
593	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.newScope());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.newScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.newScope());	  scope    =    traverse(arg,    newScope());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
594	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  n);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  n);	  scope    =    traverse(scope,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
595	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg.getNext());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg.getNext());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg.getNext());	  scope    =    traverse(scope,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
596	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  type);	  scope    =    traverse(arg,    type,    n);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
597	[BUG]  [BUGGY]  scope  =  traverseNode(arg.getNext(),  scope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg.getNext(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg.getNext(),  scope);	  scope    =    traverseNode(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
598	[BUG]  [BUGGY]  scope  =  traverseNode(arg.node,  scope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg.node,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg.node,  scope);	  scope    =    traverseNode(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
599	[BUG]  [BUGGY]  scope  =  traverseNode(n,  scope,  arg);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(n,  scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(n,  scope,  arg);	  scope    =    traverseNode(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
600	[BUG]  [BUGGY]  scope  =  traverseNode(arg.next,  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg.next,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg.next,  scope);	  scope    =    traverseNode(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
601	[BUG]  [BUGGY]  scope  =  traverseScope(arg,  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseScope(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseScope(arg,  scope);	  scope    =    traverseNode(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
602	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg,  type);	  scope    =    traverse(structor,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
603	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  constructor.getJSType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  constructor.getJSType());	  scope    =    traverse(constructor,    arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
604	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructor,  n.getJSType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructor,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructor,  n.getJSType());	  scope    =    traverse(constructor,    arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
605	[BUG]  [BUGGY]  scope  =  traverse(registry,  constructor,  arg.getJSType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  constructor,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  constructor,  arg.getJSType());	  scope    =    traverse(constructor,    arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
606	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(STRING_TYPE));	          n.setJSType(getNativeType(FUNCTION_TYPE));    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
607	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(OBJECT_TYPE));	          n.setJSType(getNativeType(FUNCTION_TYPE));    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
608	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
609	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope);  FunctionScope  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope);  FunctionScope  functionScope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope);  FunctionScope  functionScope  =  traverse(arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
610	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
611	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
612	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
613	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	153	None	add
614	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    Scope  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	153	None	add
615	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    scope  =  traverse(arg,  null);  if(scope  ==  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	153	None	add
616	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	153	None	add
617	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(constructorType));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(constructorType));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(constructorType));	  scope    =    traverse(arg,    new    FlowScope(type));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
618	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(compiler,  type));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(compiler,  type));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(compiler,  type));	  scope    =    traverse(arg,    new    FlowScope(type));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
619	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(type,  scope));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(type,  scope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(type,  scope));	  scope    =    traverse(arg,    new    FlowScope(type));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
620	[BUG]  [BUGGY]  scope  =  traverse(scope,  new  FlowScope(type));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  new  FlowScope(type));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  new  FlowScope(type));	  scope    =    traverse(arg,    new    FlowScope(type));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
621	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg.getJSType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg.getJSType());	  scope    =    traverse(constructor,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
622	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope.getJSType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope.getJSType());	  scope    =    traverse(scope,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
623	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructor.getJSType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  constructor.getJSType());	  scope    =    traverse(arg,    constructor.getJSType());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
624	[BUG]  [BUGGY]  scope  =  traverse(arg,  type,  constructor.getJSType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  type,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type,  constructor.getJSType());	  scope    =    traverse(arg,    constructor.getJSType());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
625	[BUG]  [BUGGY]  n.setJSType(type.getJSType());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(type.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(type.getJSType());	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
626	[BUG]  [BUGGY]  n.setJSType(arg.getFirstChild().getJSType());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getFirstChild().getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getFirstChild().getJSType());	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
627	[BUG]  [BUGGY]  n.setJSType(arg.getJSType()  +  1);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getJSType()  +  1);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getJSType()  +  1);	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
628	[BUG]  [BUGGY]  n.setJSType(arg.getNext());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getNext());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getNext());	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
629	[BUG]  [BUGGY]  n.setJSType(arg.getJSType()  ||  arg.getJSType()!=  null);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getJSType()  ||  arg.getJSType()!=  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getJSType()  ||  arg.getJSType()!=  null);	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
630	[BUG]  [BUGGY]  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	FunctionType  functionScope  =  n.getJSType();	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
631	[BUG]  [BUGGY]  scope  =  traverse(arg,  n);  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n);  FunctionType  functionScope  =  n.getJSType();	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
632	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope);  FunctionType  functionScope  =  arg.getJSType();  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope);  FunctionType  functionScope  =  arg.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope);  FunctionType  functionScope  =  arg.getJSType();	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
633	[BUG]  [BUGGY]  scope  =  traverse(n,  arg);  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg);  FunctionType  functionScope  =  n.getJSType();	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
634	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope);  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope);  FunctionType  functionScope  =  n.getJSType();	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
635	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope);  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope);  FunctionType  functionScope  =  n.getJSType();	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
636	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  scope,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  scope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  scope,  type);	  scope    =    traverse(arg,    n,    scope);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
637	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  scope,  syntacticScope);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  scope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  scope,  syntacticScope);	  scope    =    traverse(arg,    n,    scope);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
638	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  scope,  operationScope);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  scope,  operationScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  scope,  operationScope);	  scope    =    traverse(arg,    n,    scope);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
639	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  scope,  functionScope);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  scope,  functionScope);	  scope    =    traverse(arg,    n,    scope);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
640	[BUG]  [BUGGY]  State  state  =  arg.getState();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  State  state  =  arg.getState();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	State  state  =  arg.getState();	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
641	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  context,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  context,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  context,  type);	  scope    =    traverse(arg,    n,    type);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
642	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  type,  constructorType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  type,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  type,  constructorType);	  scope    =    traverse(arg,    n,    type);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
643	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  constructor,  n);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  constructor,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  constructor,  n);	  scope    =    traverse(arg,    null,    n);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
644	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  constructorType,  n);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  constructorType,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  constructorType,  n);	  scope    =    traverse(arg,    null,    n);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
645	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  n,  functionScope);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  n,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  n,  functionScope);	  scope    =    traverse(arg,    null,    n);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
646	[BUG]  [BUGGY]  scope  =(Node)arg.removeFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.removeFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.removeFirstChild();	          scope    =(Node)arg.next();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
647	[BUG]  [BUGGY]  scope  =(Node)arg.ext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.ext();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.ext();	          scope    =(Node)arg.next();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
648	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  travers  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  travers  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  travers	  	non-compiled	[CE]  ';'  expected	7	None	add
649	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntaxScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntaxScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntaxScope);	  scope    =    traverse(arg,    functionScope);    scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
650	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  arg);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  arg);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
651	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  n);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  Scope  functionScope  =  traverse(functionScope,  n);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
652	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
653	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
654	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
655	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
656	[BUG]  [BUGGY]  n.removeChild(arg);  NodeTraversal.traverse(compiler,  n,  scope);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  NodeTraversal.traverse(compiler,  n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    NodeTraversal.traverse(compiler,  n,  scope);	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
657	[BUG]  [BUGGY]  n.removeChild(arg);  Node  arg  =  constructor.getFirstChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  Node  arg  =  constructor.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    Node  arg  =  constructor.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
658	[BUG]  [BUGGY]  n.removeChild(arg);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
659	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  constructor,  arg);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  constructor,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  constructor,  arg);	  scope    =    traverse(scope,    n,    arg);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
660	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
661	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
662	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
663	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
664	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
665	[BUG]  [BUGGY]  scope  =  traverseNode(arg.getString(),  scope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg.getString(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg.getString(),  scope);	  scope    =    traverseNode(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
666	[BUG]  [BUGGY]  scope  =  traverseNodeForType(arg,  scope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNodeForType(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNodeForType(arg,  scope);	  scope    =    traverseNode(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
667	[BUG]  [BUGGY]  scope  =  traverseNode(arg.next(),  scope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg.next(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg.next(),  scope);	  scope    =    traverseNode(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
668	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
669	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
670	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
671	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false),  functionScope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false),  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(false),  functionScope);	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
672	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  null);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  null);	  scope    =    traverse(arg,    null);    scope    =    traverse(arg,    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
673	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  Node  functionScope  =  n.getFirstChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
674	[BUG]  [BUGGY]  scope  =  traverse(arg,  type);  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  type);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type);  Node  functionScope  =  n.getFirstChild();	  scope    =    traverse(arg,    functionScope);    Node    functionScope    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
675	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);  type  =  traverse(arg,  null);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);  type  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  n.setJSType(type);  type  =  traverse(arg,  null);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
676	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  Node  n  =  arg.getNext();  scope  =  traverse(n,  scope);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  Node  n  =  arg.getNext();  scope  =  traverse(n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    Node  n  =  arg.getNext();  scope  =  traverse(n,  scope);	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
677	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(constructorType);  scope  =  traverse(n,  scope);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(constructorType);  scope  =  traverse(n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    n.setJSType(constructorType);  scope  =  traverse(n,  scope);	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
678	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(constructorType);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  n.setJSType(constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    n.setJSType(constructorType);	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
679	[BUG]  [BUGGY]  scope  =  traverse(n,  syntacticScope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  syntacticScope);	  scope    =    traverse(scope,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
680	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  scope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(syntacticScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  scope);	  scope    =    traverse(scope,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
681	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  new  FlowScope());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  new  FlowScope());	  scope    =    traverseNode(arg,    context);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
682	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    FunctionType  functionScope  =  n.getJSType();	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
683	[BUG]  [BUGGY]  n.setJSType(arg  ==  null?  null  :  arg.getJSType());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg  ==  null?  null  :  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg  ==  null?  null  :  arg.getJSType());	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
684	[BUG]  [BUGGY]  n.setJSType(arg!=  null?  null  :  arg.getJSType());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg!=  null?  null  :  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg!=  null?  null  :  arg.getJSType());	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
685	[BUG]  [BUGGY]  n.setJSType(arg.getJSType();  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getJSType();	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  ')'  expected	115	None	replace
686	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  scope);	  scope    =    traverse(n,    scope,    arg);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
687	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope,  null);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope,  null);	  scope    =    traverse(n,    scope,    arg);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
688	[BUG]  [BUGGY]  scope  =  constructor.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  constructor.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  constructor.getLastChild();	          scope    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
689	[BUG]  [BUGGY]  scope  =  functionScope.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  functionScope.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  functionScope.getLastChild();	          scope    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
690	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(arg,  scope);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(arg,  scope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
691	[BUG]  [BUGGY]  n.setJSType(arg.toString());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.toString());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.toString());	          n.setJSType(constructorType);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
692	[BUG]  [BUGGY]  n.setJSType(arg.getInitialValue());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getInitialValue());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getInitialValue());	          n.setJSType(constructorType);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
693	[BUG]  [BUGGY]  if(arg.getType()!=  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()!=  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()!=  Token.NAME  ||  arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
694	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverseFunction(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverseFunction(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverseFunction(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
695	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
696	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  n.setJSType(constructorType);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  n.setJSType(constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  n.setJSType(constructorType);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
697	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructor);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructor);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructor);  n.setJSType(type);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
698	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  n.setJSType(constructorType);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  n.setJSType(constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  n.setJSType(constructorType);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
699	[BUG]  [BUGGY]  scope  =  functionScope.getType();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  functionScope.getType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  functionScope.getType();	          scope    =    n.getType();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
700	[BUG]  [BUGGY]  scope  =  type.getType();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  type.getType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  type.getType();	          scope    =    n.getType();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
701	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  n.getJSType();	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
702	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  n.getJSType());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  n.getJSType());	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
703	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(functionScope,  n);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionScope  functionScope  =  traverse(functionScope,  n);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
704	[BUG]  [BUGGY]  FunctionScope  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  FunctionScope  functionScope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	FunctionScope  functionScope  =  traverse(arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
705	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(ARRAY_TYPE));	          n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
706	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  syntacticScope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  syntacticScope);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
707	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  syntacticScope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  functionScope,  syntacticScope);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
708	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  output);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  output);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  functionScope,  output);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
709	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  syntax);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  functionScope,  syntax);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  functionScope,  syntax);	  scope    =    traverse(arg,    new    FlowScope(),    functionScope);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
710	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  arg,  type.getJSType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  n,  arg,  type.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  n,  arg,  type.getJSType());	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
711	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  type,  arg.getJSType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  n,  type,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  n,  type,  arg.getJSType());	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
712	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
713	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
714	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
715	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
716	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  nu  [CE]  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  nu  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  nu	  	non-compiled	[CE]  	103	None	add
717	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  n,  type);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  n,  type);	  scope    =    traverse(arg,    functionScope,    n);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
718	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  constructor.getJSType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  constructor.getJSType());	  scope    =    traverse(scope,    arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
719	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n,  constructor.getJSType());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  n,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n,  constructor.getJSType());	  scope    =    traverse(scope,    arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
720	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope,  n.getJSType());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scope,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scope,  n.getJSType());	  scope    =    traverse(scope,    arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
721	[BUG]  [BUGGY]          n.setJSType(type);  ((  FunctionType)arg).setJSType(type);  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  ((  FunctionType)arg).setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    ((  FunctionType)arg).setJSType(type);	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
722	[BUG]  [BUGGY]          n.setJSType(type);  n.setJSType(constructorType);  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  n.setJSType(constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    n.setJSType(constructorType);	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
723	[BUG]  [BUGGY]          n.setJSType(type);  n.setJSType(type,  scope);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  n.setJSType(type,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    n.setJSType(type,  scope);	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
724	[BUG]  [BUGGY]          n.setJSType(type);  n.setJSType(arg);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  n.setJSType(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    n.setJSType(arg);	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
725	[BUG]  [BUGGY]          n.setJSType(type);  n.setJSType(value);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  n.setJSType(value);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    n.setJSType(value);	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
726	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope),  functionScope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope),  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope),  functionScope);	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
727	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope),  syntacticScope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope),  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope),  syntacticScope);	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
728	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  type,  n);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope,  type,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  type,  n);	  scope    =    traverse(arg,    syntacticScope,    type);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
729	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  functionScope,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope,  functionScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  functionScope,  type);	  scope    =    traverse(arg,    syntacticScope,    type);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
730	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  constructor.next());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  constructor.next());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  constructor.next());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
731	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructor.next());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  constructor.next());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  constructor.next());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
732	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  compiler.next());  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  compiler.next());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  compiler.next());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
733	[BUG]  [BUGGY]  scope  =  traverse(arg,  context.getJSType());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  context.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  context.getJSType());	  scope    =    traverse(g,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
734	[BUG]  [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
735	[BUG]  [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
736	[BUG]  [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
737	[BUG]  [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew  =  true;  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew  =  true;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew  =  true;  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
738	[BUG]  [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
739	[BUG]  [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew  =  false;  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew  =  false;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew  =  false;  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
740	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg.toString());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg.toString());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg.toString());	  scope    =    traverse(scope,    n);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
741	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  type,  functionScope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  type,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  type,  functionScope);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
742	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  type,  constructorType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  type,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  type,  constructorType);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
743	[BUG]  [BUGGY]  n.setJSType(arg,  type.getInstanceType());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg,  type.getInstanceType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg,  type.getInstanceType());	          n.setJSType(arg.getInstanceType());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
744	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  constructor.getJSType());  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  constructor.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  constructor.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
745	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  constructorType,  n.getJSType());  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  constructorType,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  constructorType,  n.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
746	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  n,  type.getJSType());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  n,  type.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  n,  type.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
747	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  constructorType.getJSType());  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  constructorType.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  constructorType.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
748	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  type,  n.getJSType());  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  type,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  type,  n.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
749	[BUG]  [BUGGY]  scope  =  traverse(arg,  compiler,  n);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  compiler,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  compiler,  n);	  scope    =    traverse(arg,    compiler);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
750	[BUG]  [BUGGY]  scope  =  traverse(arg,  type,  compiler);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  type,  compiler);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type,  compiler);	  scope    =    traverse(arg,    compiler);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
751	[BUG]  [BUGGY]  scope  =  traverse(arg.getFirstChild(),  new  FlowScope());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.getFirstChild(),  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.getFirstChild(),  new  FlowScope());	  scope    =    traverse(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
752	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(arg));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  new  FlowScope(arg));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  new  FlowScope(arg));	  scope    =    traverse(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
753	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
754	[BUG]  [BUGGY]  scope  =  traverse(newScope,  functionScope,  syntacticScope);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(newScope,  functionScope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(newScope,  functionScope,  syntacticScope);	  scope    =    traverse(arg,    functionScope,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
755	[BUG]  [BUGGY]  scope  =  traverse(arg,  arg.getJSType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  arg.getJSType());	  scope    =    traverse(scope,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
756	[BUG]  [BUGGY]  scope  =  traverse(arg,  registry.getJSType());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  registry.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  registry.getJSType());	  scope    =    traverse(scope,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
757	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  null,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  null,  type);	  scope    =    traverse(scope,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
758	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  constructorType,  type);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  constructorType,  type);	  scope    =    traverse(scope,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
759	[BUG]  [BUGGY]  scope  =  traverse(g2,  constructor,  n);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g2,  constructor,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g2,  constructor,  n);	  scope    =    traverse(constructor,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
760	[BUG]  [BUGGY]  scope  =  traverse(g,  constructor,  n);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g,  constructor,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  constructor,  n);	  scope    =    traverse(constructor,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
761	[BUG]  [BUGGY]  scope  =  traverse(arg,  compiler.getJSType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  compiler.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  compiler.getJSType());	  scope    =    traverse(constructor,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
762	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  newScope());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  newScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  newScope());	  scope    =    traverse(arg,    newScope());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
763	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    FunctionType  functionScope  =  n.getJSType();	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
764	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionType  functionScope  =  n.getFunctionScope();  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionType  functionScope  =  n.getFunctionScope();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    FunctionType  functionScope  =  n.getFunctionScope();	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
765	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionScope  functionScope  =  n.getFunctionScope();  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionScope  functionScope  =  n.getFunctionScope();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    FunctionScope  functionScope  =  n.getFunctionScope();	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
766	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionType  functionScope  =(FunctionType)arg.getConstructor();  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  FunctionType  functionScope  =(FunctionType)arg.getConstructor();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    FunctionType  functionScope  =(FunctionType)arg.getConstructor();	  	non-compiled	[CE]  cannot  find  symbol	145	None	add
767	[BUG]  [BUGGY]  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
768	[BUG]  [BUGGY]  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg!=  null)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
769	[BUG]  [BUGGY]  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(n,  null);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(n,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(n,  null);  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
770	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  arg);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  arg);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
771	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
772	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  n);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  JSType  functionScope  =  traverse(functionScope,  n);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
773	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  NON_GLOBAL_UNDEFINED_THIS);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  NON_GLOBAL_UNDEFINED_THIS);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  NON_GLOBAL_UNDEFINED_THIS);	  scope    =    traverse(scope,    arg);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
774	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  syntacticScope,  functionScope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  syntacticScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  syntacticScope,  functionScope);	  scope    =    traverseNode(arg,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
775	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  falseScope);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  falseScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  falseScope);	  scope    =    traverse(arg,    functionScope,    output);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
776	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope,  scope);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope,  scope);	  scope    =    traverse(arg,    functionScope,    output);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
777	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n,  null);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  n,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n,  null);	  scope    =    traverse(scope,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
778	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  n,  constructor);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  n,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  n,  constructor);	  scope    =    traverse(scope,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
779	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  output);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  output);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  output);	  scope    =    traverse(arg,    n,    context);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
780	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(functionScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(functionScope);	  	non-compiled	[CE]  cannot  find  symbol	149	None	add
781	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  FunctionType  functionScope  =  constructor.getFunctionScope();  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  FunctionType  functionScope  =  constructor.getFunctionScope();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    FunctionType  functionScope  =  constructor.getFunctionScope();	  	non-compiled	[CE]  cannot  find  symbol	149	None	add
782	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
783	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NEW)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NEW)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NEW)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
784	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
785	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
786	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  nu  [CE]  ')'  expected  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  nu  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  nu	  	non-compiled	[CE]  ')'  expected	5	None	add
787	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  constructor);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n.getJSType(),  constructor);	  scope    =    traverse(arg,    n.getJSType(),    constructor);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
788	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
789	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
790	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
791	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
792	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
793	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
794	[BUG]  [BUGGY]  scope  =  traverse(config,  constructorType,  arg);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(config,  constructorType,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(config,  constructorType,  arg);	  scope    =    traverse(constructorType,    arg);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
795	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  constructorType.getJSType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  constructorType.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  constructorType.getJSType());	  scope    =    traverse(constructor,    arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
796	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  functionScope);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  functionScope);	  scope    =    traverse(arg,    null,    ct);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
797	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  syntacticScope);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  syntacticScope);	  scope    =    traverse(arg,    null,    ct);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
798	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  syntacticScope);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
799	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  functionScope  =  traverse(arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
800	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(n,  type));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(n,  type));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(n,  type));	  scope    =    traverse(arg,    new    FlowScope(type));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
801	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  ((  FunctionType)arg).setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  ((  FunctionType)arg).setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    ((  FunctionType)arg).setJSType(getNativeType(UNKNOWN_TYPE));	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
802	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  N.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  N.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    N.setJSType(getNativeType(UNKNOWN_TYPE));	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
803	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE);  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    n.setJSType(getNativeType(UNKNOWN_TYPE);	  	non-compiled	[CE]  ')'  expected	112	None	add
804	[BUG]  [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(getNativeType(UNKNOWN_TYPE));  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(getNativeType(UNKNOWN_TYPE));    n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);	  	non-compiled	[CE]  cannot  find  symbol	112	None	add
805	[BUG]  [BUGGY]  scope  =  traverse(arg,  type,  constructorType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  type,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  type,  constructorType);	  scope    =    traverse(arg,    constructorType,    type);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
806	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  new  FlowScope());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  new  FlowScope());	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
807	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope(scope));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope(scope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  new  FlowScope(scope));	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
808	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope(),  functionScope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  new  FlowScope(),  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  new  FlowScope(),  functionScope);	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
809	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  null);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  syntacticScope,  null);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
810	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  functionScope,  syntacticScope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  functionScope,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  functionScope,  syntacticScope);	  scope    =    traverseNode(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
811	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  functionScope,  n);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  functionScope,  n);	  scope    =    traverseNode(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
812	[BUG]  [BUGGY]  scope  =  n.getJSType(arg);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getJSType(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getJSType(arg);	          scope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
813	[BUG]  [BUGGY]  scope  =  functionScope.getJSType();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  functionScope.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  functionScope.getJSType();	          scope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
814	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
815	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
816	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  }	  	non-compiled	[CE]  cannot  find  symbol	101	None	add
817	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	101	None	add
818	[BUG]  [BUGGY]  scope  =  traverse(constructor.getJSType(),  arg);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor.getJSType(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor.getJSType(),  arg);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
819	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  arg,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(syntacticScope,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  arg,  type);	  scope    =    traverse(syntacticScope,    arg);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
820	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  arg,  null);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(syntacticScope,  arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  arg,  null);	  scope    =    traverse(syntacticScope,    arg);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
821	[BUG]  [BUGGY]  n.setJSType(arg.getConstructor());  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getConstructor());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getConstructor());	          n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
822	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  JSType  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  JSType  functionScope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    JSType  functionScope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
823	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  JSType  functionScope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  JSType  functionScope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    JSType  functionScope  =  traverse(arg,  functionScope);  Node  functionScope  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
824	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  scope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
825	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Scope  functionScope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    Node  functionScope  =  n.getFirstChild();  Scope  functionScope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        Node    functionScope    =    n.getFirstChild();    Scope  functionScope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  cannot  find  symbol	151	None	add
826	[BUG]  [BUGGY]  scope  =  traverse(config,  constructor,  arg);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(config,  constructor,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(config,  constructor,  arg);	  scope    =    traverse(constructor,    arg);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
827	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg,  null);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg,  null);	  scope    =    traverse(constructor,    arg);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
828	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  null,  constructorType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  null,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  null,  constructorType);	  scope    =    traverse(arg,    n,    null);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
829	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  null,  functionScope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  null,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  null,  functionScope);	  scope    =    traverse(arg,    n,    null);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
830	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(functionScope));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(functionScope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  new  FlowScope(functionScope));	  scope    =    traverse(arg,    n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
831	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(),  functionScope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(),  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  new  FlowScope(),  functionScope);	  scope    =    traverse(arg,    n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
832	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  cannot  find  symbol	147	None	add
833	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  JSType  type  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  JSType  type  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    JSType  type  =  traverse(arg,  functionScope);  n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  cannot  find  symbol	147	None	add
834	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    JSType  functionScope  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	147	None	add
835	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  constructorType,  type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  constructorType,  type);	  scope    =    traverse(arg,    n.getJSType(),    type);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
836	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  type,  constructorType);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  type,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  type,  constructorType);	  scope    =    traverse(arg,    n.getJSType(),    type);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
837	[BUG]  [BUGGY]  scope  =(Node)arg.getParent();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.getParent();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.getParent();	          scope    =(Node)arg.getNext();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
838	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  compiler.getJSType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  compiler.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  compiler.getJSType());	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
839	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  syntacticScope,  arg);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  syntacticScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  syntacticScope,  arg);	  scope    =    traverse(functionScope,    arg,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
840	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructorType,  n.getJSType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructorType,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructorType,  n.getJSType());	  scope    =    traverse(arg,    type,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
841	[BUG]  [BUGGY]  scope  =  traverse(constructorType,  arg,  n.getJSType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructorType,  arg,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructorType,  arg,  n.getJSType());	  scope    =    traverse(arg,    type,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
842	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
843	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
844	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
845	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  output);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  output);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  output);	  scope    =    traverse(arg,    new    FlowScope(),    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
846	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  operationScope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  operationScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  operationScope);	  scope    =    traverse(arg,    new    FlowScope(),    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
847	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  type);	  scope    =    traverse(arg,    new    FlowScope(),    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
848	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NAME  ||  arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NAME  ||  arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NAME  ||  arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
849	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NAME  ||  arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NAME  ||  arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NAME  ||  arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
850	[BUG]  [BUGGY]  scope  =  traverseChildren(arg,  scope);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseChildren(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseChildren(arg,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
851	[BUG]  [BUGGY]  scope  =  traverseFunction(arg,  scope);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseFunction(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseFunction(arg,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
852	[BUG]  [BUGGY]  scope  =  traverseWithType(arg,  scope);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseWithType(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseWithType(arg,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
853	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope),  syntacticScope);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope),  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(functionScope),  syntacticScope);	  scope    =    traverse(arg,    new    FlowScope(functionScope));    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
854	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope,  output));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope,  output));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(functionScope,  output));	  scope    =    traverse(arg,    new    FlowScope(functionScope));    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
855	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope,  falseScope));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope,  falseScope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(functionScope,  falseScope));	  scope    =    traverse(arg,    new    FlowScope(functionScope));    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
856	[BUG]  [BUGGY]  scope  =  traverse(arg,  null,  constructorType,  type);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null,  constructorType,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null,  constructorType,  type);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
857	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructor.getJSType(),  type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructor.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructor.getJSType(),  type);	  scope    =    traverse(arg,    constructor.getJSType());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
858	[BUG]  [BUGGY]  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
859	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  type);	          n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
860	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);	          n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
861	[BUG]  [BUGGY]  scope  =(Node)arg.clone()?  null  :  arg.clone();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.clone()?  null  :  arg.clone();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.clone()?  null  :  arg.clone();	          scope    =(Node)arg.clone();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
862	[BUG]  [BUGGY]  scope  =(Node)arg.clone()  &&  NodeUtil.mayHaveSideEffects(scope);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.clone()  &&  NodeUtil.mayHaveSideEffects(scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.clone()  &&  NodeUtil.mayHaveSideEffects(scope);	          scope    =(Node)arg.clone();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
863	[BUG]  [BUGGY]  n.setJSType(getNativeType(arg));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(getNativeType(arg));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(getNativeType(arg));	          n.setJSType(getNativeType(FUNCTION_TYPE));    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
864	[BUG]  [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  arg);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  syntacticScope);  FunctionType  functionScope  =  traverse(functionScope,  arg);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
865	[BUG]  [BUGGY]  functionScope  =  traverse(arg,  syntacticScope);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  functionScope  =  traverse(arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	functionScope  =  traverse(arg,  syntacticScope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
866	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
867	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  nu  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  nu  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  nu	  	non-compiled	[CE]  ')'  expected	3	None	add
868	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  nu  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  nu  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  nu	  	non-compiled	[CE]  ')'  expected	3	None	add
869	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
870	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
871	[BUG]  [BUGGY]  scope  =  traverse(newScope,  syntacticScope,  functionScope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(newScope,  syntacticScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(newScope,  syntacticScope,  functionScope);	  scope    =    traverse(arg,    syntacticScope,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
872	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructor.getJSType(),  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructor.getJSType(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructor.getJSType(),  scope);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
873	[BUG]  [BUGGY]  scope  =  traverse(arg,  constructorType.getJSType(),  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  constructorType.getJSType(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  constructorType.getJSType(),  scope);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
874	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  functionScope);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getJSType(),  functionScope);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
875	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  type  =  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  type  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    type  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
876	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    n  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
877	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Node  arg  =  constructor.getNext();  scope  =  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  Node  arg  =  constructor.getNext();  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    Node  arg  =  constructor.getNext();  scope  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
878	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n.setJSType(constructorType);  scope  =  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n.setJSType(constructorType);  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    n.setJSType(constructorType);  scope  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
879	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n  =  traverse(arg,  null);  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n  =  traverse(arg,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    n  =  traverse(arg,  null);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
880	[BUG]  [BUGGY]  scope  =  traverse(arg,  null);  n.setJSType(constructorType);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  null);  n.setJSType(constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  null);  n.setJSType(constructorType);	  scope    =    traverse(arg,    null);    n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
881	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
882	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
883	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
884	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
885	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NEW)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NEW)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NEW)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
886	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  n.setJSType(arg.getJSType());  }  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  n.setJSType(arg.getJSType());  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  n.setJSType(arg.getJSType());  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
887	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  type  =  arg.getJSType();  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  type  =  arg.getJSType();  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  type  =  arg.getJSType();  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
888	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  scope  =  n.getJSType();  }  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  scope  =  n.getJSType();  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  scope  =  n.getJSType();  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
889	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
890	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.report(JSError.make(TEMPLATE_TYPE_OF_THIS_EXPECTED,  type));  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.report(JSError.make(TEMPLATE_TYPE_OF_THIS_EXPECTED,  type));  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.report(JSError.make(TEMPLATE_TYPE_OF_THIS_EXPECTED,  type));  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
891	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.report(JSError.make(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.report(JSError.make(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  compiler.report(JSError.make(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
892	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  n.setJSType(arg.getJSType());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  n.setJSType(arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  n.setJSType(arg.getJSType());	  	non-compiled	[CE]  illegal  start  of  expression	114	None	add
893	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope.getJSType()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(functionScope.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(functionScope.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
894	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(type,  n.getJSType()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(type,  n.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(type,  n.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
895	[BUG]  [BUGGY]  n.addChildToFront(arg);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.addChildToFront(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.addChildToFront(arg);	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
896	[BUG]  [BUGGY]  n.addChildToBack(arg);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.addChildToBack(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.addChildToBack(arg);	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
897	[BUG]  [BUGGY]  n.replaceChild(arg,  scope);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.replaceChild(arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.replaceChild(arg,  scope);	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
898	[BUG]  [BUGGY]  n.removeChild(arg,  type);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg,  type);	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
899	[BUG]  [BUGGY]  n.addChildToFront(scope);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.addChildToFront(scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.addChildToFront(scope);	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
900	[BUG]  [BUGGY]  scope  =  traverse(arg,  this,  type);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  this,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  this,  type);	  scope    =    traverse(arg,    this);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
901	[BUG]  [BUGGY]  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
902	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
903	[BUG]  [BUGGY]  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
904	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  input);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  input);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  input);	  scope    =    traverse(arg,    functionScope,    output);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
905	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  statusFunctionsMap);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  statusFunctionsMap);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  statusFunctionsMap);	  scope    =    traverse(arg,    functionScope,    output);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
906	[BUG]  [BUGGY]  scope  =  traverse(config,  n.getJSType(),  arg);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(config,  n.getJSType(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(config,  n.getJSType(),  arg);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
907	[BUG]  [BUGGY]  scope  =  traverse(structor,  n.getJSType(),  arg);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  n.getJSType(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  n.getJSType(),  arg);	  scope    =    traverse(n.getJSType(),    arg);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
908	[BUG]  [BUGGY]  scope  =  traverse(arg.getString(),  new  FlowScope());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.getString(),  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.getString(),  new  FlowScope());	  scope    =    traverse(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
909	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  JSType  type  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  JSType  type  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    JSType  type  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	149	None	add
910	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Scope  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Scope  scope  =  traverse(arg,  functionScope);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    Scope  scope  =  traverse(arg,  functionScope);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	149	None	add
911	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Node  functionScope  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Node  functionScope  =  n.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    Node  functionScope  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	149	None	add
912	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Node  functionScope  =  n.getParent();  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  Node  functionScope  =  n.getParent();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    Node  functionScope  =  n.getParent();	  	non-compiled	[CE]  cannot  find  symbol	149	None	add
913	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    FunctionType  functionScope  =  n.getJSType();	  	non-compiled	[CE]  cannot  find  symbol	149	None	add
914	[BUG]  [BUGGY]  scope  =  traverse(g2,  n,  type);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g2,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g2,  n,  type);	  scope    =    traverse(arg,    n,    type);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
915	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  type,  registry);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  type,  registry);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  type,  registry);	  scope    =    traverse(arg,    n,    type);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
916	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg);	  scope    =    traverse(scope,    arg);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
917	[BUG]  [BUGGY]  scope  =  n.getParent();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  n.getParent();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  n.getParent();	          scope    =    n.getType();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
918	[BUG]  [BUGGY]  scope  =  traverse(arg,  false);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  false);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  false);  n.setJSType(type);	  scope    =    traverse(arg,    null);    n.setJSType(type);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
919	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
920	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
921	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  return  scope;  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  return  scope;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  return  scope;  }	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
922	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  escape(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    scope  =  traverse(arg,  functionScope);  if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  escape(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        scope    =    traverse(arg,    functionScope);    if(scope!=  null)  {  scope  =  traverse(arg,  functionScope);  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  escape(arg,  functionScope);  }	  	non-compiled	[CE]  cannot  find  symbol	30	None	add
923	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg,  syntacticScope);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg,  syntacticScope);	  scope    =    traverse(arg,    functionScope,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
924	[BUG]  [BUGGY]  if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
925	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
926	[BUG]  [BUGGY]  scope  =  traverse(structor,  type,  arg);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  type,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  type,  arg);	  scope    =    traverse(arg,    type,    constructor);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
927	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.EXPR_RESULT)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
928	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
929	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.STRING)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.STRING)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.STRING)  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
930	[BUG]  [BUGGY]  scope  =  traverse(scope,  n,  arg.getModule());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  n,  arg.getModule());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  n,  arg.getModule());	  scope    =    traverse(scope,    n);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
931	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  scope,  compiler);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  scope,  compiler);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  scope,  compiler);	  scope    =    traverse(arg,    n,    scope);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
932	[BUG]  [BUGGY]  scope  =  traverse(g2,  arg,  n);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g2,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g2,  arg,  n);	  scope    =    traverse(arg,    type,    n);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
933	[BUG]  [BUGGY]  scope  =  traverse(config,  arg,  n);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(config,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(config,  arg,  n);	  scope    =    traverse(arg,    type,    n);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
934	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    scope    =    traverse(arg,    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
935	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    scope    =    traverse(arg,    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
936	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.STRING)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.STRING)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.STRING)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    scope    =    traverse(arg,    null);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
937	[BUG]  [BUGGY]  scope  =  traverse(n,  arg.getJSType(),  constructorType);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg.getJSType(),  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg.getJSType(),  constructorType);	  scope    =    traverse(arg,    n.getJSType(),    constructor);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
938	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
939	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
940	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
941	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
942	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
943	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }  [CE]  cannot  find  symbol  [FE]              NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  }	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
944	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
945	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverseFunction(arg,  null);  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverseFunction(arg,  null);  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverseFunction(arg,  null);  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
946	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  return  scope;  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  return  scope;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  scope  =  traverse(arg,  null);  }  else  {  return  scope;  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
947	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
948	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    scope    =    traverse(arg,    null);    }    if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
949	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg,  syntacticScope,  functionScope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  arg,  syntacticScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg,  syntacticScope,  functionScope);	  scope    =    traverse(arg,    syntacticScope,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
950	[BUG]  [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  n.setJSType(type);  }  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  n.setJSType(type);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  n.setJSType(type);  }	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
951	[BUG]  [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  type  =  type.getInstanceType();  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  type  =  type.getInstanceType();  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  type  =  type.getInstanceType();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
952	[BUG]  [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(type);  }  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(type);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  n.setJSType(type);  }	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
953	[BUG]  [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.isNext())  {  n.setJSType(type);  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.isNext())  {  n.setJSType(type);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.isNext())  {  n.setJSType(type);  }	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
954	[BUG]  [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  type  =  type.getJSType();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  type  =  type.getJSType();  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  type  =  type.getJSType();  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
955	[BUG]  [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  n.setJSType(type);  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  n.setJSType(type);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  n.setJSType(type);  }	  	non-compiled	[CE]  cannot  find  symbol	22	None	add
956	[BUG]  [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(type);  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(type);    for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  Node  type  =  arg.getNext();  if(type!=  null)  {  throw  new  IllegalStateException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
957	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg,  this);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  arg,  this);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg,  this);	  scope    =    traverse(arg,    this);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
958	[BUG]  [BUGGY]  scope  =  traverse(arg,  this,  n);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  this,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  this,  n);	  scope    =    traverse(arg,    this);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
959	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  arg.getJSType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  scope,  arg.getJSType());	  scope    =    traverse(scope,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
960	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    if(arg!=  null)  {  n.setJSType(arg.getJSType());  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
961	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
962	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew  =  true;  }  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew  =  true;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew  =  true;  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
963	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  return  scope;  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  return  scope;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  return  scope;  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
964	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew(scope);  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew(scope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew(scope);  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
965	[BUG]  [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew  =  false;  }  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(arg.getJSType());  if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew  =  false;  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(arg.getJSType());    if(arg!=  null)  {  n.setJSType(arg.getJSType());  }  else  {  traverseNew  =  false;  }	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
966	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(compiler.getJSType()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(compiler.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(compiler.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
967	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(structor.getJSType()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(structor.getJSType()));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(structor.getJSType()));	  scope    =    traverse(arg,    new    FlowScope(n.getJSType()));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
968	[BUG]  [BUGGY]  scope  =(Node)arg,  compiler.getConstructorSupplier().next();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg,  compiler.getConstructorSupplier().next();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg,  compiler.getConstructorSupplier().next();	          scope    =(Node)arg.next();    	non-compiled	[CE]  ';'  expected	25	None	replace
969	[BUG]  [BUGGY]  scope  =(Node)arg,  compiler.getConstructor().next();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg,  compiler.getConstructor().next();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg,  compiler.getConstructor().next();	          scope    =(Node)arg.next();    	non-compiled	[CE]  ';'  expected	25	None	replace
970	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope),  n);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope),  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope),  n);	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
971	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  compiler));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(scope,  compiler));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(scope,  compiler));	  scope    =    traverse(arg,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
972	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
973	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
974	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	103	None	add
975	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  n.setJSType(type);  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    n.setJSType(type);	  	non-compiled	[CE]  ';'  expected	103	None	add
976	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
977	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
978	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.STRING)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
979	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.GETPROP)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( " ");  }	  scope    =    traverse(arg,    null);    if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
980	[BUG]  [BUGGY]  scope  =  traverse(n,  arg,  constructorType,  scope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg,  constructorType,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg,  constructorType,  scope);	  scope    =    traverse(n,    arg,    constructor);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
981	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  Node  functionScope  =  arg.getFirstChild();  [CE]  ';'  expected  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  Node  functionScope  =  arg.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    Node  functionScope  =  arg.getFirstChild();	  	non-compiled	[CE]  ';'  expected	145	None	add
982	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  JSType  functionScope  =  arg.getJSType();  [CE]  ';'  expected  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  JSType  functionScope  =  arg.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    JSType  functionScope  =  arg.getJSType();	  	non-compiled	[CE]  ';'  expected	145	None	add
983	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  JSType  functionScope  =  n.getJSType(arg);  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    if(functionScope!=  null)  {  scope  =  traverse(arg,  functionScope);  }  JSType  functionScope  =  n.getJSType(arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    JSType  functionScope  =  n.getJSType(arg);	  	non-compiled	[CE]  ';'  expected	145	None	add
984	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	97	None	add
985	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  ';'  expected	101	None	add
986	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  state);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  state);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  state);	  scope    =    traverse(arg,    n,    context);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
987	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  parent);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  parent);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  parent);	  scope    =    traverse(arg,    n,    context);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
988	[BUG]  [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(type));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n,  new  FlowScope(type));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n,  new  FlowScope(type));	  scope    =    traverse(arg,    n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
989	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false,  type));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(false,  type));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(false,  type));	  scope    =    traverse(arg,    new    FlowScope(false));    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
990	[BUG]  [BUGGY]  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
991	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
992	[BUG]  [BUGGY]  scope  =(Node)arg.getProp(Node.SOURCENAME_PROP);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =(Node)arg.getProp(Node.SOURCENAME_PROP);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =(Node)arg.getProp(Node.SOURCENAME_PROP);	          scope    =(Node)arg.getJSType();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
993	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  syntacticScope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  syntacticScope);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
994	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  compiler);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg,  syntacticScope,  compiler);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg,  syntacticScope,  compiler);	  scope    =    traverse(scope,    arg,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
995	[BUG]  [BUGGY]  scope  =  traverse(g2,  arg,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g2,  arg,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g2,  arg,  type);	  scope    =    traverse(config,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
996	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
997	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(arg.getType()!=  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
998	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(scope!=    null)    {    scope    =    traverse(arg,    null);    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(scope!=  null)  {  scope  =  traverse(arg,  null);  }  else  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	153	None	add
999	[BUG]  [BUGGY]  scope  =  traverse(structor,  n.getJSType(),  type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  n.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  n.getJSType(),  type);	  scope    =    traverse(arg,    n.getJSType(),    type);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1000	[BUG]  [BUGGY]  scope  =  traverse(type,  n.getJSType(),  arg);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(type,  n.getJSType(),  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(type,  n.getJSType(),  arg);	  scope    =    traverse(arg,    n.getJSType(),    type);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1001	[BUG]  [BUGGY]  scope  =  traverse(registry,  arg,  n,  type);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(registry,  arg,  n,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(registry,  arg,  n,  type);	  scope    =    traverse(registry,    arg,    type);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1002	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg.getJSType(),  type);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  arg.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg.getJSType(),  type);	  scope    =    traverse(constructor,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
1003	[BUG]  [BUGGY]  scope  =  traverse(n,  arg.next());  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  arg.next());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  arg.next());	  scope    =    traverse(scope,    arg.next());    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
1004	[BUG]  [BUGGY]  scope  =  traverse(structor,  n.getJSType(),  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  n.getJSType(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  n.getJSType(),  scope);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1005	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg.getJSType(),  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  arg.getJSType(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg.getJSType(),  scope);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1006	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.getJSType(),  scope);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  n.getJSType(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  n.getJSType(),  scope);	  scope    =    traverse(arg,    n.getJSType(),    scope);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1007	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg,  null,  n.getJSType());  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  arg,  null,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg,  null,  n.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1008	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  null,  arg.getJSType());  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  n,  null,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  n,  null,  arg.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1009	[BUG]  [BUGGY]  scope  =  traverse(constructor,  null,  arg.getJSType());  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  null,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  null,  arg.getJSType());	  scope    =    traverse(arg,    null,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1010	[BUG]  [BUGGY]  scope  =  traverse(arg,  baseUri);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  baseUri);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  baseUri);	  scope    =    traverse(arg,    output);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
1011	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  null,  constructorType);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  null,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  null,  constructorType);	  scope    =    traverseNode(arg,    null);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
1012	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  functionScope);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  functionScope);	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
1013	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
1014	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(scope,  arg);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
1015	[BUG]  [BUGGY]  scope  =  traverseFunctionScope(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseFunctionScope(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseFunctionScope(arg,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
1016	[BUG]  [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  n);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  new  FlowScope(),  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  new  FlowScope(),  n);	  scope    =    traverse(arg,    new    FlowScope(),    scope);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
1017	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n,  type.getJSType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n,  type.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n,  type.getJSType());	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
1018	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n,  context.getJSType());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n,  context.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n,  context.getJSType());	  scope    =    traverseNode(arg,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
1019	[BUG]  [BUGGY]  scope  -=(Node)arg.clone();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  -=(Node)arg.clone();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  -=(Node)arg.clone();	          scope    =(Node)arg.clone();    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1020	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg,  n.getJSType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  arg,  n.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg,  n.getJSType());	  scope    =    traverse(arg,    type,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1021	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  Node  n  =  arg.getFirstChild();  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  scope);  Node  n  =  arg.getFirstChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope    =    traverse(n,    scope);    Node  n  =  arg.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
1022	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
1023	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
1024	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FOR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
1025	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
1026	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
1027	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.FUNCTION    ||    arg.getType()!=    Token.NAME)    {    scope    =    traverse(arg,    null);    }    if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  }	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
1028	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg,  syntacticScope,  n);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  arg,  syntacticScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg,  syntacticScope,  n);	  scope    =    traverse(arg,    syntacticScope,    n);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1029	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n);  FunctionType  functionScope  =  n.getJSType();  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  n);  FunctionType  functionScope  =  n.getJSType();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  n);  FunctionType  functionScope  =  n.getJSType();	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    n.getJSType();    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
1030	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n.setJSType(type);  scope  =  traverse(arg,  null);  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    n.setJSType(type);  n.setJSType(type);  scope  =  traverse(arg,  null);  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        n.setJSType(type);    n.setJSType(type);  scope  =  traverse(arg,  null);  n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	99	None	add
1031	[BUG]  [BUGGY]  scope  -=  arg.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  -=  arg.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  -=  arg.getLastChild();	          scope    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
1032	[BUG]  [BUGGY]  scope  =  arg,  n.getLastChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  arg,  n.getLastChild();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  arg,  n.getLastChild();	          scope    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	24	None	replace
1033	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getFirstChild());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getFirstChild());	  scope    =    traverse(arg,    null);    n.setJSType(type);    scope    =    traverse(arg,    null);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
1034	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getLastChild());  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n.getLastChild());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n.getLastChild());	  scope    =    traverse(arg,    null);    n.setJSType(type);    scope    =    traverse(arg,    null);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
1035	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
1036	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  n.setJSType(type);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    n.setJSType(type);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
1037	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.VAR)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
1038	[BUG]  [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.ASSIGN)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    null);    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.ASSIGN)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        null);        if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  null);  if(arg.getType()  ==  Token.ASSIGN)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
1039	[BUG]  [BUGGY]  scope  =  traverse(config,  arg,  constructorType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(config,  arg,  constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(config,  arg,  constructorType);	  scope    =    traverse(arg,    constructorType);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
1040	[BUG]  [BUGGY]  n.detachChildren();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.detachChildren();  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.detachChildren();	  n.removeChild(arg);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1041	[BUG]  [BUGGY]  scope  =  traverse(structor,  n,  arg,  functionScope);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  n,  arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  n,  arg,  functionScope);	  scope    =    traverse(arg,    n,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1042	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(arg,  scope.getParent());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(arg,  scope.getParent());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(arg,  scope.getParent());	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1043	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(arg,  scope.getFunctionScope());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(arg,  scope.getFunctionScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(arg,  scope.getFunctionScope());	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1044	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(scope,  arg);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(scope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1045	[BUG]  [BUGGY]  scope  =  traverse(structor,  n,  null);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  n,  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  n,  null);	  scope    =    traverse(arg,    n,    null);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
1046	[BUG]  [BUGGY]  scope  =  traverse(n,  functionScope,  arg,  syntacticScope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(n,  functionScope,  arg,  syntacticScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(n,  functionScope,  arg,  syntacticScope);	  scope    =    traverse(n,    arg,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
1047	[BUG]  [BUGGY]  scope  =  traverse(syntacticScope,  arg,  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(syntacticScope,  arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(syntacticScope,  arg,  scope);	  scope    =    traverse(syntacticScope,    arg);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1048	[BUG]  [BUGGY]  n.removeChild(arg);  NodeTraversal.traverse(compiler,  arg,  new  RuntimeException( " "));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  NodeTraversal.traverse(compiler,  arg,  new  RuntimeException( " "));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    NodeTraversal.traverse(compiler,  arg,  new  RuntimeException( " "));	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
1049	[BUG]  [BUGGY]  n.removeChild(arg);  NodeTraversal.traverse(compiler,  arg,  scope);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.removeChild(arg);  NodeTraversal.traverse(compiler,  arg,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.removeChild(arg);    NodeTraversal.traverse(compiler,  arg,  scope);	  	non-compiled	[CE]  cannot  find  symbol	133	None	add
1050	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }	  scope    =    traverse(arg,    functionScope);    if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1051	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]      IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }	  scope    =    traverse(arg,    functionScope);    if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1052	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION  ||  arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  functionScope);  }	  scope    =    traverse(arg,    functionScope);    if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1053	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  syntacticScope);  }  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  syntacticScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  syntacticScope);  }	  scope    =    traverse(arg,    functionScope);    if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1054	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.NAME)  {  scope  =  traverse(arg,  functionScope);  }  else  {  scope  =  traverse(arg,  functionScope);  }	  scope    =    traverse(arg,    functionScope);    if(functionScope!=    null)    {    scope    =    traverse(arg,    functionScope);    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1055	[BUG]  [BUGGY]  n.setJSType(arg.getJSType()  ||  arg.getJSType()  ==  null);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  n.setJSType(arg.getJSType()  ||  arg.getJSType()  ==  null);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	n.setJSType(arg.getJSType()  ||  arg.getJSType()  ==  null);	          n.setJSType(arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
1056	[BUG]  [BUGGY]  scope  =  traverseNode(arg,  n.createChildFlowScope());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverseNode(arg,  n.createChildFlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverseNode(arg,  n.createChildFlowScope());	  scope    =    traverseNode(arg,    n);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
1057	[BUG]  [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew();  }  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew();  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  traverseNew();  }	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
1058	[BUG]  [BUGGY]          n.setJSType(constructorType);  Node  constructorType  =  arg.getFirstChild();  n.setJSType(constructorType);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]          n.setJSType(constructorType);  Node  constructorType  =  arg.getFirstChild();  n.setJSType(constructorType);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	                n.setJSType(constructorType);    Node  constructorType  =  arg.getFirstChild();  n.setJSType(constructorType);	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
1059	[BUG]  [BUGGY]  if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()!=  Token.NAME)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
1060	[BUG]  [BUGGY]  if(arg.getType()  ==  Token.ASSIGN)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  if(arg.getType()  ==  Token.ASSIGN)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	if(arg.getType()  ==  Token.ASSIGN)  {  scope  =  traverse(arg,  null);  }  else  {  traverse(arg,  null);  }	  scope    =    traverse(arg,    null);    if(arg.getType()    ==    Token.NAME)    {    scope    =    traverse(arg,    null);    }    else    {    traverse(arg,    null);    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
1061	[BUG]  [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  arg.getFirstChild();  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope    =    traverse(arg,    functionScope);    n.setJSType(type);  scope  =  traverse(arg,  functionScope);  Node  functionScope  =  arg.getFirstChild();  n.setJSType(type);  scope  =  traverse(arg,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope        =        traverse(arg,        functionScope);        n.setJSType(type);    scope    =    traverse(arg,    functionScope);    Node  functionScope  =  arg.getFirstChild();  n.setJSType(type);  scope  =  traverse(arg,  functionScope);	  	non-compiled	[CE]  cannot  find  symbol	147	None	add
1062	[BUG]  [BUGGY]  scope  =  traverse(g2,  constructor);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g2,  constructor);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g2,  constructor);	  scope    =    traverse(constructor,    arg);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
1063	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  arg,  syntacticScope,  type);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  arg,  syntacticScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  arg,  syntacticScope,  type);	  scope    =    traverse(functionScope,    arg,    syntacticScope);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
1064	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  null,  type);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  null,  type);	  scope    =    traverse(arg,    functionScope,    null);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1065	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  arg);  FunctionType  functionScope  =  traverse(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(functionScope,  arg);  FunctionType  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(functionScope,  arg);  FunctionType  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1066	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  traverse(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1067	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg);  FunctionType  functionScope  =  traverse(scope,  functionScope);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(scope,  arg);  FunctionType  functionScope  =  traverse(scope,  functionScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(scope,  arg);  FunctionType  functionScope  =  traverse(scope,  functionScope);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1068	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  traverse(functionScope,  n);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  traverse(functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  FunctionType  functionScope  =  traverse(functionScope,  n);	  scope    =    traverse(arg,    functionScope);    FunctionType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
1069	[BUG]  [BUGGY]  scope  =  traverse(arg,  n);  functionScope  =  traverse(arg,  n);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  n);  functionScope  =  traverse(arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  n);  functionScope  =  traverse(arg,  n);	  scope    =    traverse(arg,    functionScope);    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
1070	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg,  n,  scope);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  arg,  n,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg,  n,  scope);	  scope    =    traverse(constructor,    arg,    n);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
1071	[BUG]  [BUGGY]  Scope  functionScope  =  traverse(arg,  scope.getParent());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  Scope  functionScope  =  traverse(arg,  scope.getParent());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	Scope  functionScope  =  traverse(arg,  scope.getParent());	  scope    =    traverse(arg,    functionScope);    Scope    functionScope    =    traverse(arg,    scope);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
1072	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(functionScope,  n);  [CE]  cannot  find  symbol  [FE]          IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(functionScope,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  JSType  functionScope  =  traverse(functionScope,  n);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
1073	[BUG]  [BUGGY]  JSType  functionScope  =  traverse(functionScope,  arg);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  JSType  functionScope  =  traverse(functionScope,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	JSType  functionScope  =  traverse(functionScope,  arg);	  scope    =    traverse(arg,    functionScope);    JSType    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
1074	[BUG]  [BUGGY]  scope  =  traverse(arg.getString(),  scope);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg.getString(),  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg.getString(),  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
1075	[BUG]  [BUGGY]  scope  =  traverse(arg,  false,  new  FlowScope());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  false,  new  FlowScope());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  false,  new  FlowScope());	  scope    =    traverse(arg,    null,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1076	[BUG]  [BUGGY]  scope  =  traverse(arg,  scopeScope);  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  scopeScope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  scopeScope);	  scope    =    traverse(arg,    functionScope);    scope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
1077	[BUG]  [BUGGY]  scope  =  traverse(arg,  newScope,  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  newScope,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  newScope,  type);	  scope    =    traverse(arg,    newScope());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
1078	[BUG]  [BUGGY]  scope  =  traverse(structor,  n,  arg.getJSType(),  type);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  n,  arg.getJSType(),  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  n,  arg.getJSType(),  type);	  scope    =    traverse(constructor,    n,    arg.getJSType());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1079	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope,  n.setJSType(type);  [CE]  ')'  expected  [FE]    IllegalStateException    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope,  n.setJSType(type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope,  n.setJSType(type);	  scope    =    traverse(arg,    functionScope);    n.setJSType(type);    	non-compiled	[CE]  ')'  expected	150	None	replace
1080	[BUG]  [BUGGY]  scope  =  traverse(constructor,  arg,  null,  n);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructor,  arg,  null,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructor,  arg,  null,  n);	  scope    =    traverse(arg,    null,    n);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1081	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg,  null,  n);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  arg,  null,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg,  null,  n);	  scope    =    traverse(arg,    null,    n);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
1082	[BUG]  [BUGGY]  scope  =  traverse(g2,  constructorType,  arg);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g2,  constructorType,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g2,  constructorType,  arg);	  scope    =    traverse(constructorType,    arg);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1083	[BUG]  [BUGGY]  scope  =  traverse(constructorType,  arg,  n);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructorType,  arg,  n);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructorType,  arg,  n);	  scope    =    traverse(constructorType,    arg);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1084	[BUG]  [BUGGY]  scope  =  traverse(constructorType,  null,  arg);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(constructorType,  null,  arg);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(constructorType,  null,  arg);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
1085	[BUG]  [BUGGY]  scope  =  traverse(structor,  arg,  null,  type);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(structor,  arg,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(structor,  arg,  null,  type);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
1086	[BUG]  [BUGGY]  scope  =  traverse(config,  arg,  null,  type);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(config,  arg,  null,  type);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(config,  arg,  null,  type);	  scope    =    traverse(arg,    null,    type);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
1087	[BUG]  [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);  [CE]  cannot  find  symbol  [FE]        IllegalStateException      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(arg,  functionScope);  FunctionScope  functionScope  =  traverse(functionScope,  scope);	  scope    =    traverse(arg,    functionScope);    FunctionScope    functionScope    =    traverse(arg,    functionScope);    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1088	[BUG]  [BUGGY]  scope  =  traverse(new  FlowScope(arg,  functionScope));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(new  FlowScope(arg,  functionScope));  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(new  FlowScope(arg,  functionScope));	  scope    =    traverse(functionScope,    arg);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1089	[BUG]  [BUGGY]  scope  =  traverse(g,  arg.getJSType());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {      [BUGGY]  scope  =  traverse(g,  arg.getJSType());  [BUGGY]      }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5773502691896258	1060	1060	1	replace	scope  =  traverse(g,  arg.getJSType());	  scope    =    traverse(g,    n.getJSType());    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
