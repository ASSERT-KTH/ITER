bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  scope  ==  null?  type  :  n.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  type  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  type  :  n.getJSType();	  return    scope!=    null?    type    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	69	None	replace
2	[BUG]  [BUGGY]  return  n!=  null?  type  :  n.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n!=  null?  type  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  type  :  n.getJSType();	  return    scope!=    null?    type    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	69	None	replace
3	[BUG]  [BUGGY]  return  scope!=  null?  constructorType  :  n.getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  constructorType  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  constructorType  :  n.getJSType();	  return    scope!=    null?    type    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	69	None	replace
4	[BUG]  [BUGGY]  return  type!=  null?  getNativeType(UNKNOWN_TYPE):  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?  getNativeType(UNKNOWN_TYPE):  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  getNativeType(UNKNOWN_TYPE):  null;	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    null;    	non-compiled	[CE]  ';'  expected	106	None	replace
5	[BUG]  [BUGGY]  return  scope  ==  null?  getNativeType(UNKNOWN_TYPE):  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  getNativeType(UNKNOWN_TYPE):  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  getNativeType(UNKNOWN_TYPE):  null;	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    null;    	non-compiled	[CE]  ';'  expected	106	None	replace
6	[BUG]  [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  scope;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  scope;	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    null;    	non-compiled	[CE]  ';'  expected	106	None	replace
7	[BUG]  [BUGGY]  return  type!=  null?  getNativeType(UNKNOWN_TYPE):  scope;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?  getNativeType(UNKNOWN_TYPE):  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  getNativeType(UNKNOWN_TYPE):  scope;	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    null;    	non-compiled	[CE]  ';'  expected	106	None	replace
8	[BUG]  [BUGGY]  return  n  ==  null?  getNativeType(UNKNOWN_TYPE):  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  ==  null?  getNativeType(UNKNOWN_TYPE):  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  ==  null?  getNativeType(UNKNOWN_TYPE):  null;	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    null;    	non-compiled	[CE]  ';'  expected	106	None	replace
9	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NULL_TYPE,  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NULL_TYPE,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NULL_TYPE,  type);	  return    scope.getNativeType(JSTypeNative.NULL_TYPE);    	non-compiled	[CE]  ';'  expected	96	None	replace
10	[BUG]  [BUGGY]  return  n.getNativeType(JSTypeNative.NULL_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getNativeType(JSTypeNative.NULL_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getNativeType(JSTypeNative.NULL_TYPE);	  return    scope.getNativeType(JSTypeNative.NULL_TYPE);    	non-compiled	[CE]  ';'  expected	96	None	replace
11	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NULL_TYPE,  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NULL_TYPE,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NULL_TYPE,  n);	  return    scope.getNativeType(JSTypeNative.NULL_TYPE);    	non-compiled	[CE]  ';'  expected	96	None	replace
12	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NULL_TYPE)+  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NULL_TYPE)+  1;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NULL_TYPE)+  1;	  return    scope.getNativeType(JSTypeNative.NULL_TYPE);    	non-compiled	[CE]  ';'  expected	96	None	replace
13	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  null  :  scope.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  scope.getType()  ==  Token.FUNCTION;	  return    scope!=    null?    null    :    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	25	None	replace
14	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.getType()  >>  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.getType()  >>  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.getType()  >>  Token.FUNCTION;	  return    scope!=    null?    null    :    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	25	None	replace
15	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.getType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.getType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.getType()  >=  Token.FUNCTION;	  return    scope!=    null?    null    :    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	25	None	replace
16	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.getType()  {  Token.FUNCTION;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.getType()  {  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.getType()  {  Token.FUNCTION;	  return    scope!=    null?    null    :    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	25	None	replace
17	[BUG]  [BUGGY]  return  scope!=  null  ||  scope.getType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  ||  scope.getType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  ||  scope.getType()  >=  Token.FUNCTION;	  return    scope!=    null    ||    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	23	None	replace
18	[BUG]  [BUGGY]  return  arg.getInstanceType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  arg.getInstanceType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  arg.getInstanceType();	  return    n.getInstanceType();    	non-compiled	[CE]  ';'  expected	82	None	replace
19	[BUG]  [BUGGY]  return  n.getType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType();	  return    n.getInstanceType();    	non-compiled	[CE]  ';'  expected	82	None	replace
20	[BUG]  [BUGGY]  return  type.getInstanceType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getInstanceType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getInstanceType();	  return    n.getInstanceType();    	non-compiled	[CE]  ';'  expected	82	None	replace
21	[BUG]  [BUGGY]  return  n.getConstructorScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getConstructorScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getConstructorScope();	  return    scope.getConstructorScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
22	[BUG]  [BUGGY]  return  scope.getConstructorScope(n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getConstructorScope(n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getConstructorScope(n);	  return    scope.getConstructorScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
23	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n,  scope.clone();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n,  scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n,  scope.clone();	  return    type    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	77	None	replace
24	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  scope);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
25	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  scope);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
26	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  n);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  n);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
27	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  arg);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  arg);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
28	[BUG]  [BUGGY]  return  scope!=  null?  n  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  n  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  n  :  n.getJSType();	  return    n!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	67	None	replace
29	[BUG]  [BUGGY]  return  scope!=  null?  n.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  n.getJSType()  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  n.getJSType()  :  n.getJSType();	  return    n!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	67	None	replace
30	[BUG]  [BUGGY]  return  n  ==  null?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  ==  null?  scope  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  ==  null?  scope  :  n.getJSType();	  return    n!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	67	None	replace
31	[BUG]  [BUGGY]  return  scope  ==  null?  n  :  n.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  n  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  n  :  n.getJSType();	  return    n!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	67	None	replace
32	[BUG]  [BUGGY]  return  scope.cloneTree(),  n,  type;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  n,  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n,  type;	  return    scope.cloneTree(),    n;    	non-compiled	[CE]  ';'  expected	22	None	replace
33	[BUG]  [BUGGY]  return  n.cloneTree(),  scope;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneTree(),  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneTree(),  scope;	  return    scope.cloneTree(),    n;    	non-compiled	[CE]  ';'  expected	22	None	replace
34	[BUG]  [BUGGY]  return  scope.cloneTree(),  n,  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  n,  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n,  null;	  return    scope.cloneTree(),    n;    	non-compiled	[CE]  ';'  expected	22	None	replace
35	[BUG]  [BUGGY]  return  scope.cloneTree(),  arg;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  arg;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  arg;	  return    scope.cloneTree(),    n;    	non-compiled	[CE]  ';'  expected	22	None	replace
36	[BUG]  [BUGGY]  return  scope.cloneTree(),  n,  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  n,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n,  type);	  return    scope.cloneTree(),    n;    	non-compiled	[CE]  ';'  expected	22	None	replace
37	[BUG]  [BUGGY]  return  scope.cloneTree(),  n,  null);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  n,  null);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n,  null);	  return    scope.cloneTree(),    n;    	non-compiled	[CE]  ';'  expected	22	None	replace
38	[BUG]  [BUGGY]  return  scope.cloneTree(),  type;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  type;	  return    scope.cloneTree(),    n;    	non-compiled	[CE]  ';'  expected	22	None	replace
39	[BUG]  [BUGGY]  if(type!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
40	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
41	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
42	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
43	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  scope.getNext();  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  scope.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  scope.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
44	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
45	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  n  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  n  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  n  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
46	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  null  :  n;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  null  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  null  :  n;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
47	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(type)?  scope  :  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(type)?  scope  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(type)?  scope  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
48	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope)?  scope  :  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope)?  scope  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope)?  scope  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
49	[BUG]  [BUGGY]  return  type.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
50	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
51	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(scope.getJSType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(scope.getJSType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(scope.getJSType());    	non-compiled	[CE]  ';'  expected	57	None	replace
52	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(scope.getJSType());    	non-compiled	[CE]  ';'  expected	57	None	replace
53	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  type);	  return    scope!=    null?    scope    :    new    BooleanOutcome(scope.getJSType());    	non-compiled	[CE]  ';'  expected	57	None	replace
54	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType()  +  1);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType()  +  1);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType()  +  1);	  return    scope!=    null?    scope    :    new    BooleanOutcome(scope.getJSType());    	non-compiled	[CE]  ';'  expected	57	None	replace
55	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(scope.getJSType()):  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(scope.getJSType()):  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(scope.getJSType()):  null;	  return    scope!=    null?    scope    :    new    BooleanOutcome(scope.getJSType());    	non-compiled	[CE]  ';'  expected	57	None	replace
56	[BUG]  [BUGGY]  return  scope.cloneTree()  ||  n.getJSType()  ==  type;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  ||  n.getJSType()  ==  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  ||  n.getJSType()  ==  type;	  return    scope.cloneTree()    &&    n.getJSType()    ==    type;    	non-compiled	[CE]  ';'  expected	121	None	replace
57	[BUG]  [BUGGY]  return  n.cloneTree()  &&  scope.getJSType()  ==  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneTree()  &&  scope.getJSType()  ==  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneTree()  &&  scope.getJSType()  ==  type;	  return    scope.cloneTree()    &&    n.getJSType()    ==    type;    	non-compiled	[CE]  ';'  expected	121	None	replace
58	[BUG]  [BUGGY]  return  type.cloneTree()  &&  n.getJSType()  ==  scope;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.cloneTree()  &&  n.getJSType()  ==  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.cloneTree()  &&  n.getJSType()  ==  scope;	  return    scope.cloneTree()    &&    n.getJSType()    ==    type;    	non-compiled	[CE]  ';'  expected	121	None	replace
59	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()  ==  constructorType;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()  ==  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  n.getJSType()  ==  constructorType;	  return    scope.cloneTree()    &&    n.getJSType()    ==    type;    	non-compiled	[CE]  ';'  expected	121	None	replace
60	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  type.getJSType()  ==  n;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  &&  type.getJSType()  ==  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  type.getJSType()  ==  n;	  return    scope.cloneTree()    &&    n.getJSType()    ==    type;    	non-compiled	[CE]  ';'  expected	121	None	replace
61	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
62	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
63	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  n  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  n  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  n  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
64	[BUG]  [BUGGY]  For(JSType  ct  :  arg.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  arg.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  arg.getJSType())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
65	[BUG]  [BUGGY]  Scope  scope  =  traverse(ct,  scope);  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Scope  scope  =  traverse(ct,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Scope  scope  =  traverse(ct,  scope);	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
66	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
67	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSType())  {  scope  =  traverse(scope,  ct);  }  [CE]  ';'  expected  [FE]                                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSType())  {  scope  =  traverse(scope,  ct);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSType())  {  scope  =  traverse(scope,  ct);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
68	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getParameterType(0);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getParameterType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getParameterType(0);    	non-compiled	[CE]  ';'  expected	78	None	replace
69	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getParameterType(0);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getParameterType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getParameterType(0);    	non-compiled	[CE]  ';'  expected	78	None	replace
70	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getConstructorType(0);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getConstructorType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getConstructorType(0);	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getParameterType(0);    	non-compiled	[CE]  ';'  expected	78	None	replace
71	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	79	None	replace
72	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type,  scope);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	79	None	replace
73	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  type);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	79	None	replace
74	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  constructorType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  constructorType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  constructorType);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	79	None	replace
75	[BUG]  [BUGGY]  return  scope.toFunctionScope(n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toFunctionScope(n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toFunctionScope(n);	  return    scope.toFunctionScope();    	non-compiled	[CE]  ';'  expected	80	None	replace
76	[BUG]  [BUGGY]  return  scope.toSyntacticScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toSyntacticScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toSyntacticScope();	  return    scope.toFunctionScope();    	non-compiled	[CE]  ';'  expected	80	None	replace
77	[BUG]  [BUGGY]  return  scope.toBooleanScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toBooleanScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toBooleanScope();	  return    scope.toFunctionScope();    	non-compiled	[CE]  ';'  expected	80	None	replace
78	[BUG]  [BUGGY]  return  n.toFunctionScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.toFunctionScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.toFunctionScope();	  return    scope.toFunctionScope();    	non-compiled	[CE]  ';'  expected	80	None	replace
79	[BUG]  [BUGGY]  return  scope.toFunctionScope(false);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toFunctionScope(false);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toFunctionScope(false);	  return    scope.toFunctionScope();    	non-compiled	[CE]  ';'  expected	80	None	replace
80	[BUG]  [BUGGY]  return  scope.evaluate(n,  arg,  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  arg,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  arg,  type);	  return    scope.evaluate(n,    arg);    	non-compiled	[CE]  ';'  expected	45	None	replace
81	[BUG]  [BUGGY]  return  scope.evaluate(n,  arg,  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  arg,  null);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  arg,  null);	  return    scope.evaluate(n,    arg);    	non-compiled	[CE]  ';'  expected	45	None	replace
82	[BUG]  [BUGGY]  return  scope.evaluate(scope,  arg);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(scope,  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope,  arg);	  return    scope.evaluate(n,    arg);    	non-compiled	[CE]  ';'  expected	45	None	replace
83	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope;	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n;    	non-compiled	[CE]  ';'  expected	65	None	replace
84	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)arg;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)arg;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)arg;	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n;    	non-compiled	[CE]  ';'  expected	65	None	replace
85	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equalsIgnoreCase(type);    	non-compiled	[CE]  ';'  expected	114	None	replace
86	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getJSType().equalsIgnoreCase(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getJSType().equalsIgnoreCase(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getJSType().equalsIgnoreCase(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equalsIgnoreCase(type);    	non-compiled	[CE]  ';'  expected	114	None	replace
87	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(scope);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equalsIgnoreCase(type);    	non-compiled	[CE]  ';'  expected	114	None	replace
88	[BUG]  [BUGGY]  return  type.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equalsIgnoreCase(type);    	non-compiled	[CE]  ';'  expected	114	None	replace
89	[BUG]  [BUGGY]  return  arg.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  arg.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  arg.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equalsIgnoreCase(type);    	non-compiled	[CE]  ';'  expected	114	None	replace
90	[BUG]  [BUGGY]  return  scope  ==  null? "null "  :  scope.clone();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null? "null "  :  scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null? "null "  :  scope.clone();	  return    scope    ==    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	83	None	replace
91	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  scope.cloneTree();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  null  :  scope.cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  scope.cloneTree();	  return    scope    ==    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	83	None	replace
92	[BUG]  [BUGGY]  return  scope!=  null? "null "  :  scope.clone();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null? "null "  :  scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null? "null "  :  scope.clone();	  return    scope    ==    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	83	None	replace
93	[BUG]  [BUGGY]  return  scope!=  null?  n  :  n;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  n  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  n  :  n;	  return    n!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	98	None	replace
94	[BUG]  [BUGGY]  return  n  ==  null?  scope  :  n;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  ==  null?  scope  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  ==  null?  scope  :  n;	  return    n!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	98	None	replace
95	[BUG]  [BUGGY]  return  n!=  null?  scope  :  n.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n!=  null?  scope  :  n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  n.clone();	  return    n!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	98	None	replace
96	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getType()!=  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    >=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	26	None	replace
97	[BUG]  [BUGGY]  return  scope!=  null  ||  scope.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  ||  scope.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  ||  scope.getType()!=  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    >=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	26	None	replace
98	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getType()  >>  Token.FUNCTION;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getType()  >>  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getType()  >>  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    >=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	26	None	replace
99	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcomePair();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcomePair();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcomePair();	  return    n!=    null?    scope    :    new    BooleanOutcomePair();    	non-compiled	[CE]  ';'  expected	100	None	replace
100	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair()  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair()  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcomePair()  :  null;	  return    n!=    null?    scope    :    new    BooleanOutcomePair();    	non-compiled	[CE]  ';'  expected	100	None	replace
101	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair()  :  new  BooleanOutcomePair();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair()  :  new  BooleanOutcomePair();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcomePair()  :  new  BooleanOutcomePair();	  return    n!=    null?    scope    :    new    BooleanOutcomePair();    	non-compiled	[CE]  ';'  expected	100	None	replace
102	[BUG]  [BUGGY]  return  n  ==  null?  scope  :  new  BooleanOutcomePair();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  ==  null?  scope  :  new  BooleanOutcomePair();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  ==  null?  scope  :  new  BooleanOutcomePair();	  return    n!=    null?    scope    :    new    BooleanOutcomePair();    	non-compiled	[CE]  ';'  expected	100	None	replace
103	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcomePair();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcomePair();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcomePair();	  return    n!=    null?    scope    :    new    BooleanOutcomePair();    	non-compiled	[CE]  ';'  expected	100	None	replace
104	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcomePair()  :  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  new  BooleanOutcomePair()  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcomePair()  :  null;	  return    n!=    null?    scope    :    new    BooleanOutcomePair();    	non-compiled	[CE]  ';'  expected	100	None	replace
105	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  arg.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  arg.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  arg.getJSType();	  return    scope!=    null?    scope    :    arg.getJSType();    	non-compiled	[CE]  ';'  expected	68	None	replace
106	[BUG]  [BUGGY]  return  arg!=  null?  scope  :  arg.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  arg!=  null?  scope  :  arg.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  arg!=  null?  scope  :  arg.getJSType();	  return    scope!=    null?    scope    :    arg.getJSType();    	non-compiled	[CE]  ';'  expected	68	None	replace
107	[BUG]  [BUGGY]  return  scope!=  null?  type  :  arg.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  type  :  arg.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  type  :  arg.getJSType();	  return    scope!=    null?    scope    :    arg.getJSType();    	non-compiled	[CE]  ';'  expected	68	None	replace
108	[BUG]  [BUGGY]  return  scope.cloneBoolean()?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneBoolean()?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneBoolean()?  Boolean.TRUE  :  Boolean.FALSE;	  return    scope.cloneBoolean();    	non-compiled	[CE]  ';'  expected	51	None	replace
109	[BUG]  [BUGGY]  return  scope.cloneBoolean()?  Boolean.FALSE  :  Boolean.TRUE;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneBoolean()?  Boolean.FALSE  :  Boolean.TRUE;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneBoolean()?  Boolean.FALSE  :  Boolean.TRUE;	  return    scope.cloneBoolean();    	non-compiled	[CE]  ';'  expected	51	None	replace
110	[BUG]  [BUGGY]  return  scope.cloneBoolean()?  true  :  false;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneBoolean()?  true  :  false;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneBoolean()?  true  :  false;	  return    scope.cloneBoolean();    	non-compiled	[CE]  ';'  expected	51	None	replace
111	[BUG]  [BUGGY]  return  scope.cloneBoolean()?  false  :  false;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneBoolean()?  false  :  false;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneBoolean()?  false  :  false;	  return    scope.cloneBoolean();    	non-compiled	[CE]  ';'  expected	51	None	replace
112	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();	  return    n    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	70	None	replace
113	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
114	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
115	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
116	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
117	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  >=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  >=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  >=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
118	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getParent())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getParent())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getParent())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
119	[BUG]  [BUGGY]  return  scope.evaluate(scope,  n,  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(scope,  n,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope,  n,  type);	  return    scope.evaluate(scope,    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
120	[BUG]  [BUGGY]  return  scope.evaluate(n,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  scope);	  return    scope.evaluate(scope,    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
121	[BUG]  [BUGGY]  return  scope.evaluate(scope,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(scope,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope,  type);	  return    scope.evaluate(scope,    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
122	[BUG]  [BUGGY]  return  scope.evaluate(scope,  n,  null);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(scope,  n,  null);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope,  n,  null);	  return    scope.evaluate(scope,    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
123	[BUG]  [BUGGY]  return  scope.evaluate(scope,  n,  false);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(scope,  n,  false);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope,  n,  false);	  return    scope.evaluate(scope,    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
124	[BUG]  [BUGGY]  return  n.evaluate(scope,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  scope);	  return    scope.evaluate(scope,    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
125	[BUG]  [BUGGY]  return  scope.getType()!=  Token.NAME?  n  :  n;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()!=  Token.NAME?  n  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()!=  Token.NAME?  n  :  n;	  return    n.getType()!=    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	40	None	replace
126	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME?  n  :  n;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME?  n  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME?  n  :  n;	  return    n.getType()!=    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	40	None	replace
127	[BUG]  [BUGGY]  return  scope.getType()!=  Token.NAME?  scope  :  n;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()!=  Token.NAME?  scope  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()!=  Token.NAME?  scope  :  n;	  return    n.getType()!=    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	40	None	replace
128	[BUG]  [BUGGY]  return  scope.cloneTree(arg);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(arg);	  return    scope.cloneTree(n);    	non-compiled	[CE]  ';'  expected	20	None	replace
129	[BUG]  [BUGGY]  return  n.cloneTree(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneTree(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneTree(scope);	  return    scope.cloneTree(n);    	non-compiled	[CE]  ';'  expected	20	None	replace
130	[BUG]  [BUGGY]  return  scope.cloneTree(arg,  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(arg,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(arg,  n);	  return    scope.cloneTree(n);    	non-compiled	[CE]  ';'  expected	20	None	replace
131	[BUG]  [BUGGY]  return  scope.cloneTree(n,  arg);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(n,  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(n,  arg);	  return    scope.cloneTree(n);    	non-compiled	[CE]  ';'  expected	20	None	replace
132	[BUG]  [BUGGY]  return  scope.cloneTree(n,  ct);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(n,  ct);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(n,  ct);	  return    scope.cloneTree(n);    	non-compiled	[CE]  ';'  expected	20	None	replace
133	[BUG]  [BUGGY]  return  scope.cloneTree(n,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(n,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(n,  type);	  return    scope.cloneTree(n);    	non-compiled	[CE]  ';'  expected	20	None	replace
134	[BUG]  [BUGGY]  for(JSType  ct  :  arg.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  arg.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  arg.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
135	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
136	[BUG]  [BUGGY]  For(JSType  ct  :  arg.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  arg.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  arg.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
137	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
138	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isInstanceType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isInstanceType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isInstanceType())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
139	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(!ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(!ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  if(!ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
140	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.clone();    	non-compiled	[CE]  ';'  expected	63	None	replace
141	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)scope.clone();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)scope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.clone();    	non-compiled	[CE]  ';'  expected	63	None	replace
142	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)arg.clone();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)arg.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)arg.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.clone();    	non-compiled	[CE]  ';'  expected	63	None	replace
143	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getReturnType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getReturnType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getReturnType();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.getJSType();    	non-compiled	[CE]  ';'  expected	85	None	replace
144	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)arg.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)arg.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)arg.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.getJSType();    	non-compiled	[CE]  ';'  expected	85	None	replace
145	[BUG]  [BUGGY]  return  scope!=  null  ||  scope.getJSType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  ||  scope.getJSType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  ||  scope.getJSType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getJSType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	74	None	replace
146	[BUG]  [BUGGY]  return  scope  ==  null  &&  scope.getJSType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  &&  scope.getJSType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  &&  scope.getJSType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getJSType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	74	None	replace
147	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.getJSType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.getJSType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.getJSType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getJSType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	74	None	replace
148	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getJSType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getJSType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getJSType()  >=  Token.FUNCTION;	  return    scope!=    null    &&    scope.getJSType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	74	None	replace
149	[BUG]  [BUGGY]  return  scope  ==  null  ||  scope.getJSType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  ||  scope.getJSType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  ||  scope.getJSType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getJSType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	74	None	replace
150	[BUG]  [BUGGY]  n.setJSType(constructorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(constructorType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(constructorType);	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
151	[BUG]  [BUGGY]  n.setJSType(ct.getInstanceType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(ct.getInstanceType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(ct.getInstanceType());	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
152	[BUG]  [BUGGY]  n.setJSType(scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(scope);	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
153	[BUG]  [BUGGY]  n.setJSType(ct.getConstructor());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(ct.getConstructor());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(ct.getConstructor());	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
154	[BUG]  [BUGGY]  n.setJSType(arg);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(arg);	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
155	[BUG]  [BUGGY]  return  scope.cloneTree()  ||  n.getJSType()!=  type;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  ||  n.getJSType()!=  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  ||  n.getJSType()!=  type;	  return    scope.cloneTree()    &&    n.getJSType()!=    type;    	non-compiled	[CE]  ';'  expected	120	None	replace
156	[BUG]  [BUGGY]  return  n.cloneTree()  &&  scope.getJSType()!=  type;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneTree()  &&  scope.getJSType()!=  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneTree()  &&  scope.getJSType()!=  type;	  return    scope.cloneTree()    &&    n.getJSType()!=    type;    	non-compiled	[CE]  ';'  expected	120	None	replace
157	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  constructorType.getJSType()!=  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  &&  constructorType.getJSType()!=  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  constructorType.getJSType()!=  type;	  return    scope.cloneTree()    &&    n.getJSType()!=    type;    	non-compiled	[CE]  ';'  expected	120	None	replace
158	[BUG]  [BUGGY]  return  type.cloneTree()  &&  n.getJSType()!=  scope;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.cloneTree()  &&  n.getJSType()!=  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.cloneTree()  &&  n.getJSType()!=  scope;	  return    scope.cloneTree()    &&    n.getJSType()!=    type;    	non-compiled	[CE]  ';'  expected	120	None	replace
159	[BUG]  [BUGGY]  return  scope.getSyntacticScope().cloneTree();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getSyntacticScope().cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getSyntacticScope().cloneTree();	  return    scope.getSyntacticScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
160	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
161	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
162	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
163	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
164	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
165	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
166	[BUG]  [BUGGY]  For(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
167	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
168	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
169	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
170	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getInstanceType();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getInstanceType();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getInstanceType();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
171	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getJSType();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getJSType();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getJSType();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
172	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
173	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
174	[BUG]  [BUGGY]  For(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
175	[BUG]  [BUGGY]  if(arg!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
176	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
177	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
178	[BUG]  [BUGGY]  type  =  ct.getInstanceType();  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  type  =  ct.getInstanceType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	type  =  ct.getInstanceType();	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
179	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(arg.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(arg.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(arg.getJSType());	  return    scope    ==    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	55	None	replace
180	[BUG]  [BUGGY]  return  scope.evaluate(arg,  n,  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(arg,  n,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(arg,  n,  type);	  return    scope.evaluate(arg,    n);    	non-compiled	[CE]  ';'  expected	49	None	replace
181	[BUG]  [BUGGY]  return  scope.evaluate(arg,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(arg,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(arg,  type);	  return    scope.evaluate(arg,    n);    	non-compiled	[CE]  ';'  expected	49	None	replace
182	[BUG]  [BUGGY]  return  n.evaluate(scope,  arg);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  arg);	  return    scope.evaluate(arg,    n);    	non-compiled	[CE]  ';'  expected	49	None	replace
183	[BUG]  [BUGGY]  return  traverse.evaluate(arg,  n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  traverse.evaluate(arg,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  traverse.evaluate(arg,  n);	  return    scope.evaluate(arg,    n);    	non-compiled	[CE]  ';'  expected	49	None	replace
184	[BUG]  [BUGGY]  return  traverse(arg,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  traverse(arg,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  traverse(arg,  scope);	  return    scope.evaluate(arg,    n);    	non-compiled	[CE]  ';'  expected	49	None	replace
185	[BUG]  [BUGGY]  return  arg.clone();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  arg.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  arg.clone();	  return    n.clone();    	non-compiled	[CE]  ';'  expected	52	None	replace
186	[BUG]  [BUGGY]  return  type.clone();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.clone();	  return    n.clone();    	non-compiled	[CE]  ';'  expected	52	None	replace
187	[BUG]  [BUGGY]  return  scope.evaluate(n,  constructorType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  constructorType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  constructorType);	  return    scope.evaluate(n,    type);    	non-compiled	[CE]  ';'  expected	43	None	replace
188	[BUG]  [BUGGY]  return  n.getInstanceScope();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getInstanceScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getInstanceScope();	  return    scope.getInstanceScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
189	[BUG]  [BUGGY]  return  scope.getInstanceScope(n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceScope(n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceScope(n);	  return    scope.getInstanceScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
190	[BUG]  [BUGGY]  return  scope.getReturnScope();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getReturnScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getReturnScope();	  return    scope.getInstanceScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
191	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE,  type);	  return    scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
192	[BUG]  [BUGGY]  return  n.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getNativeType(JSTypeNative.NO_OBJECT_TYPE);	  return    scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
193	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE,  n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE,  n);	  return    scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
194	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE)+  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE)+  1;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE)+  1;	  return    scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
195	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(arg.getJSType()):  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(arg.getJSType()):  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(arg.getJSType()):  null;	  return    scope!=    null?    scope    :    new    BooleanOutcome(arg.getJSType());    	non-compiled	[CE]  ';'  expected	56	None	replace
196	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(arg.getJSType());    	non-compiled	[CE]  ';'  expected	56	None	replace
197	[BUG]  [BUGGY]  return  scope!=  null?  null  :  new  BooleanOutcomePair(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  new  BooleanOutcomePair(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  new  BooleanOutcomePair(scope);	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
198	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair(scope):  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair(scope):  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcomePair(scope):  null;	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
199	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcomePair(scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcomePair(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcomePair(scope);	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
200	[BUG]  [BUGGY]  return  n  ==  null?  scope  :  new  BooleanOutcomePair(scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  ==  null?  scope  :  new  BooleanOutcomePair(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  ==  null?  scope  :  new  BooleanOutcomePair(scope);	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
201	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  new  BooleanOutcomePair(scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  null  :  new  BooleanOutcomePair(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  new  BooleanOutcomePair(scope);	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
202	[BUG]  [BUGGY]  return  scope!=  null?  this  :  new  BooleanOutcomePair(scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  this  :  new  BooleanOutcomePair(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  this  :  new  BooleanOutcomePair(scope);	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
203	[BUG]  [BUGGY]  return  scope.evaluate(scope,  constructor);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(scope,  constructor);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope,  constructor);	  return    scope.evaluate(scope);    	non-compiled	[CE]  ';'  expected	53	None	replace
204	[BUG]  [BUGGY]  return  scope.evaluate(scope,  true);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(scope,  true);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope,  true);	  return    scope.evaluate(scope);    	non-compiled	[CE]  ';'  expected	53	None	replace
205	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
206	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
207	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  ==  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
208	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  >=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  >=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg  >=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
209	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  scope);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  scope  =  traverse(arg,  scope);	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
210	[BUG]  [BUGGY]  return  constructorType  ==  null?  scope  :  type;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType  ==  null?  scope  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType  ==  null?  scope  :  type;	  return    type    ==    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	93	None	replace
211	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  constructorType;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  constructorType;	  return    type    ==    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	93	None	replace
212	[BUG]  [BUGGY]  return  scope  ==  null?  constructorType  :  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  constructorType  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  constructorType  :  type;	  return    type    ==    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	93	None	replace
213	[BUG]  [BUGGY]  return  constructor  ==  null?  scope  :  type;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructor  ==  null?  scope  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructor  ==  null?  scope  :  type;	  return    type    ==    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	93	None	replace
214	[BUG]  [BUGGY]  return  scope  ==  null?  type  :  constructorType;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  type  :  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  type  :  constructorType;	  return    type    ==    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	93	None	replace
215	[BUG]  [BUGGY]  return  type!=  null?  getNativeType(UNKNOWN_TYPE):  type;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?  getNativeType(UNKNOWN_TYPE):  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  getNativeType(UNKNOWN_TYPE):  type;	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    type;    	non-compiled	[CE]  ';'  expected	105	None	replace
216	[BUG]  [BUGGY]  return  scope  ==  null?  getNativeType(UNKNOWN_TYPE):  type;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  getNativeType(UNKNOWN_TYPE):  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  getNativeType(UNKNOWN_TYPE):  type;	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    type;    	non-compiled	[CE]  ';'  expected	105	None	replace
217	[BUG]  [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.toString();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.toString();	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    type;    	non-compiled	[CE]  ';'  expected	105	None	replace
218	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType()):  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType()):  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(n.getJSType()):  null;	  return    n!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	58	None	replace
219	[BUG]  [BUGGY]  return  n  ==  null?  scope  :  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  ==  null?  scope  :  new  BooleanOutcome(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  ==  null?  scope  :  new  BooleanOutcome(n.getJSType());	  return    n!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	58	None	replace
220	[BUG]  [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcome(arg.getJSType());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcome(arg.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  new  BooleanOutcome(arg.getJSType());	  return    n!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	58	None	replace
221	[BUG]  [BUGGY]  return  scope.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getJSType();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
222	[BUG]  [BUGGY]  return  arg.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  arg.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  arg.getJSType();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
223	[BUG]  [BUGGY]  return  n.getJSType().restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getJSType().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getJSType().restrictByNotNullOrUndefined();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
224	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getFirstChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getFirstChild();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
225	[BUG]  [BUGGY]  return  n.getJSType().cloneTree();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getJSType().cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getJSType().cloneTree();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
226	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
227	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
228	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
229	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
230	[BUG]  [BUGGY]  scope  =  traverse(ct,  scope);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  scope  =  traverse(ct,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	scope  =  traverse(ct,  scope);	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
231	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
232	[BUG]  [BUGGY]  For(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
233	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
234	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
235	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
236	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  n  :  ct.getConstructorTypes())  {  type  =  n.getInstanceType();  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  n  :  ct.getConstructorTypes())  {  type  =  n.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  n  :  ct.getConstructorTypes())  {  type  =  n.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
237	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
238	[BUG]  [BUGGY]  return  type.cloneTree();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	19	None	replace
239	[BUG]  [BUGGY]  return  n.cloneJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneJSType();	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	19	None	replace
240	[BUG]  [BUGGY]  return  n.cloneType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneType();	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	19	None	replace
241	[BUG]  [BUGGY]  return  n.cloneTree(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneTree(),  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneTree(),  scope);	  return    scope.cloneTree(),    n);    	non-compiled	[CE]  ';'  expected	21	None	replace
242	[BUG]  [BUGGY]  return  scope.cloneTree(),  n,  false);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  n,  false);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n,  false);	  return    scope.cloneTree(),    n);    	non-compiled	[CE]  ';'  expected	21	None	replace
243	[BUG]  [BUGGY]  return  scope.cloneTree(),  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  type);	  return    scope.cloneTree(),    n);    	non-compiled	[CE]  ';'  expected	21	None	replace
244	[BUG]  [BUGGY]  return  scope.cloneTree(),  n,  this);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  n,  this);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n,  this);	  return    scope.cloneTree(),    n);    	non-compiled	[CE]  ';'  expected	21	None	replace
245	[BUG]  [BUGGY]  return  scope.cloneTree(),  arg);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  arg);	  return    scope.cloneTree(),    n);    	non-compiled	[CE]  ';'  expected	21	None	replace
246	[BUG]  [BUGGY]  return  n.cloneChildren();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneChildren();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneChildren();	  return    scope.cloneChildren();    	non-compiled	[CE]  ';'  expected	81	None	replace
247	[BUG]  [BUGGY]  return  scope.cloneChildren(),  n;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneChildren(),  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneChildren(),  n;	  return    scope.cloneChildren();    	non-compiled	[CE]  ';'  expected	81	None	replace
248	[BUG]  [BUGGY]  return  scope.cloneScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneScope();	  return    scope.cloneChildren();    	non-compiled	[CE]  ';'  expected	81	None	replace
249	[BUG]  [BUGGY]  return  scope.cloneChildren(),  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneChildren(),  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneChildren(),  n);	  return    scope.cloneChildren();    	non-compiled	[CE]  ';'  expected	81	None	replace
250	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
251	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
252	[BUG]  [BUGGY]  For(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
253	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
254	[BUG]  [BUGGY]  For(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
255	[BUG]  [BUGGY]  return  scope!=  null  ||  scope.getInstanceType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  ||  scope.getInstanceType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  ||  scope.getInstanceType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getInstanceType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	75	None	replace
256	[BUG]  [BUGGY]  return  scope  ==  null  &&  scope.getInstanceType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  &&  scope.getInstanceType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  &&  scope.getInstanceType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getInstanceType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	75	None	replace
257	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getConstructorType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getConstructorType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getConstructorType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getInstanceType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	75	None	replace
258	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getReturnType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getReturnType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getReturnType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getInstanceType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	75	None	replace
259	[BUG]  [BUGGY]  return  scope  ==  null  ||  scope.getInstanceType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  ||  scope.getInstanceType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  ||  scope.getInstanceType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getInstanceType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	75	None	replace
260	[BUG]  [BUGGY]  return  scope.cloneType(type);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneType(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneType(type);	  return    scope.cloneType();    	non-compiled	[CE]  ';'  expected	54	None	replace
261	[BUG]  [BUGGY]  return  scope.cloneJSType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneJSType();	  return    scope.cloneType();    	non-compiled	[CE]  ';'  expected	54	None	replace
262	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getParent();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getParent();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getParent();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.getJSType();    	non-compiled	[CE]  ';'  expected	60	None	replace
263	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getConstructor();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getConstructor();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.getJSType();    	non-compiled	[CE]  ';'  expected	60	None	replace
264	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaredTypes();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaredTypes();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaredTypes();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.getJSType();    	non-compiled	[CE]  ';'  expected	60	None	replace
265	[BUG]  [BUGGY]  return  n.evaluate(scope,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  type);	  return    n.evaluate(scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
266	[BUG]  [BUGGY]  return  n.evaluate(scope,  operationScope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  operationScope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  operationScope);	  return    n.evaluate(scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
267	[BUG]  [BUGGY]  return  n.evaluate(scope,  constructor);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  constructor);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  constructor);	  return    n.evaluate(scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
268	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
269	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
270	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
271	[BUG]  [BUGGY]  return  type.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
272	[BUG]  [BUGGY]  return  arg.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  arg.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  arg.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
273	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
274	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined(),  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined(),  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByNotNullOrUndefined(),  n);	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
275	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined(),  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByNotNullOrUndefined(),  type);	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
276	[BUG]  [BUGGY]  return  n.getInstanceType().restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getInstanceType().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getInstanceType().restrictByNotNullOrUndefined();	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
277	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined(),  type;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined(),  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByNotNullOrUndefined(),  type;	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
278	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  type.equals(n.getJSType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  type.equals(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  type.equals(n.getJSType());	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
279	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  n.setJSType(type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  n.setJSType(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  n.setJSType(type);	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
280	[BUG]  [BUGGY]  return  scope  ==  null  &&  scope.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  &&  scope.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  &&  scope.getType()!=  Token.FUNCTION;	  return    scope    ==    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	24	None	replace
281	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	102	None	replace
282	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  n);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	102	None	replace
283	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  scope);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	102	None	replace
284	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  type);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	102	None	replace
285	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.cloneTree();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.cloneTree();	  return    scope!=    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	50	None	replace
286	[BUG]  [BUGGY]  return  scope  >=  null?  null  :  scope.clone();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  >=  null?  null  :  scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  >=  null?  null  :  scope.clone();	  return    scope!=    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	50	None	replace
287	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_TYPE,  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_TYPE,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NO_TYPE,  type);	  return    scope.getNativeType(JSTypeNative.NO_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
288	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_TYPE,  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_TYPE,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NO_TYPE,  n);	  return    scope.getNativeType(JSTypeNative.NO_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
289	[BUG]  [BUGGY]  return  n.getNativeType(JSTypeNative.NO_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getNativeType(JSTypeNative.NO_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getNativeType(JSTypeNative.NO_TYPE);	  return    scope.getNativeType(JSTypeNative.NO_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
290	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_TYPE)+  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_TYPE)+  1;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NO_TYPE)+  1;	  return    scope.getNativeType(JSTypeNative.NO_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
291	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)arg    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	18	None	replace
292	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.clone();    	non-compiled	[CE]  ';'  expected	76	None	replace
293	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)type.clone();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)type.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)type.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.clone();    	non-compiled	[CE]  ';'  expected	76	None	replace
294	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.clone();    	non-compiled	[CE]  ';'  expected	76	None	replace
295	[BUG]  [BUGGY]  return  constructorType!=  null?  scope  :  type;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType!=  null?  scope  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType!=  null?  scope  :  type;	  return    type!=    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	92	None	replace
296	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  constructorType;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  constructorType;	  return    type!=    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	92	None	replace
297	[BUG]  [BUGGY]  return  scope!=  null?  constructorType  :  type;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  constructorType  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  constructorType  :  type;	  return    type!=    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	92	None	replace
298	[BUG]  [BUGGY]  return  scope!=  null?  type  :  constructorType;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  type  :  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  type  :  constructorType;	  return    type!=    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	92	None	replace
299	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
300	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
301	[BUG]  [BUGGY]  if(ct!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
302	[BUG]  [BUGGY]  if(ct!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  n.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  n.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  n.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
303	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
304	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  scope.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  scope.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  scope.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
305	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  type);	  return    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	15	None	replace
306	[BUG]  [BUGGY]  return  n.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	15	None	replace
307	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.OBJECT_TYPE,  n);	  return    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	15	None	replace
308	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope  :  n.getJSType();	  return    n.getType()    ==    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	38	None	replace
309	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME?  arg  :  n;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME?  arg  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME?  arg  :  n;	  return    n.getType()    ==    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	38	None	replace
310	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n.cloneTree();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n.cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope  :  n.cloneTree();	  return    n.getType()    ==    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	38	None	replace
311	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n.toString();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope  :  n.toString();	  return    n.getType()    ==    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	38	None	replace
312	[BUG]  [BUGGY]  for(JSType  type  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  type.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  type  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  type.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  type  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  type.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(type!=    null)    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	33	None	replace
313	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(type!=    null)    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	33	None	replace
314	[BUG]  [BUGGY]  for(JSType  ct  :  arg.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  arg.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  arg.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(type!=    null)    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	33	None	replace
315	[BUG]  [BUGGY]  For(JSType  ct  :  arg.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  arg.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  arg.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(type!=    null)    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	33	None	replace
316	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  if(type  ==  null)  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSTypes())  {  if(type  ==  null)  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSTypes())  {  if(type  ==  null)  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(type!=    null)    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	33	None	replace
317	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(type  ==  null)  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(type  ==  null)  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  if(type  ==  null)  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(type!=    null)    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	33	None	replace
318	[BUG]  [BUGGY]  return  n.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getConstructor();	  return    scope.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
319	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(arg.getJSType(),  n);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    n);    	non-compiled	[CE]  ';'  expected	103	None	replace
320	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(arg.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(arg.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcome(arg.getJSType());	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
321	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(arg.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(arg.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(arg.getJSType());	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
322	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(n.getJSType());	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
323	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  type);	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
324	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  scope);	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
325	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  type);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  type);	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
326	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getParameterType(0);    	non-compiled	[CE]  ';'  expected	117	None	replace
327	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getParameterType(0);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getParameterType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getParameterType(0);    	non-compiled	[CE]  ';'  expected	117	None	replace
328	[BUG]  [BUGGY]  return  scope.getFunctionScope(n,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getFunctionScope(n,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope(n,  type);	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
329	[BUG]  [BUGGY]  return  scope.getFunctionScope(n,  ct);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getFunctionScope(n,  ct);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope(n,  ct);	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
330	[BUG]  [BUGGY]  return  scope.getSyntacticScope(n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getSyntacticScope(n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getSyntacticScope(n);	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
331	[BUG]  [BUGGY]  return  scope.getFunctionScope(arg);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getFunctionScope(arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope(arg);	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
332	[BUG]  [BUGGY]  return  scope.getFunctionScope(n,  arg);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getFunctionScope(n,  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope(n,  arg);	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
333	[BUG]  [BUGGY]  return  scope.evaluate(n,  arg.cloneTree());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  arg.cloneTree());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  arg.cloneTree());	  return    scope.evaluate(n,    n);    	non-compiled	[CE]  ';'  expected	47	None	replace
334	[BUG]  [BUGGY]  return  scope.evaluate(n,  arg.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  arg.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  arg.getJSType());	  return    scope.evaluate(n,    n);    	non-compiled	[CE]  ';'  expected	47	None	replace
335	[BUG]  [BUGGY]  return  scope.evaluate(n,  arg.getType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  arg.getType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  arg.getType());	  return    scope.evaluate(n,    n);    	non-compiled	[CE]  ';'  expected	47	None	replace
336	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	16	None	replace
337	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n;	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	16	None	replace
338	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	16	None	replace
339	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
340	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
341	[BUG]  [BUGGY]  Constructor  <  Node>  constructor  =  arg.getConstructor();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Constructor  <  Node>  constructor  =  arg.getConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Constructor  <  Node>  constructor  =  arg.getConstructor();	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
342	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
343	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  type);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  type);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  type);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
344	[BUG]  [BUGGY]  return  type!=  null?  null  :  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?  null  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  null  :  type;	  return    type    ==    null?    null    :    type;    	non-compiled	[CE]  ';'  expected	95	None	replace
345	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  type;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  null  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  type;	  return    type    ==    null?    null    :    type;    	non-compiled	[CE]  ';'  expected	95	None	replace
346	[BUG]  [BUGGY]  return  type  ==  null?  null  :  type.toString();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null?  null  :  type.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  null  :  type.toString();	  return    type    ==    null?    null    :    type;    	non-compiled	[CE]  ';'  expected	95	None	replace
347	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  n;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  n;	  return    type    ==    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	11	None	replace
348	[BUG]  [BUGGY]  return  scope  ==  null?  type  :  n;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  type  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  type  :  n;	  return    type    ==    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	11	None	replace
349	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)arg    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	71	None	replace
350	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getParent();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getParent();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getParent();	  return    scope    instanceof    FunctionType?(FunctionType)arg    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	71	None	replace
351	[BUG]  [BUGGY]  return  scope.evaluate(arg,  constructor);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(arg,  constructor);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(arg,  constructor);	  return    scope.evaluate(n,    constructor);    	non-compiled	[CE]  ';'  expected	97	None	replace
352	[BUG]  [BUGGY]  return  scope.evaluate(constructor,  n);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(constructor,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(constructor,  n);	  return    scope.evaluate(n,    constructor);    	non-compiled	[CE]  ';'  expected	97	None	replace
353	[BUG]  [BUGGY]  return  constructor.evaluate(scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructor.evaluate(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructor.evaluate(scope);	  return    scope.evaluate(n,    constructor);    	non-compiled	[CE]  ';'  expected	97	None	replace
354	[BUG]  [BUGGY]  return  scope.evaluate(n,  constructor,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  constructor,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  constructor,  type);	  return    scope.evaluate(n,    constructor);    	non-compiled	[CE]  ';'  expected	97	None	replace
355	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getConstructor();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getConstructor();    	non-compiled	[CE]  ';'  expected	73	None	replace
356	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getScope();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getConstructor();    	non-compiled	[CE]  ';'  expected	73	None	replace
357	[BUG]  [BUGGY]  return  type!=  null?   "null "  :  type;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?   "null "  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?   "null "  :  type;	  return    type    ==    null?   "null   "    :    type;    	non-compiled	[CE]  ';'  expected	94	None	replace
358	[BUG]  [BUGGY]  return  scope  ==  null?   "null "  :  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?   "null "  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?   "null "  :  type;	  return    type    ==    null?   "null   "    :    type;    	non-compiled	[CE]  ';'  expected	94	None	replace
359	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	62	None	replace
360	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getParent();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getParent();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getParent();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	62	None	replace
361	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME?  null  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME?  null  :  n.getJSType();	  return    n.getType()    ==    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	39	None	replace
362	[BUG]  [BUGGY]  return  arg.getType()  ==  Token.NAME?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  arg.getType()  ==  Token.NAME?  null  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  arg.getType()  ==  Token.NAME?  null  :  n.getJSType();	  return    n.getType()    ==    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	39	None	replace
363	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  type  :  n.getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  type  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  type  :  n.getJSType();	  return    n.getType()    ==    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	39	None	replace
364	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getNext();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getNext();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getNext();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getParent();    	non-compiled	[CE]  ';'  expected	61	None	replace
365	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getLastChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getLastChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getLastChild();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getParent();    	non-compiled	[CE]  ';'  expected	61	None	replace
366	[BUG]  [BUGGY]  return  scope.toBooleanOutcome();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toBooleanOutcome();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toBooleanOutcome();	  return    scope.toFront();    	non-compiled	[CE]  ';'  expected	118	None	replace
367	[BUG]  [BUGGY]  return  scope.toString();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toString();	  return    scope.toFront();    	non-compiled	[CE]  ';'  expected	118	None	replace
368	[BUG]  [BUGGY]  return  scope.toFront()  &&  type.equals(n.getJSType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toFront()  &&  type.equals(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toFront()  &&  type.equals(n.getJSType());	  return    scope.toFront();    	non-compiled	[CE]  ';'  expected	118	None	replace
369	[BUG]  [BUGGY]  return  scope.toBooleanOutcomes();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toBooleanOutcomes();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toBooleanOutcomes();	  return    scope.toFront();    	non-compiled	[CE]  ';'  expected	118	None	replace
370	[BUG]  [BUGGY]  return  n.toFront();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.toFront();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.toFront();	  return    scope.toFront();    	non-compiled	[CE]  ';'  expected	118	None	replace
371	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  n  :  ct.getConstructors())  {  type  =  n.getInstanceType();  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  n  :  ct.getConstructors())  {  type  =  n.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  n  :  ct.getConstructors())  {  type  =  n.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
372	[BUG]  [BUGGY]  For(FunctionType  ct  :  arg.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  arg.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  arg.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
373	[BUG]  [BUGGY]  For(FunctionType  ct  :  scope.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  scope.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  scope.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
374	[BUG]  [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  scope.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  scope.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  scope.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
375	[BUG]  [BUGGY]  return  scope.getType()!=  Token.NAME?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()!=  Token.NAME?  null  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()!=  Token.NAME?  null  :  n.getJSType();	  return    n.getType()!=    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
376	[BUG]  [BUGGY]  return  arg.getType()!=  Token.NAME?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  arg.getType()!=  Token.NAME?  null  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  arg.getType()!=  Token.NAME?  null  :  n.getJSType();	  return    n.getType()!=    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
377	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.FUNCTION?  n  :  n;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.FUNCTION?  n  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.FUNCTION?  n  :  n;	  return    n.getType()    ==    Token.FUNCTION?    scope    :    n;    	non-compiled	[CE]  ';'  expected	42	None	replace
378	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  scope  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.FUNCTION?  scope  :  n.getJSType();	  return    n.getType()    ==    Token.FUNCTION?    scope    :    n;    	non-compiled	[CE]  ';'  expected	42	None	replace
379	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.FUNCTION?  arg  :  n;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.FUNCTION?  arg  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.FUNCTION?  arg  :  n;	  return    n.getType()    ==    Token.FUNCTION?    scope    :    n;    	non-compiled	[CE]  ';'  expected	42	None	replace
380	[BUG]  [BUGGY]  return  scope.evaluate(ct,  n);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(ct,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(ct,  n);	  return    scope.evaluate(n,    ct);    	non-compiled	[CE]  ';'  expected	44	None	replace
381	[BUG]  [BUGGY]  return  scope.evaluate(arg,  ct);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(arg,  ct);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(arg,  ct);	  return    scope.evaluate(n,    ct);    	non-compiled	[CE]  ';'  expected	44	None	replace
382	[BUG]  [BUGGY]  return  scope.evaluate(n,  ct,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  ct,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  ct,  type);	  return    scope.evaluate(n,    ct);    	non-compiled	[CE]  ';'  expected	44	None	replace
383	[BUG]  [BUGGY]  return  n.evaluate(scope,  ct);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  ct);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  ct);	  return    scope.evaluate(n,    ct);    	non-compiled	[CE]  ';'  expected	44	None	replace
384	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
385	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  scope.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
386	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  context.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  context.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  context.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
387	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getParent();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getParent();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getParent();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
388	[BUG]  [BUGGY]  return  n.getSyntacticScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getSyntacticScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getSyntacticScope();	  return    n.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
389	[BUG]  [BUGGY]  return  n.getFunctionScope(scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getFunctionScope(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getFunctionScope(scope);	  return    n.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
390	[BUG]  [BUGGY]  return  n.getScope();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getScope();	  return    n.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
391	[BUG]  [BUGGY]  return  scope!=  null  ||  type.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  ||  type.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  ||  type.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    type.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	104	None	replace
392	[BUG]  [BUGGY]  return  type!=  null  &&  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null  &&  scope.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null  &&  scope.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    type.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	104	None	replace
393	[BUG]  [BUGGY]  return  scope  ==  null  &&  type.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  &&  type.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  &&  type.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    type.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	104	None	replace
394	[BUG]  [BUGGY]  return  scope  ==  null  ||  type.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  ||  type.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  ||  type.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    type.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	104	None	replace
395	[BUG]  [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(UNKNOWN_TYPE,  type);	  return    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
396	[BUG]  [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(UNKNOWN_TYPE,  n);	  return    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
397	[BUG]  [BUGGY]  return  n.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getNativeType(UNKNOWN_TYPE);	  return    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
398	[BUG]  [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE)?  type  :  FUNCTION_LITERAL_UNDEFINED_THIS;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE)?  type  :  FUNCTION_LITERAL_UNDEFINED_THIS;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(UNKNOWN_TYPE)?  type  :  FUNCTION_LITERAL_UNDEFINED_THIS;	  return    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
399	[BUG]  [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(UNKNOWN_TYPE)+  1;	  return    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
400	[BUG]  [BUGGY]  return  scope.getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(NO_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(NO_TYPE);	  return    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
401	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);	  return    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	12	None	replace
402	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE,  n);	  return    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	12	None	replace
403	[BUG]  [BUGGY]  return  n.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	12	None	replace
404	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;	  return    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	12	None	replace
405	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	12	None	replace
406	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)arg,  scope.clone();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)arg,  scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)arg,  scope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n,    scope.clone();    	non-compiled	[CE]  ';'  expected	64	None	replace
407	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.getConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.getConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.getConstructor();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n,    scope.clone();    	non-compiled	[CE]  ';'  expected	64	None	replace
408	[BUG]  [BUGGY]  return  scope  ==  null  ||  scope.getType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  ||  scope.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  ||  scope.getType()!=  Token.FUNCTION;	  return    scope    ==    null    ||    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	27	None	replace
409	[BUG]  [BUGGY]  For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
410	[BUG]  [BUGGY]  For(FunctionType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
411	[BUG]  [BUGGY]  For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  ct);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
412	[BUG]  [BUGGY]  For(FunctionType  ct  :  scope.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  scope.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  scope.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
413	[BUG]  [BUGGY]  Constructor  <?>  scope  =  traverse(ct,  scope);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Constructor  <?>  scope  =  traverse(ct,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Constructor  <?>  scope  =  traverse(ct,  scope);	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
414	[BUG]  [BUGGY]  For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  arg);  }  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  arg);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(scope,  arg);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
415	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  n;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  n;	  return    type!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	10	None	replace
416	[BUG]  [BUGGY]  return  scope!=  null?  type  :  n;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  type  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  type  :  n;	  return    type!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	10	None	replace
417	[BUG]  [BUGGY]  For(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  For(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	For(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
418	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
419	[BUG]  [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
420	[BUG]  [BUGGY]  if(ct!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
421	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  n  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  n  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  n  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
422	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  n  :  n.getJSType())  {  type  =  n.getInstanceType();  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  n  :  n.getJSType())  {  type  =  n.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  n  :  n.getJSType())  {  type  =  n.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
423	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
424	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
425	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  scope.getJSType().equals(n.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  scope.getJSType().equals(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  scope.getJSType().equals(n.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
426	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(scope.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getJSType().equals(scope.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
427	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()!=  Token.NAME  &&  n.getJSType().equals(scope.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
428	[BUG]  [BUGGY]  return  scope.getType()!=  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()!=  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()!=  Token.NAME  &&  n.getJSType().equals(scope.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
429	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType(),  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType(),  type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
430	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.NULL_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getNativeType(JSTypeNative.NULL_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getNativeType(JSTypeNative.NULL_TYPE);	  return    scope.getNativeType(JSTypeNative.NULL_TYPE);    	non-compiled	[CE]  ';'  expected	96	None	replace
431	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
432	[BUG]  [BUGGY]  return  type.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getNativeType(UNKNOWN_TYPE);	  return    scope.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	3	None	replace
433	[BUG]  [BUGGY]  return  type!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	79	None	replace
434	[BUG]  [BUGGY]  return  scope!=  null?  type  :  new  BooleanOutcome(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  type  :  new  BooleanOutcome(n.getJSType(),  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  type  :  new  BooleanOutcome(n.getJSType(),  scope);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	79	None	replace
435	[BUG]  [BUGGY]  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
436	[BUG]  [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
437	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  ct.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
438	[BUG]  [BUGGY]  for(FunctionType  ct  :  constructor.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  constructor.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  constructor.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
439	[BUG]  [BUGGY]  for(FunctionType  ct  :  arg.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  arg.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  arg.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
440	[BUG]  [BUGGY]  return  n.evaluate(scope,  functionScope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  functionScope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  functionScope);	  return    n.evaluate(scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
441	[BUG]  [BUGGY]  return  n.evaluate(scope,  output);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  output);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  output);	  return    n.evaluate(scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
442	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  constructor.getJSType()  ==  type;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  &&  constructor.getJSType()  ==  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  constructor.getJSType()  ==  type;	  return    scope.cloneTree()    &&    n.getJSType()    ==    type;    	non-compiled	[CE]  ';'  expected	121	None	replace
443	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(constructorType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(constructorType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(constructorType);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
444	[BUG]  [BUGGY]  return  constructor.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructor.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructor.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
445	[BUG]  [BUGGY]  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
446	[BUG]  [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
447	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType()):  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType()):  new  BooleanOutcome(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(n.getJSType()):  new  BooleanOutcome(n.getJSType());	  return    n!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	58	None	replace
448	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  null  :  new  BooleanOutcome(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  new  BooleanOutcome(n.getJSType());	  return    n!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	58	None	replace
449	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME?  null  :  scope.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME?  null  :  scope.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME?  null  :  scope.getJSType();	  return    n.getType()    ==    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	39	None	replace
450	[BUG]  [BUGGY]  return  constructorType  ==  null?  type  :  scope;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType  ==  null?  type  :  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType  ==  null?  type  :  scope;	  return    type    ==    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	93	None	replace
451	[BUG]  [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.restrictByNotNullOrUndefined();	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    type;    	non-compiled	[CE]  ';'  expected	105	None	replace
452	[BUG]  [BUGGY]  return  type!=  null?  getNativeType(UNKNOWN_TYPE):  type.toString();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?  getNativeType(UNKNOWN_TYPE):  type.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  getNativeType(UNKNOWN_TYPE):  type.toString();	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    type;    	non-compiled	[CE]  ';'  expected	105	None	replace
453	[BUG]  [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
454	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
455	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
456	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  arg.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  arg.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  arg.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
457	[BUG]  [BUGGY]  for(JSType  ct  :  arg.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  arg.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  arg.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
458	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.getType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.getType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.getType();	  return    scope!=    null?    null    :    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	25	None	replace
459	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  scope.getType()  {  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  null  :  scope.getType()  {  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  scope.getType()  {  Token.FUNCTION;	  return    scope!=    null?    null    :    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	25	None	replace
460	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.getType()  +  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.getType()  +  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.getType()  +  Token.FUNCTION;	  return    scope!=    null?    null    :    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	25	None	replace
461	[BUG]  [BUGGY]  return  scope!=  null?  constructorType  :  n;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  constructorType  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  constructorType  :  n;	  return    type!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	10	None	replace
462	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair(scope):  new  BooleanOutcomePair(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair(scope):  new  BooleanOutcomePair(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcomePair(scope):  new  BooleanOutcomePair(scope);	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
463	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair(scope):  new  BooleanOutcomePair(n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair(scope):  new  BooleanOutcomePair(n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcomePair(scope):  new  BooleanOutcomePair(n);	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
464	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope  :  null;	  return    n.getType()    ==    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	38	None	replace
465	[BUG]  [BUGGY]  return  functionScope.getFunctionScope(n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  functionScope.getFunctionScope(n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  functionScope.getFunctionScope(n);	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
466	[BUG]  [BUGGY]  return  scope.getFunctionScope(n,  false);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getFunctionScope(n,  false);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope(n,  false);	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
467	[BUG]  [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
468	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
469	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  constructor.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  constructor.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  constructor.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
470	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  type  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  type  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  type  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
471	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  scope.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  scope.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  scope.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
472	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
473	[BUG]  [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
474	[BUG]  [BUGGY]  if(n!=  null)  {  FunctionType  ct  =  n.getJSTypes();  for(FunctionType  ct  :  ct.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  FunctionType  ct  =  n.getJSTypes();  for(FunctionType  ct  :  ct.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  FunctionType  ct  =  n.getJSTypes();  for(FunctionType  ct  :  ct.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
475	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  ct.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
476	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
477	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)arg    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	71	None	replace
478	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  arg.getJSType().equals(scope.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  arg.getJSType().equals(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  arg.getJSType().equals(scope.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
479	[BUG]  [BUGGY]  return  type  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
480	[BUG]  [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	102	None	replace
481	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  false);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  false);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg,  false);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	102	None	replace
482	[BUG]  [BUGGY]  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
483	[BUG]  [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
484	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  ct.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
485	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  arg.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  arg.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  arg.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
486	[BUG]  [BUGGY]  for(FunctionType  ct  :  arg.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  arg.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  arg.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
487	[BUG]  [BUGGY]  return  type!=  null?  null  :  type.toString();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?  null  :  type.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  null  :  type.toString();	  return    type    ==    null?    null    :    type;    	non-compiled	[CE]  ';'  expected	95	None	replace
488	[BUG]  [BUGGY]  return  n.cloneBoolean();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.cloneBoolean();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneBoolean();	  return    scope.cloneBoolean();    	non-compiled	[CE]  ';'  expected	51	None	replace
489	[BUG]  [BUGGY]  return  constructorType  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();	  return    type    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	84	None	replace
490	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getJSType();	  return    type    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	84	None	replace
491	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined(n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined(n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByNotNullOrUndefined(n);	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
492	[BUG]  [BUGGY]  return  scope.getInstanceType().declareJSType(type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().declareJSType(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().declareJSType(type);	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
493	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByUndefined();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().restrictByUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByUndefined();	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
494	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)arg    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	18	None	replace
495	[BUG]  [BUGGY]  return  scope.cloneTree(n,  constructor);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(n,  constructor);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(n,  constructor);	  return    scope.cloneTree(n);    	non-compiled	[CE]  ';'  expected	20	None	replace
496	[BUG]  [BUGGY]  NeighborConstructor  <  Node>  n  =  constructor.getNeighborConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  NeighborConstructor  <  Node>  n  =  constructor.getNeighborConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	NeighborConstructor  <  Node>  n  =  constructor.getNeighborConstructor();	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
497	[BUG]  [BUGGY]  NeighborConstructor  <  Node>  arg  =  constructor.getNeighborConstructor();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  NeighborConstructor  <  Node>  arg  =  constructor.getNeighborConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	NeighborConstructor  <  Node>  arg  =  constructor.getNeighborConstructor();	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
498	[BUG]  [BUGGY]  Constructor  <  Node>  ct  =  constructor.getCurrentNodeType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Constructor  <  Node>  ct  =  constructor.getCurrentNodeType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Constructor  <  Node>  ct  =  constructor.getCurrentNodeType();	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
499	[BUG]  [BUGGY]  Constructor  <  Node>  ct  =  constructor.getConstructor();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Constructor  <  Node>  ct  =  constructor.getConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Constructor  <  Node>  ct  =  constructor.getConstructor();	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
500	[BUG]  [BUGGY]  NeighborConstructor  <  Node>  arg  =  constructor.getNext();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  NeighborConstructor  <  Node>  arg  =  constructor.getNext();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	NeighborConstructor  <  Node>  arg  =  constructor.getNext();	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
501	[BUG]  [BUGGY]  Constructor  <  Node>  ct  =  constructor.getCurrentNode();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Constructor  <  Node>  ct  =  constructor.getCurrentNode();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Constructor  <  Node>  ct  =  constructor.getCurrentNode();	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
503	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
504	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE));	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
505	[BUG]  [BUGGY]  n.setJSType(constructor);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(constructor);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(constructor);	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
506	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  scope);	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
507	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(scope.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcome(scope.getJSType());	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
508	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType()):  false;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType()):  false;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcome(n.getJSType()):  false;	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
509	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.toArray(new  FunctionType[scope.size()  ]);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.toArray(new  FunctionType[scope.size()  ]);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.toArray(new  FunctionType[scope.size()  ]);	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n,    scope.clone();    	non-compiled	[CE]  ';'  expected	64	None	replace
510	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  functionScope.clone();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  functionScope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  functionScope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n,    scope.clone();    	non-compiled	[CE]  ';'  expected	64	None	replace
511	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  type.clone();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  type.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  type.clone();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n,    scope.clone();    	non-compiled	[CE]  ';'  expected	64	None	replace
512	[BUG]  [BUGGY]  return  type!=  null  &&  type.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null  &&  type.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null  &&  type.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    type.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	104	None	replace
513	[BUG]  [BUGGY]  return  scope!=  null  &&  type.getJSType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  type.getJSType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  type.getJSType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    type.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	104	None	replace
514	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  scope):  new  BooleanOutcome(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  scope):  new  BooleanOutcome(n.getJSType(),  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(n.getJSType(),  scope):  new  BooleanOutcome(n.getJSType(),  scope);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	59	None	replace
515	[BUG]  [BUGGY]  NeighborConstructor  <  Node>  ct  =  constructor.getCurrentNode();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  NeighborConstructor  <  Node>  ct  =  constructor.getCurrentNode();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	NeighborConstructor  <  Node>  ct  =  constructor.getCurrentNode();	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
516	[BUG]  [BUGGY]  for(JSType  ct  :  constructor.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  constructor.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  constructor.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
517	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isInterface())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isInterface())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor()  ||  ct.isInterface())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
518	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getImplicitPrototype();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getImplicitPrototype();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getImplicitPrototype();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.getJSType();    	non-compiled	[CE]  ';'  expected	85	None	replace
519	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getParameterType(0);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getParameterType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.getJSType();    	non-compiled	[CE]  ';'  expected	85	None	replace
520	[BUG]  [BUGGY]  return  scope.evaluate(constructorType,  n);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(constructorType,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(constructorType,  n);	  return    scope.evaluate(n,    type);    	non-compiled	[CE]  ';'  expected	43	None	replace
521	[BUG]  [BUGGY]  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
522	[BUG]  [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
523	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
524	[BUG]  [BUGGY]  for(FunctionType  ct  :  constructor.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  constructor.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  constructor.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
525	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.clone();    	non-compiled	[CE]  ';'  expected	63	None	replace
526	[BUG]  [BUGGY]  return  n.getFunction();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getFunction();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getFunction();	  return    scope.getFunction();    	non-compiled	[CE]  ';'  expected	119	None	replace
527	[BUG]  [BUGGY]  return  scope.cloneSyntacticScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneSyntacticScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneSyntacticScope();	  return    scope.cloneChildren();    	non-compiled	[CE]  ';'  expected	81	None	replace
528	[BUG]  [BUGGY]  return  scope.cloneFunctionScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneFunctionScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneFunctionScope();	  return    scope.cloneChildren();    	non-compiled	[CE]  ';'  expected	81	None	replace
529	[BUG]  [BUGGY]  return  constructor.clone();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructor.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructor.clone();	  return    n.clone();    	non-compiled	[CE]  ';'  expected	52	None	replace
530	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    scope.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	15	None	replace
531	[BUG]  [BUGGY]  return  scope.getConstructor(n);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getConstructor(n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getConstructor(n);	  return    scope.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
532	[BUG]  [BUGGY]  return  constructorType!=  null?  type  :  scope;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType!=  null?  type  :  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType!=  null?  type  :  scope;	  return    type!=    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	92	None	replace
533	[BUG]  [BUGGY]  return  scope.getSyntacticScope(functionScope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getSyntacticScope(functionScope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getSyntacticScope(functionScope);	  return    scope.getSyntacticScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
534	[BUG]  [BUGGY]  return  n.getJSType(type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getJSType(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getJSType(type);	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
535	[BUG]  [BUGGY]  return  type.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getJSType();	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
536	[BUG]  [BUGGY]  return  n.getJSType(scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getJSType(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getJSType(scope);	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
537	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.FUNCTION?  scope  :  n;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.FUNCTION?  scope  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.FUNCTION?  scope  :  n;	  return    n.getType()    ==    Token.FUNCTION?    scope    :    n;    	non-compiled	[CE]  ';'  expected	42	None	replace
538	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  false);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  false);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  false);	  return    scope    ==    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	55	None	replace
539	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaredType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaredType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaredType();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.getJSType();    	non-compiled	[CE]  ';'  expected	60	None	replace
540	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getJavaType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getJavaType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getJavaType();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.getJSType();    	non-compiled	[CE]  ';'  expected	60	None	replace
541	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaringClass();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaringClass();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getDeclaringClass();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.getJSType();    	non-compiled	[CE]  ';'  expected	60	None	replace
542	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getNodeType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getNodeType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getNodeType();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.getJSType();    	non-compiled	[CE]  ';'  expected	60	None	replace
543	[BUG]  [BUGGY]  return  scope.cloneTree(),  constructor;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  constructor;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  constructor;	  return    scope.cloneTree(),    n;    	non-compiled	[CE]  ';'  expected	22	None	replace
544	[BUG]  [BUGGY]  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
545	[BUG]  [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
546	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
547	[BUG]  [BUGGY]  for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
548	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  ct.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  ct.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
549	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  type;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  type;	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n;    	non-compiled	[CE]  ';'  expected	65	None	replace
550	[BUG]  [BUGGY]  return  scope.toFront()  &&  n.getJSType()!=  type;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toFront()  &&  n.getJSType()!=  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toFront()  &&  n.getJSType()!=  type;	  return    scope.toFront();    	non-compiled	[CE]  ';'  expected	118	None	replace
551	[BUG]  [BUGGY]  return  scope.getType()!=  Token.NAME?  arg  :  n;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()!=  Token.NAME?  arg  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()!=  Token.NAME?  arg  :  n;	  return    n.getType()!=    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	40	None	replace
552	[BUG]  [BUGGY]  return  type!=  null?  scope  :  arg.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  null?  scope  :  arg.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  scope  :  arg.getJSType();	  return    scope!=    null?    scope    :    arg.getJSType();    	non-compiled	[CE]  ';'  expected	68	None	replace
553	[BUG]  [BUGGY]  return  scope!=  null?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  n.getJSType();	  return    n.getType()!=    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
554	[BUG]  [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
555	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  arg.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  arg.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  arg.getJSType())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
556	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  n  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  n  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  n  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
557	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  type  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  type  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  type  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
558	[BUG]  [BUGGY]  return  ct.evaluate(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  ct.evaluate(n,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  ct.evaluate(n,  scope);	  return    scope.evaluate(n,    ct);    	non-compiled	[CE]  ';'  expected	44	None	replace
559	[BUG]  [BUGGY]  return  ct.evaluate(scope,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  ct.evaluate(scope,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  ct.evaluate(scope,  n);	  return    scope.evaluate(n,    ct);    	non-compiled	[CE]  ';'  expected	44	None	replace
560	[BUG]  [BUGGY]  return  n!=  null?  scope  :  n.toString();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n!=  null?  scope  :  n.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  n.toString();	  return    n!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	98	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
562	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	Preconditions.checkState(arg!=  null  &&  arg.getType()  ==  Token.FUNCTION)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
564	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getParameterType(0);    	non-compiled	[CE]  ';'  expected	117	None	replace
565	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType(0);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType(0);	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getParameterType(0);    	non-compiled	[CE]  ';'  expected	117	None	replace
566	[BUG]  [BUGGY]  return  functionScope.getFunctionScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  functionScope.getFunctionScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  functionScope.getFunctionScope();	  return    n.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
567	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParameterType(0);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParameterType(0);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getParameterType(0);    	non-compiled	[CE]  ';'  expected	78	None	replace
568	[BUG]  [BUGGY]  return  functionScope.toFunctionScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  functionScope.toFunctionScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  functionScope.toFunctionScope();	  return    scope.toFunctionScope();    	non-compiled	[CE]  ';'  expected	80	None	replace
569	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getInstanceType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getInstanceType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getInstanceType();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getConstructor();    	non-compiled	[CE]  ';'  expected	73	None	replace
570	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getOwnerFunction();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getOwnerFunction();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getOwnerFunction();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getConstructor();    	non-compiled	[CE]  ';'  expected	73	None	replace
571	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  false);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  false);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType(),  false);	  return    scope!=    null?    scope    :    new    BooleanOutcome(scope.getJSType());    	non-compiled	[CE]  ';'  expected	57	None	replace
572	[BUG]  [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
573	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
574	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  constructor.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  constructor.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  constructor.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
575	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  arg  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  arg  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  arg  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
576	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  n.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  n.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  n  :  n.getJSTypes())  {  type  =  n.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
577	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  scope.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  scope.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  scope.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
578	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getNativeType(JSTypeNative.NO_OBJECT_TYPE);	  return    scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
579	[BUG]  [BUGGY]  return  scope.evaluate(constructor);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(constructor);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(constructor);	  return    scope.evaluate(scope);    	non-compiled	[CE]  ';'  expected	53	None	replace
580	[BUG]  [BUGGY]  return  scope.evaluate(functionScope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(functionScope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(functionScope);	  return    scope.evaluate(scope);    	non-compiled	[CE]  ';'  expected	53	None	replace
581	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getInstanceType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getInstanceType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getInstanceType()  >=  Token.FUNCTION;	  return    scope!=    null    &&    scope.getInstanceType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	75	None	replace
582	[BUG]  [BUGGY]  return  scope  ==  null  ||  arg.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  ||  arg.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  ||  arg.getType()  ==  Token.FUNCTION;	  return    scope    ==    null    ||    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	27	None	replace
583	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.NO_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.getNativeType(JSTypeNative.NO_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.getNativeType(JSTypeNative.NO_TYPE);	  return    scope.getNativeType(JSTypeNative.NO_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
584	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getNode();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getNode();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getNode();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	62	None	replace
585	[BUG]  [BUGGY]  return  scope.cloneTree(),  constructor);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  constructor);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  constructor);	  return    scope.cloneTree(),    n);    	non-compiled	[CE]  ';'  expected	21	None	replace
586	[BUG]  [BUGGY]  return  scope.cloneTree(),  n,  context);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree(),  n,  context);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n,  context);	  return    scope.cloneTree(),    n);    	non-compiled	[CE]  ';'  expected	21	None	replace
587	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  constructor.getJSType()!=  type;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  &&  constructor.getJSType()!=  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  constructor.getJSType()!=  type;	  return    scope.cloneTree()    &&    n.getJSType()!=    type;    	non-compiled	[CE]  ';'  expected	120	None	replace
588	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()!=  constructorType;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()!=  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  n.getJSType()!=  constructorType;	  return    scope.cloneTree()    &&    n.getJSType()!=    type;    	non-compiled	[CE]  ';'  expected	120	None	replace
589	[BUG]  [BUGGY]  if(type!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
590	[BUG]  [BUGGY]  if(type!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
591	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getJSType()!=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getJSType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getJSType()!=  Token.FUNCTION;	  return    scope!=    null    &&    scope.getJSType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	74	None	replace
592	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();	  return    n    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	72	None	replace
593	[BUG]  [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
594	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(constructorType)?  scope  :  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(constructorType)?  scope  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(constructorType)?  scope  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
595	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope)?  type  :  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope)?  type  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope)?  type  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
596	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.restrictByNotNullOrUndefined();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.clone();    	non-compiled	[CE]  ';'  expected	76	None	replace
597	[BUG]  [BUGGY]  return  scope  ==  null  &&  scope.getType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null  &&  scope.getType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  &&  scope.getType()  >=  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    >=    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	26	None	replace
598	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType(),  n);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    n);    	non-compiled	[CE]  ';'  expected	103	None	replace
599	[BUG]  [BUGGY]  return  scope.cloneChildren()  &&  n.getJSType()!=  type;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneChildren()  &&  n.getJSType()!=  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneChildren()  &&  n.getJSType()!=  type;	  return    scope.cloneChildren();    	non-compiled	[CE]  ';'  expected	81	None	replace
600	[BUG]  [BUGGY]  return  scope.cloneChildren()  &&  n.getJSType()  ==  type;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneChildren()  &&  n.getJSType()  ==  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneChildren()  &&  n.getJSType()  ==  type;	  return    scope.cloneChildren();    	non-compiled	[CE]  ';'  expected	81	None	replace
601	[BUG]  [BUGGY]  return  scope.evaluate(new  FlowScope(scope));  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(new  FlowScope(scope));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(new  FlowScope(scope));	  return    scope.evaluate(scope);    	non-compiled	[CE]  ';'  expected	53	None	replace
602	[BUG]  [BUGGY]  return  scope!=  null?  n  :  scope.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  n  :  scope.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  n  :  scope.getJSType();	  return    scope!=    null?    type    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	69	None	replace
603	[BUG]  [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
604	[BUG]  [BUGGY]  if(n.isJSType())  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n.isJSType())  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n.isJSType())  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    type    =    arg.getNext();    }    	non-compiled	[CE]  ';'  expected	91	None	replace
605	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  scope.getFunctionScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  null  :  scope.getFunctionScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  scope.getFunctionScope();	  return    scope    ==    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	83	None	replace
606	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  scope.toString();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  null  :  scope.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  scope.toString();	  return    scope    ==    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	83	None	replace
607	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.GETPROP;	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	19	None	replace
608	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.FUNCTION;	  return    n.cloneTree();    	non-compiled	[CE]  ';'  expected	19	None	replace
609	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getFirstChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getFirstChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getFirstChild();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getParent();    	non-compiled	[CE]  ';'  expected	61	None	replace
610	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
611	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
612	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
613	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isInstanceType())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isInstanceType())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isInstanceType())  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
614	[BUG]  [BUGGY]  type  =  ct.getJSType();  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  type  =  ct.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	type  =  ct.getJSType();	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
615	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  types  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  types  =  ct.getJSType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  types  =  ct.getJSType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getJSType();    }    	non-compiled	[CE]  ';'  expected	111	None	replace
616	[BUG]  [BUGGY]  return  scope.getOwnerScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getOwnerScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getOwnerScope();	  return    scope.getConstructorScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
617	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getInstanceType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getInstanceType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getInstanceType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(scope.getJSType());    	non-compiled	[CE]  ';'  expected	57	None	replace
618	[BUG]  [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
619	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  builder.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  builder.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  builder.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
620	[BUG]  [BUGGY]  return  scope!=  null?  n.getJSType()  :  n;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  n.getJSType()  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  n.getJSType()  :  n;	  return    n!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	67	None	replace
621	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  ct.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  ct.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  ct.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
622	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  types  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  types  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructors())  {  types  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
623	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  clazz.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  clazz.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  clazz.getConstructors())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
624	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructors())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	107	None	replace
625	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()!=  Token.NAME?  scope  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()!=  Token.NAME?  scope  :  n.getJSType();	  return    n.getType()!=    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	40	None	replace
626	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getConstructor()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getConstructor()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getConstructor()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getInstanceType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	75	None	replace
627	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getFunctionType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null  &&  scope.getFunctionType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getFunctionType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getInstanceType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	75	None	replace
628	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcomePair()  :  new  BooleanOutcomePair();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  new  BooleanOutcomePair()  :  new  BooleanOutcomePair();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcomePair()  :  new  BooleanOutcomePair();	  return    n!=    null?    scope    :    new    BooleanOutcomePair();    	non-compiled	[CE]  ';'  expected	100	None	replace
629	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair()  :  false;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcomePair()  :  false;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcomePair()  :  false;	  return    n!=    null?    scope    :    new    BooleanOutcomePair();    	non-compiled	[CE]  ';'  expected	100	None	replace
630	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(scope.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(scope.getJSType());	  return    scope    ==    null?    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	101	None	replace
631	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()!=  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()!=  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equalsIgnoreCase(type);    	non-compiled	[CE]  ';'  expected	114	None	replace
632	[BUG]  [BUGGY]  cope!=  null  &&  scope.isConstructor())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  cope!=  null  &&  scope.isConstructor())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	cope!=  null  &&  scope.isConstructor())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
633	[BUG]  [BUGGY]  cope!=  null  &&  scope.isConstructor())  {  scope  =  traverse(ct,  scope);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  cope!=  null  &&  scope.isConstructor())  {  scope  =  traverse(ct,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	cope!=  null  &&  scope.isConstructor())  {  scope  =  traverse(ct,  scope);	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
634	[BUG]  [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(n!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(n!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
635	[BUG]  [BUGGY]  cope!=  null  &&  scope.isInterface())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  cope!=  null  &&  scope.isInterface())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	cope!=  null  &&  scope.isInterface())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	34	None	replace
636	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n.getFirstChild();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    scope    :    n;    	non-compiled	[CE]  ';'  expected	38	None	replace
637	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getNativeType(JSTypeNative.NOT_OBJECT_TYPE);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NOT_OBJECT_TYPE);	  return    scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);    	non-compiled	[CE]  ';'  expected	14	None	replace
638	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n,  scope.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n,  scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n,  scope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)arg    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	18	None	replace
639	[BUG]  [BUGGY]  return  scope!=  null?  n  :  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  n  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  n  :  type;	  return    type!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	10	None	replace
640	[BUG]  [BUGGY]  if(type!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
641	[BUG]  [BUGGY]  if(type!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(JSType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	31	None	replace
642	[BUG]  [BUGGY]  return  constructorType  ==  null?  scope  :  constructorType;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType  ==  null?  scope  :  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType  ==  null?  scope  :  constructorType;	  return    type    ==    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	93	None	replace
643	[BUG]  [BUGGY]  return  constructorType  ==  null?  type  :  constructorType;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType  ==  null?  type  :  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType  ==  null?  type  :  constructorType;	  return    type    ==    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	93	None	replace
644	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(type);	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type);    	non-compiled	[CE]  ';'  expected	113	None	replace
645	[BUG]  [BUGGY]  return  constructor.evaluate(scope,  n);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructor.evaluate(scope,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructor.evaluate(scope,  n);	  return    scope.evaluate(n,    constructor);    	non-compiled	[CE]  ';'  expected	97	None	replace
646	[BUG]  [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
647	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
648	[BUG]  [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
649	[BUG]  [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
650	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	88	None	replace
651	[BUG]  [BUGGY]  return  type  ==  null?  null  :  type.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null?  null  :  type.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  null  :  type.restrictByNotNullOrUndefined();	  return    type    ==    null?    null    :    type;    	non-compiled	[CE]  ';'  expected	95	None	replace
652	[BUG]  [BUGGY]  return  type  ==  null?  null  :  type.evaluate(scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null?  null  :  type.evaluate(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  null  :  type.evaluate(scope);	  return    type    ==    null?    null    :    type;    	non-compiled	[CE]  ';'  expected	95	None	replace
653	[BUG]  [BUGGY]  return  scope.getType()!=  Token.NAME?  null  :  scope.getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getType()!=  Token.NAME?  null  :  scope.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType()!=  Token.NAME?  null  :  scope.getJSType();	  return    n.getType()!=    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
654	[BUG]  [BUGGY]  return  type!=  Token.NAME?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type!=  Token.NAME?  null  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  Token.NAME?  null  :  n.getJSType();	  return    n.getType()!=    Token.NAME?    null    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	41	None	replace
655	[BUG]  [BUGGY]  return  n.getInstanceType()!=  type;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getInstanceType()!=  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getInstanceType()!=  type;	  return    n.getInstanceType();    	non-compiled	[CE]  ';'  expected	82	None	replace
656	[BUG]  [BUGGY]  return  type  ==  null  &&  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null  &&  scope.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null  &&  scope.getType()  ==  Token.FUNCTION;	  return    scope    ==    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	24	None	replace
657	[BUG]  [BUGGY]  return  scope.toFunction();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toFunction();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toFunction();	  return    scope.getFunction();    	non-compiled	[CE]  ';'  expected	119	None	replace
658	[BUG]  [BUGGY]  return  scope.getScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getScope();	  return    scope.getFunction();    	non-compiled	[CE]  ';'  expected	119	None	replace
659	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(type)?  scope  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(type)?  scope  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(type)?  scope  :  null;	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(type)?    scope    :    null;    	non-compiled	[CE]  ';'  expected	116	None	replace
660	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.isConstructor())  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null  &&  scope.isConstructor())  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null  &&  scope.isConstructor())  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
661	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
662	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  clazz.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  clazz.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  clazz.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	112	None	replace
663	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n.clone();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n.clone();	  return    n.clone();    	non-compiled	[CE]  ';'  expected	52	None	replace
664	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.toString()  :  n.clone();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.toString()  :  n.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope.toString()  :  n.clone();	  return    n.clone();    	non-compiled	[CE]  ';'  expected	52	None	replace
665	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n;	  return    n.clone();    	non-compiled	[CE]  ';'  expected	52	None	replace
666	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n.cloneTree();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n.cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope.cloneTree()  :  n.cloneTree();	  return    n.clone();    	non-compiled	[CE]  ';'  expected	52	None	replace
667	[BUG]  [BUGGY]  return  n.toString();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.toString();	  return    scope.toFront();    	non-compiled	[CE]  ';'  expected	118	None	replace
668	[BUG]  [BUGGY]  return  scope.toBoolean();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.toBoolean();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toBoolean();	  return    scope.toFront();    	non-compiled	[CE]  ';'  expected	118	None	replace
669	[BUG]  [BUGGY]  n.setJSType(constructorType(type));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(constructorType(type));  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(constructorType(type));	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
670	[BUG]  [BUGGY]  n.setJSType(constructorType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  n.setJSType(constructorType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(constructorType());	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	29	None	replace
671	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getDeclaringClass();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getDeclaringClass();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getDeclaringClass();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getConstructor();    	non-compiled	[CE]  ';'  expected	73	None	replace
672	[BUG]  [BUGGY]  return  scope!=  null?  n  :  new  BooleanOutcomePair(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  n  :  new  BooleanOutcomePair(scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  n  :  new  BooleanOutcomePair(scope);	  return    n!=    null?    scope    :    new    BooleanOutcomePair(scope);    	non-compiled	[CE]  ';'  expected	99	None	replace
673	[BUG]  [BUGGY]  return  scope  >>  null  &&  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  >>  null  &&  scope.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  >>  null  &&  scope.getType()  ==  Token.FUNCTION;	  return    scope!=    null    ||    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	23	None	replace
674	[BUG]  [BUGGY]  return  n!=  null?  scope  :  n.cloneTree();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n!=  null?  scope  :  n.cloneTree();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  n.cloneTree();	  return    n!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	98	None	replace
675	[BUG]  [BUGGY]  return  n!=  null?  scope  :  n.getFirstChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n!=  null?  scope  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  n.getFirstChild();	  return    n!=    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	98	None	replace
676	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  arg);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  arg);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcome(n.getJSType(),  arg);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType(),    arg);    	non-compiled	[CE]  ';'  expected	102	None	replace
677	[BUG]  [BUGGY]  return  scope.evaluate(type,  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(type,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(type,  n);	  return    scope.evaluate(arg,    n);    	non-compiled	[CE]  ';'  expected	49	None	replace
678	[BUG]  [BUGGY]  return  type.evaluate(scope,  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type.evaluate(scope,  n);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type.evaluate(scope,  n);	  return    scope.evaluate(arg,    n);    	non-compiled	[CE]  ';'  expected	49	None	replace
679	[BUG]  [BUGGY]  return  scope  ==  null?  constructorType  :  n;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  constructorType  :  n;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  constructorType  :  n;	  return    type    ==    null?    scope    :    n;    	non-compiled	[CE]  ';'  expected	11	None	replace
680	[BUG]  [BUGGY]  return  constructorType!=  null?  scope  :  constructorType;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType!=  null?  scope  :  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType!=  null?  scope  :  constructorType;	  return    type!=    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	92	None	replace
681	[BUG]  [BUGGY]  return  constructorType!=  null?  type  :  constructorType;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType!=  null?  type  :  constructorType;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType!=  null?  type  :  constructorType;	  return    type!=    null?    scope    :    constructorType;    	non-compiled	[CE]  ';'  expected	92	None	replace
682	[BUG]  [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
683	[BUG]  [BUGGY]  if(type!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
684	[BUG]  [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
685	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.next())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	89	None	replace
686	[BUG]  [BUGGY]  if(type!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
687	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null  &&  scope.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null  &&  scope.isConstructor())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
688	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.isUnknownType())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null  &&  scope.isUnknownType())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null  &&  scope.isUnknownType())  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	32	None	replace
689	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  arg.getType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  arg.getType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  arg.getType();	  return    scope!=    null?    scope    :    arg.getJSType();    	non-compiled	[CE]  ';'  expected	68	None	replace
690	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  arg.getNext();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  arg.getNext();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  arg.getNext();	  return    scope!=    null?    scope    :    arg.getJSType();    	non-compiled	[CE]  ';'  expected	68	None	replace
691	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  arg.getFirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  scope  :  arg.getFirstChild();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  arg.getFirstChild();	  return    scope!=    null?    scope    :    arg.getJSType();    	non-compiled	[CE]  ';'  expected	68	None	replace
692	[BUG]  [BUGGY]  return  scope.cloneBoolean()?  BooleanUtils.TRUE  :  BooleanUtils.FALSE;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneBoolean()?  BooleanUtils.TRUE  :  BooleanUtils.FALSE;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneBoolean()?  BooleanUtils.TRUE  :  BooleanUtils.FALSE;	  return    scope.cloneBoolean();    	non-compiled	[CE]  ';'  expected	51	None	replace
693	[BUG]  [BUGGY]  return  scope.cloneBoolean()?  BooleanValues.TRUE  :  BooleanValues.FALSE;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneBoolean()?  BooleanValues.TRUE  :  BooleanValues.FALSE;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneBoolean()?  BooleanValues.TRUE  :  BooleanValues.FALSE;	  return    scope.cloneBoolean();    	non-compiled	[CE]  ';'  expected	51	None	replace
694	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType()  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType()  +  1);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType()  +  1);	  return    scope    ==    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	55	None	replace
695	[BUG]  [BUGGY]  return  scope  ==  null?  this  :  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  this  :  new  BooleanOutcome(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  this  :  new  BooleanOutcome(n.getJSType());	  return    scope    ==    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	55	None	replace
696	[BUG]  [BUGGY]  return  scope.getFunctionScope(n.getJSType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getFunctionScope(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope(n.getJSType());	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
697	[BUG]  [BUGGY]  return  scope.getFunctionScope(n,  null);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getFunctionScope(n,  null);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope(n,  null);	  return    scope.getFunctionScope(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
698	[BUG]  [BUGGY]  for(JSType  type  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  type.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  type  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  type.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  type  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  type.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
699	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isInterface())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isInterface())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  if(ct.isInterface())  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(ct.isConstructor())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	30	None	replace
700	[BUG]  [BUGGY]  for(JSType  ct  :  n.getConstructors())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  for(JSType  ct  :  n.getConstructors())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getConstructors())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }	  for(JSType    ct    :    n.getJSTypes())    {    if(type!=    null)    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	33	None	replace
701	[BUG]  [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type,  scope);	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    type;    	non-compiled	[CE]  ';'  expected	105	None	replace
702	[BUG]  [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.getReturnType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.getReturnType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type.getReturnType();	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    type;    	non-compiled	[CE]  ';'  expected	105	None	replace
703	[BUG]  [BUGGY]  return  scope!=  null?  new  BooleanOutcome(scope.getJSType()):  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  new  BooleanOutcome(scope.getJSType()):  new  BooleanOutcome(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  new  BooleanOutcome(scope.getJSType()):  new  BooleanOutcome(n.getJSType());	  return    n!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	58	None	replace
704	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getInstanceType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getInstanceType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getInstanceType();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.getJSType();    	non-compiled	[CE]  ';'  expected	85	None	replace
705	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getConstructor();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getConstructor();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)type.getJSType();    	non-compiled	[CE]  ';'  expected	85	None	replace
706	[BUG]  [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
707	[BUG]  [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
708	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
709	[BUG]  [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(arg!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(arg!=  null)  {  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg.getNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	86	None	replace
710	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()  ==  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()  ==  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  n.getJSType()  ==  null;	  return    scope.cloneTree()    &&    n.getJSType()    ==    type;    	non-compiled	[CE]  ';'  expected	121	None	replace
711	[BUG]  [BUGGY]  return  scope!=  null?  n.getJSType()  :  type;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  n.getJSType()  :  type;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  n.getJSType()  :  type;	  return    type!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	7	None	replace
712	[BUG]  [BUGGY]  return  scope.getInstanceType().isUnknownType()?  null  :  scope.getInstanceType().restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().isUnknownType()?  null  :  scope.getInstanceType().restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().isUnknownType()?  null  :  scope.getInstanceType().restrictByNotNullOrUndefined();	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
713	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  n.getJSType().equals(type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  n.getJSType().equals(type);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByNotNullOrUndefined()  &&  n.getJSType().equals(type);	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
714	[BUG]  [BUGGY]  return  scope.getInstanceType().toString();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceType().toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().toString();	  return    scope.getInstanceType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	37	None	replace
715	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.clonePair();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.clonePair();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.clonePair();	  return    scope!=    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	50	None	replace
716	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.cloneJSType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.cloneJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.cloneJSType();	  return    scope!=    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	50	None	replace
717	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.toString();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope!=  null?  null  :  scope.toString();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.toString();	  return    scope!=    null?    null    :    scope.clone();    	non-compiled	[CE]  ';'  expected	50	None	replace
718	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(scope.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().isSubtype(scope.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
719	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().isExported(scope.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().isExported(scope.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().isExported(scope.getJSType());	  return    n.getType()    ==    Token.NAME    &&    n.getJSType().equals(scope.getJSType());    	non-compiled	[CE]  ';'  expected	115	None	replace
720	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.functionScope.clone();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.functionScope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.functionScope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n,    scope.clone();    	non-compiled	[CE]  ';'  expected	64	None	replace
721	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.getParent();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.getParent();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.getParent();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n,    scope.clone();    	non-compiled	[CE]  ';'  expected	64	None	replace
722	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  scope.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  scope.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
723	[BUG]  [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
724	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getParent();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getParent();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getParent();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
725	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  builder.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  builder.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  builder.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	  if(scope!=    null)    {    for(Node    arg    =    constructor.getNext();    arg!=    null;    arg.hasNext())    {    scope    =    traverse(arg,    scope);    }    	non-compiled	[CE]  ';'  expected	90	None	replace
726	[BUG]  [BUGGY]  return  scope.getInstanceScope(n.getJSType());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getInstanceScope(n.getJSType());  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceScope(n.getJSType());	  return    scope.getInstanceScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
727	[BUG]  [BUGGY]  return  n.evaluate(scope,  compiler);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  compiler);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  compiler);	  return    n.evaluate(scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
728	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  type  :  n.getJSType())  {  scope  =  traverse(type,  scope);  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(scope!=  null)  {  for(JSType  type  :  n.getJSType())  {  scope  =  traverse(type,  scope);  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  type  :  n.getJSType())  {  scope  =  traverse(type,  scope);  }	  if(scope!=    null)    {    for(JSType    ct    :    n.getJSType())    {    scope    =    traverse(ct,    scope);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
729	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParent();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParent();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParent();	  return    n    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	70	None	replace
730	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getJSType()  :  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  n.getJSType()  :  null;	  return    n.getJSType();    	non-compiled	[CE]  ';'  expected	9	None	replace
731	[BUG]  [BUGGY]  return  scope.getDeclaredType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getDeclaredType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getDeclaredType();	  return    scope.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
732	[BUG]  [BUGGY]  return  scope.getOwnerFunction();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.getOwnerFunction();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getOwnerFunction();	  return    scope.getConstructor();    	non-compiled	[CE]  ';'  expected	36	None	replace
733	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)syntacticScope.clone();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)syntacticScope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)syntacticScope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.clone();    	non-compiled	[CE]  ';'  expected	63	None	replace
734	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getScope();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getScope();	  return    scope    instanceof    FunctionType?(FunctionType)n    :(FunctionType)scope.getJSType();    	non-compiled	[CE]  ';'  expected	60	None	replace
735	[BUG]  [BUGGY]  return  scope.evaluate(n,  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope.evaluate(n,  null);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  null);	  return    scope.evaluate(n,    n);    	non-compiled	[CE]  ';'  expected	47	None	replace
736	[BUG]  [BUGGY]  return  scope  ==  null?  constructorType  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  ==  null?  constructorType  :  n.getJSType();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  constructorType  :  n.getJSType();	  return    type    ==    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	8	None	replace
737	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope;	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n;    	non-compiled	[CE]  ';'  expected	65	None	replace
738	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
739	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  arg.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
740	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  clazz.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  clazz.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  clazz.getJSTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getJSTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	108	None	replace
741	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n,  scope.clone();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n,  scope.clone();  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n,  scope.clone();	  return    n    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	17	None	replace
742	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
743	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  ct.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
744	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  types  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  types  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  types  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
745	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getConstructorTypes())  {  type  =  n.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getConstructorTypes())  {  type  =  n.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  for(FunctionType  n  :  n.getConstructorTypes())  {  type  =  n.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
746	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  arg.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  arg.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  arg.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getConstructorTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	110	None	replace
747	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
748	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isInterface())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isInterface())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isInterface())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
749	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isInstanceType())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isInstanceType())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isInstanceType())  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
750	[BUG]  [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getParameterTypes();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getParameterTypes();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(ct!=  null  &&  ct.isConstructor())  {  FunctionType  ct  =  ct.getParameterTypes();  if(ct!=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
751	[BUG]  [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  ct.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  if(type!=  null)  {  for(FunctionType  ct  :  ct.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(type!=  null)  {  for(FunctionType  ct  :  ct.getParameterTypes())  {  type  =  ct.getInstanceType();  }	  if(scope!=    null)    {    for(FunctionType    ct    :    n.getParameterTypes())    {    type    =    ct.getInstanceType();    }    	non-compiled	[CE]  ';'  expected	109	None	replace
752	[BUG]  [BUGGY]  return  constructorType  ==  null?  getNativeType(UNKNOWN_TYPE):  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  constructorType  ==  null?  getNativeType(UNKNOWN_TYPE):  null;  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  constructorType  ==  null?  getNativeType(UNKNOWN_TYPE):  null;	  return    type    ==    null?    getNativeType(UNKNOWN_TYPE):    null;    	non-compiled	[CE]  ';'  expected	106	None	replace
753	[BUG]  [BUGGY]  return  n.evaluate(scope,  constructorType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }      [BUGGY]  return  n.evaluate(scope,  constructorType);  [BUGGY]      }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope,  constructorType);	  return    scope.evaluate(n,    type);    	non-compiled	[CE]  ';'  expected	43	None	replace
