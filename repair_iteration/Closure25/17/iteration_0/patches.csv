bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  type;  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  type;  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type;	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
2	[BUG]  [BUGGY]  return  scope.cloneTree();  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope.cloneTree();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
3	[BUG]  [BUGGY]  return  n;  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  n;  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n;	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
4	[BUG]  [BUGGY]  return  scope.getInstanceType();  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope.getInstanceType();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
5	[BUG]  [BUGGY]  return  scope.getFunctionScope();  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope.getFunctionScope();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
6	[BUG]  [BUGGY]  return  scope.getType();  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope.getType();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getType();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
7	[BUG]  [BUGGY]  return  scope.clone();  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope.clone();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.clone();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
8	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                  ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]    [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	  	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
9	[BUG]  [BUGGY]  return  scope.evaluate(n);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope.evaluate(n);  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n);	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
10	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope!=  null?  scope  :  n.getJSType();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  n.getJSType();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
11	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
12	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
13	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope!=  null  &&  scope.getType()  ==  Token.FUNCTION;  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getType()  ==  Token.FUNCTION;	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
14	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getJSType();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getJSType();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
15	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType());  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType());	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
16	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();  [BUGGY]  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();	return  scope;  	non-compiled	[CE]  ';'  expected	33	None	replace
