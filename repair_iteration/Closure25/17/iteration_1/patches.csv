bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  scope.getSyntacticScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getSyntacticScope();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getSyntacticScope();	  return    scope.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  return  scope.getConstructorScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getConstructorScope();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getConstructorScope();	  return    scope.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getNativeType(UNKNOWN_TYPE);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(UNKNOWN_TYPE);	  return    scope.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  return  scope.getFunctionScope(n);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getFunctionScope(n);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunctionScope(n);	  return    scope.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
5	[BUG]  [BUGGY]  return  n.getFunctionScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getFunctionScope();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getFunctionScope();	  return    scope.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
6	[BUG]  [BUGGY]  return  scope.getInstanceScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getInstanceScope();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceScope();	  return    scope.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
7	[BUG]  [BUGGY]  return  type!=  null?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type!=  null?  scope  :  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  scope  :  n.getJSType();	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
8	[BUG]  [BUGGY]  return  type  ==  null?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  ==  null?  scope  :  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  scope  :  n.getJSType();	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
9	[BUG]  [BUGGY]  return  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getJSType();	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  return  type!=  null?  scope  :  n;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type!=  null?  scope  :  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  scope  :  n;	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
11	[BUG]  [BUGGY]  return  type  ==  null?  scope  :  n;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  ==  null?  scope  :  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  scope  :  n;	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
12	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    scope.getType();    	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_TYPE);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NO_TYPE);	  return    scope.getType();    	non-compiled	[CE]  ';'  expected	6	None	replace
14	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NO_OBJECT_TYPE);	  return    scope.getType();    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    scope.getType();    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	12	None	replace
17	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	12	None	replace
18	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	12	None	replace
19	[BUG]  [BUGGY]  return  n.cloneTree();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.cloneTree();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.cloneTree();	  return    scope.cloneTree();    	non-compiled	[CE]  ';'  expected	2	None	replace
20	[BUG]  [BUGGY]  return  scope.cloneTree(n);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.cloneTree(n);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(n);	  return    scope.cloneTree();    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  return  scope.cloneTree(),  n);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.cloneTree(),  n);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n);	  return    scope.cloneTree();    	non-compiled	[CE]  ';'  expected	2	None	replace
22	[BUG]  [BUGGY]  return  scope.cloneTree(),  n;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.cloneTree(),  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree(),  n;	  return    scope.cloneTree();    	non-compiled	[CE]  ';'  expected	2	None	replace
23	[BUG]  [BUGGY]  return  scope!=  null  ||  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null  ||  scope.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  ||  scope.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
24	[BUG]  [BUGGY]  return  scope  ==  null  &&  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  ==  null  &&  scope.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  &&  scope.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
25	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  null  :  scope.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
26	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getType()  >=  Token.FUNCTION;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null  &&  scope.getType()  >=  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getType()  >=  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
27	[BUG]  [BUGGY]  return  scope  ==  null  ||  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  ==  null  ||  scope.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null  ||  scope.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
28	[BUG]  [BUGGY]  return  scope  >=  null  &&  scope.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  >=  null  &&  scope.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  >=  null  &&  scope.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
29	[BUG]  [BUGGY]  n.setJSType(type);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  n.setJSType(type);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	n.setJSType(type);	      	non-compiled	[CE]  ';'  expected	8	None	replace
30	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  if(ct.isConstructor())  {  type  =  ct.getInstanceType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
31	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
32	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  n.getJSType())  {  type  =  ct.getInstanceType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
33	[BUG]  [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  for(JSType  ct  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	for(JSType  ct  :  n.getJSTypes())  {  if(type!=  null)  {  type  =  ct.getInstanceType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
34	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
35	[BUG]  [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(JSType  ct  :  n.getJSType())  {  scope  =  traverse(ct,  scope);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
36	[BUG]  [BUGGY]  return  scope.getConstructor();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getConstructor();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getConstructor();	  return    scope.getInstanceType();    	non-compiled	[CE]  ';'  expected	4	None	replace
37	[BUG]  [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getInstanceType().restrictByNotNullOrUndefined();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getInstanceType().restrictByNotNullOrUndefined();	  return    scope.getInstanceType();    	non-compiled	[CE]  ';'  expected	4	None	replace
38	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  scope  :  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  scope  :  n;	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
39	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME?  null  :  n.getJSType();	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
40	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  scope  :  n;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()!=  Token.NAME?  scope  :  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()!=  Token.NAME?  scope  :  n;	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
41	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  null  :  n.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()!=  Token.NAME?  null  :  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()!=  Token.NAME?  null  :  n.getJSType();	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
42	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  scope  :  n;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()  ==  Token.FUNCTION?  scope  :  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.FUNCTION?  scope  :  n;	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
43	[BUG]  [BUGGY]  return  scope.evaluate(n,  type);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.evaluate(n,  type);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  type);	  return    scope.evaluate(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
44	[BUG]  [BUGGY]  return  scope.evaluate(n,  ct);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.evaluate(n,  ct);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  ct);	  return    scope.evaluate(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
45	[BUG]  [BUGGY]  return  scope.evaluate(n,  arg);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.evaluate(n,  arg);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  arg);	  return    scope.evaluate(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
46	[BUG]  [BUGGY]  return  n.evaluate(scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.evaluate(scope);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.evaluate(scope);	  return    scope.evaluate(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
47	[BUG]  [BUGGY]  return  scope.evaluate(n,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.evaluate(n,  n);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  n);	  return    scope.evaluate(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
48	[BUG]  [BUGGY]  return  scope.evaluate(scope,  n);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.evaluate(scope,  n);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope,  n);	  return    scope.evaluate(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
49	[BUG]  [BUGGY]  return  scope.evaluate(arg,  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.evaluate(arg,  n);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(arg,  n);	  return    scope.evaluate(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
50	[BUG]  [BUGGY]  return  scope!=  null?  null  :  scope.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  null  :  scope.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  null  :  scope.clone();	  return    scope.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
51	[BUG]  [BUGGY]  return  scope.cloneBoolean();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.cloneBoolean();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneBoolean();	  return    scope.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
52	[BUG]  [BUGGY]  return  n.clone();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.clone();	  return    scope.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
53	[BUG]  [BUGGY]  return  scope.evaluate(scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.evaluate(scope);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(scope);	  return    scope.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  return  scope.cloneType();  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.cloneType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneType();	  return    scope.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
55	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType());  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  new  BooleanOutcome(n.getJSType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
56	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType());  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(arg.getJSType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
57	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType());  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(scope.getJSType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
58	[BUG]  [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcome(n.getJSType());  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  new  BooleanOutcome(n.getJSType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
59	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  scope);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  scope);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
60	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	14	None	replace
61	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParent();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParent();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParent();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	14	None	replace
62	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)n.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	14	None	replace
63	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)scope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	16	None	replace
64	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.clone();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n,  scope.clone();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	16	None	replace
65	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n;	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	16	None	replace
66	[BUG]  [BUGGY]  return  scope  ==  null?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  ==  null?  scope  :  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  scope  :  n.getJSType();	  return    scope!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	10	None	replace
67	[BUG]  [BUGGY]  return  n!=  null?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n!=  null?  scope  :  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  n.getJSType();	  return    scope!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	10	None	replace
68	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  arg.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  scope  :  arg.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  arg.getJSType();	  return    scope!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	10	None	replace
69	[BUG]  [BUGGY]  return  scope!=  null?  type  :  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  type  :  n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  type  :  n.getJSType();	  return    scope!=    null?    scope    :    n.getJSType();    	non-compiled	[CE]  ';'  expected	10	None	replace
70	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	11	None	replace
71	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)arg  :(FunctionType)n.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	11	None	replace
72	[BUG]  [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	16	None	replace
73	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getConstructor();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getConstructor();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getConstructor();	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	16	None	replace
74	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getJSType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null  &&  scope.getJSType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getJSType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
75	[BUG]  [BUGGY]  return  scope!=  null  &&  scope.getInstanceType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null  &&  scope.getInstanceType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  scope.getInstanceType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
76	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.clone();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	12	None	replace
77	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.clone();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.clone();    	non-compiled	[CE]  ';'  expected	12	None	replace
78	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParameterType(0);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParameterType(0);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)scope  :(FunctionType)n.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)scope    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	14	None	replace
79	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  type);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
80	[BUG]  [BUGGY]  return  scope.toFunctionScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.toFunctionScope();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toFunctionScope();	  return    scope.getFunctionScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  return  scope.cloneChildren();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.cloneChildren();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneChildren();	  return    scope.cloneTree();    	non-compiled	[CE]  ';'  expected	2	None	replace
82	[BUG]  [BUGGY]  return  n.getInstanceType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getInstanceType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getInstanceType();	  return    scope.getInstanceType();    	non-compiled	[CE]  ';'  expected	4	None	replace
83	[BUG]  [BUGGY]  return  scope  ==  null?  null  :  scope.clone();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  ==  null?  null  :  scope.clone();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  null  :  scope.clone();	  return    scope.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
84	[BUG]  [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	11	None	replace
85	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getJSType();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)n  :(FunctionType)type.getJSType();	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	11	None	replace
86	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
87	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.getNext())  {  scope  =  traverse(arg,  scope);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
88	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
89	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.next())  {  scope  =  traverse(arg,  scope);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
90	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getNext();  arg!=  null;  arg.hasNext())  {  scope  =  traverse(arg,  scope);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
91	[BUG]  [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg.getNext())  {  type  =  arg.getNext();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
92	[BUG]  [BUGGY]  return  type!=  null?  scope  :  constructorType;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type!=  null?  scope  :  constructorType;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type!=  null?  scope  :  constructorType;	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
93	[BUG]  [BUGGY]  return  type  ==  null?  scope  :  constructorType;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  ==  null?  scope  :  constructorType;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  scope  :  constructorType;	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
94	[BUG]  [BUGGY]  return  type  ==  null? "null "  :  type;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  ==  null? "null "  :  type;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null? "null "  :  type;	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
95	[BUG]  [BUGGY]  return  type  ==  null?  null  :  type;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  ==  null?  null  :  type;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  null  :  type;	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
96	[BUG]  [BUGGY]  return  scope.getNativeType(JSTypeNative.NULL_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getNativeType(JSTypeNative.NULL_TYPE);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getNativeType(JSTypeNative.NULL_TYPE);	  return    scope.getType();    	non-compiled	[CE]  ';'  expected	6	None	replace
97	[BUG]  [BUGGY]  return  scope.evaluate(n,  constructor);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.evaluate(n,  constructor);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.evaluate(n,  constructor);	  return    scope.evaluate(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
98	[BUG]  [BUGGY]  return  n!=  null?  scope  :  n;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n!=  null?  scope  :  n;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  n;	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
99	[BUG]  [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcomePair(scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcomePair(scope);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  new  BooleanOutcomePair(scope);	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
100	[BUG]  [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcomePair();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n!=  null?  scope  :  new  BooleanOutcomePair();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n!=  null?  scope  :  new  BooleanOutcomePair();	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
101	[BUG]  [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  ==  null?  new  BooleanOutcome(n.getJSType());  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  ==  null?  new  BooleanOutcome(n.getJSType());	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
102	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  arg);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
103	[BUG]  [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  n);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null?  scope  :  new  BooleanOutcome(n.getJSType(),  n);	  return    scope!=    null?    scope    :    new    BooleanOutcome(n.getJSType());    	non-compiled	[CE]  ';'  expected	15	None	replace
104	[BUG]  [BUGGY]  return  scope!=  null  &&  type.getType()  ==  Token.FUNCTION;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope!=  null  &&  type.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope!=  null  &&  type.getType()  ==  Token.FUNCTION;	  return    scope!=    null    &&    scope.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	13	None	replace
105	[BUG]  [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  type;	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
106	[BUG]  [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  null;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  null;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  type  ==  null?  getNativeType(UNKNOWN_TYPE):  null;	  return    type;    	non-compiled	[CE]  ';'  expected	1	None	replace
107	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getInstanceType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
108	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  type  =  ct.getInstanceType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
109	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  n.getParameterTypes())  {  type  =  ct.getInstanceType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
110	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructorTypes())  {  type  =  ct.getInstanceType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
111	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  n.getConstructors())  {  type  =  ct.getJSType();  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
112	[BUG]  [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  if(scope!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	if(scope!=  null)  {  for(FunctionType  ct  :  n.getJSTypes())  {  scope  =  traverse(ct,  scope);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
113	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(type);	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
114	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equalsIgnoreCase(type);	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
115	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(scope.getJSType());	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
116	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getJSType().equals(type)?  scope  :  null;	  return    n;    	non-compiled	[CE]  ';'  expected	3	None	replace
117	[BUG]  [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope  instanceof  FunctionType?(FunctionType)type  :(FunctionType)n.getParameterType(0);	  return    scope    instanceof    FunctionType?(FunctionType)type    :(FunctionType)n.getJSType();    	non-compiled	[CE]  ';'  expected	11	None	replace
118	[BUG]  [BUGGY]  return  scope.toFront();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.toFront();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.toFront();	  return    scope.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
119	[BUG]  [BUGGY]  return  scope.getFunction();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.getFunction();  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.getFunction();	  return    scope.clone();    	non-compiled	[CE]  ';'  expected	7	None	replace
120	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()!=  type;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()!=  type;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  n.getJSType()!=  type;	  return    scope.cloneTree();    	non-compiled	[CE]  ';'  expected	2	None	replace
121	[BUG]  [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()  ==  type;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);  for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }    [BUGGY]  return  scope.cloneTree()  &&  n.getJSType()  ==  type;  [BUGGY]    }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1062	1062	1	replace	return  scope.cloneTree()  &&  n.getJSType()  ==  type;	  return    scope.cloneTree();    	non-compiled	[CE]  ';'  expected	2	None	replace
