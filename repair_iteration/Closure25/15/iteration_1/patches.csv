bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
5	[BUG]  [BUGGY]  n.removeChild(type);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.removeChild(type);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.removeChild(type);	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
6	[BUG]  [BUGGY]  n.addChildToFront(type);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.addChildToFront(type);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.addChildToFront(type);	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
7	[BUG]  [BUGGY]  n.removeChild(constructorType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.removeChild(constructorType);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.removeChild(constructorType);	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
8	[BUG]  [BUGGY]  n.setJSType(type.getInstanceType());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(type.getInstanceType());  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getInstanceType());	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  n.setJSType(ct.getConstructor());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(ct.getConstructor());  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getConstructor());	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
10	[BUG]  [BUGGY]  n.setJSType(ct.getConstructorType());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(ct.getConstructorType());  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getConstructorType());	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
11	[BUG]  [BUGGY]  n.setJSType(type.getConstructor());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(type.getConstructor());  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getConstructor());	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
12	[BUG]  [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getNativeType(UNKNOWN_TYPE));	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	4	None	replace
13	[BUG]  [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  1);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	4	None	replace
14	[BUG]  [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  type);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	4	None	replace
16	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
17	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  type);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
18	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
19	[BUG]  [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(CONSTRUCTOR_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
20	[BUG]  [BUGGY]  Node  constructor  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Node  constructor  =  n.getFirstChild();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getFirstChild();	      	non-compiled	[CE]  ';'  expected	6	None	replace
21	[BUG]  [BUGGY]  Constructor  constructor  =  ct.getConstructor();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Constructor  constructor  =  ct.getConstructor();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  ct.getConstructor();	      	non-compiled	[CE]  ';'  expected	6	None	replace
22	[BUG]  [BUGGY]  Constructor  constructor  =  n.getConstructor();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Constructor  constructor  =  n.getConstructor();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getConstructor();	      	non-compiled	[CE]  ';'  expected	6	None	replace
23	[BUG]  [BUGGY]  Scope  constructor  =  n.getScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Scope  constructor  =  n.getScope();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getScope();	      	non-compiled	[CE]  ';'  expected	6	None	replace
24	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  scope  =  traverse(n,  scope);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(n,  scope);	      	non-compiled	[CE]  ';'  expected	6	None	replace
25	[BUG]  [BUGGY]  JSType  constructorType  =  type.getConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  JSType  constructorType  =  type.getConstructor();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type.getConstructor();	      	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  Node  constructor  =  n.getNext();  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Node  constructor  =  n.getNext();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getNext();	      	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type));	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	9	None	replace
28	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	9	None	replace
29	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  1);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	9	None	replace
30	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	7	None	replace
31	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(STRING_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(STRING_TYPE));	  n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	7	None	replace
32	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));  }	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	1	None	replace
34	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	1	None	replace
35	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  n.setJSType(type);  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  n.setJSType(type);  }	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	1	None	replace
36	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	1	None	replace
37	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	1	None	replace
38	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	1	None	replace
39	[BUG]  [BUGGY]  FunctionType  constructorType  =  type.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  FunctionType  constructorType  =  type.getConstructor();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type.getConstructor();	      	non-compiled	[CE]  ';'  expected	6	None	replace
40	[BUG]  [BUGGY]  Node  constructor  =  n.getLastChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Node  constructor  =  n.getLastChild();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getLastChild();	      	non-compiled	[CE]  ';'  expected	6	None	replace
41	[BUG]  [BUGGY]  JSType  constructorType  =  type.getInstanceType();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  JSType  constructorType  =  type.getInstanceType();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type.getInstanceType();	      	non-compiled	[CE]  ';'  expected	6	None	replace
42	[BUG]  [BUGGY]  Type  constructorType  =  type.getConstructorType();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Type  constructorType  =  type.getConstructorType();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  type.getConstructorType();	      	non-compiled	[CE]  ';'  expected	6	None	replace
43	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE));	  n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	7	None	replace
44	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(OBJECT_TYPE));	  n.setJSType(getNativeType(NO_TYPE));    	non-compiled	[CE]  ';'  expected	7	None	replace
45	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(compiler);  }	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
46	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
47	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  else  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(compiler);  }  else  {  compiler.reportCodeChange();  }	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
48	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ");  }	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
49	[BUG]  [BUGGY]  if(type  ==  null)  {  n.setJSType(compiler);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type  ==  null)  {  n.setJSType(compiler);  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type  ==  null)  {  n.setJSType(compiler);  }	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
50	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  else  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(compiler);  }  else  {  n.setJSType(type);  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(compiler);  }  else  {  n.setJSType(type);  }	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
51	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE));  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.NO_TYPE));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	5	None	replace
52	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
53	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
54	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
55	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
56	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
57	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
58	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
59	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
60	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);	  n.setJSType(compiler);    	non-compiled	[CE]  ';'  expected	8	None	replace
61	[BUG]  [BUGGY]  n.setJSType(constructorType.getInstanceType());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  n.setJSType(constructorType.getInstanceType());  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(constructorType.getInstanceType());	  n.setJSType(ct.getInstanceType());    	non-compiled	[CE]  ';'  expected	3	None	replace
62	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	1	None	replace
63	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  ct.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Constructor  <?>  constructor  =  ct.getConstructor();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  ct.getConstructor();	      	non-compiled	[CE]  ';'  expected	6	None	replace
64	[BUG]  [BUGGY]  if(type!=  null)  {  scope  =  traverse(n,  scope);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  if(type!=  null)  {  scope  =  traverse(n,  scope);  }  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  scope  =  traverse(n,  scope);  }	      	non-compiled	[CE]  ';'  expected	6	None	replace
65	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  type.getConstructor();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  Constructor  <?>  constructor  =  type.getConstructor();  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  type.getConstructor();	      	non-compiled	[CE]  ';'  expected	6	None	replace
66	[BUG]  [BUGGY]  scope  =  traverse(type,  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }    [BUGGY]  scope  =  traverse(type,  n);  [BUGGY]    for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(type,  n);	      	non-compiled	[CE]  ';'  expected	6	None	replace
