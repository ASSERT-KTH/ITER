bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getNativeType(UNKNOWN_TYPE),  type);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	14	None	replace
2	[BUG]  [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  type,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  type,  scope);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	14	None	replace
3	[BUG]  [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  constructorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getNativeType(UNKNOWN_TYPE),  constructorType);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	14	None	replace
4	[BUG]  [BUGGY]  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE),  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE),  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE),  type);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	14	None	replace
5	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  constructorType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  constructorType);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	1	None	replace
6	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type,  scope);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	1	None	replace
7	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type,  registry);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type,  registry);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),  type,  registry);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	1	None	replace
8	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  type!=  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  type!=  null);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  type!=  null);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	1	None	replace
9	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	55	None	replace
10	[BUG]  [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	55	None	replace
11	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	55	None	replace
12	[BUG]  [BUGGY]  scope  =  traverse(n,  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(n,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(n,  type);	  scope    =    traverse(type,    n);    	non-compiled	[CE]  ';'  expected	66	None	replace
13	[BUG]  [BUGGY]  scope  =  traverse(scope,  n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(scope,  n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(scope,  n);	  scope    =    traverse(type,    n);    	non-compiled	[CE]  ';'  expected	66	None	replace
14	[BUG]  [BUGGY]  scope  =  traverse(constructorType,  n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(constructorType,  n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(constructorType,  n);	  scope    =    traverse(type,    n);    	non-compiled	[CE]  ';'  expected	66	None	replace
15	[BUG]  [BUGGY]  scope  =  traverse(type,  n,  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(type,  n,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(type,  n,  scope);	  scope    =    traverse(type,    n);    	non-compiled	[CE]  ';'  expected	66	None	replace
16	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(constructor,  n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(constructor,  n);	  scope    =    traverse(type,    n);    	non-compiled	[CE]  ';'  expected	66	None	replace
17	[BUG]  [BUGGY]  scope  =  traverse(ct,  n);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(ct,  n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(ct,  n);	  scope    =    traverse(type,    n);    	non-compiled	[CE]  ';'  expected	66	None	replace
18	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  ct.getConstructor(type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  ct.getConstructor(type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  ct.getConstructor(type);	  Constructor    <?>    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	63	None	replace
19	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  n.getConstructor();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  n.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  n.getConstructor();	  Constructor    <?>    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	63	None	replace
20	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  ct.getConstructorInstance();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  ct.getConstructorInstance();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  ct.getConstructorInstance();	  Constructor    <?>    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	63	None	replace
21	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  ct.getFunctionType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  ct.getFunctionType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  ct.getFunctionType();	  Constructor    <?>    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	63	None	replace
22	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  ct.getInstanceType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  ct.getInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  ct.getInstanceType();	  Constructor    <?>    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	63	None	replace
23	[BUG]  [BUGGY]  JSType  constructorType  =  n.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  n.getJSType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  n.getJSType();	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
24	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
25	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
26	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  constructorType));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  constructorType));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  constructorType));	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
27	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  context);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  context);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  context);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
28	[BUG]  [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE,  type));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE,  type));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(CONSTRUCTOR_TYPE,  type));	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
29	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  constructorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  constructorType);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
30	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  true);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  true);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  true);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
31	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  scope);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	3	None	replace
32	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  constructorType));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  constructorType));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  constructorType));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	3	None	replace
33	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  constructorType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  constructorType);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	3	None	replace
34	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  context);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  context);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  context);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	3	None	replace
35	[BUG]  [BUGGY]  Node  constructor  =  type.getLastChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  type.getLastChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  type.getLastChild();	  Node    constructor    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	40	None	replace
36	[BUG]  [BUGGY]  Node  constructor  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  type.getFirstChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  type.getFirstChild();	  Node    constructor    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	40	None	replace
37	[BUG]  [BUGGY]  Node  constructor  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  scope.getLastChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  scope.getLastChild();	  Node    constructor    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	40	None	replace
38	[BUG]  [BUGGY]  Node  constructor  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  scope.getFirstChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  scope.getFirstChild();	  Node    constructor    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	40	None	replace
39	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  compiler.reportCodeChange();  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
40	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
41	[BUG]  [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  if(type!=  null)  {  compiler.reportCodeChange();  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
42	[BUG]  [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(compiler);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(compiler);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(compiler);  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	47	None	replace
43	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(getNativeType(UNKNOWN_TYPE));  }	  if(type!=    null)    {    n.setJSType(getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	58	None	replace
44	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    n.setJSType(getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	58	None	replace
45	[BUG]  [BUGGY]  NativeType  constructorType  =  type.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  NativeType  constructorType  =  type.getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	NativeType  constructorType  =  type.getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    n.setJSType(getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	58	None	replace
46	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructorType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructorType  =  getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    n.setJSType(getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	58	None	replace
47	[BUG]  [BUGGY]  JSType  constructorType  =  type.getConstructorType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  type.getConstructorType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type.getConstructorType();	  JSType    constructorType    =    type.getInstanceType();    	non-compiled	[CE]  ';'  expected	41	None	replace
48	[BUG]  [BUGGY]  JSType  constructorType  =  ct.getInstanceType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  ct.getInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  ct.getInstanceType();	  JSType    constructorType    =    type.getInstanceType();    	non-compiled	[CE]  ';'  expected	41	None	replace
49	[BUG]  [BUGGY]  JSType  constructorType  =  n.getInstanceType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  n.getInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  n.getInstanceType();	  JSType    constructorType    =    type.getInstanceType();    	non-compiled	[CE]  ';'  expected	41	None	replace
50	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(ct.getNativeType(UNKNOWN_TYPE));  }	  if(type!=    null)    {    n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	32	None	replace
51	[BUG]  [BUGGY]  JSType  constructorType  =  type.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  type.getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type.getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	32	None	replace
52	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getNativeType(UNKNOWN_TYPE));  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getNativeType(UNKNOWN_TYPE));  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type.getNativeType(UNKNOWN_TYPE));  }	  if(type!=    null)    {    n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	32	None	replace
53	[BUG]  [BUGGY]  JSType  constructorType  =  n.getJSType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  n.getJSType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  n.getJSType(UNKNOWN_TYPE);	  if(type!=    null)    {    n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	32	None	replace
54	[BUG]  [BUGGY]  Scope  constructor  =  scope.getScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  scope.getScope();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  scope.getScope();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
55	[BUG]  [BUGGY]  Scope  constructor  =  type.getScope();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  type.getScope();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  type.getScope();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
56	[BUG]  [BUGGY]  Scope  constructor  =  n.getConstructor();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getConstructor();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
57	[BUG]  [BUGGY]  Scope  constructor  =  n.getPrototypeScope();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getPrototypeScope();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getPrototypeScope();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
58	[BUG]  [BUGGY]  Scope  constructor  =  n.getScopeInstance();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getScopeInstance();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getScopeInstance();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
59	[BUG]  [BUGGY]  Scope  constructor  =  n.getScopeInstanceType();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getScopeInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getScopeInstanceType();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
60	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  type);	  n.setJSType(getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	16	None	replace
61	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  2);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  2);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  2);	  n.setJSType(getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	16	None	replace
62	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)/  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)/  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)/  1);	  n.setJSType(getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	16	None	replace
63	[BUG]  [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getNativeType(UNKNOWN_TYPE)+  1);	  n.setJSType(getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	16	None	replace
64	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
65	[BUG]  [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
66	[BUG]  [BUGGY]  if(ct!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(ct!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(ct!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  return  scope;  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
67	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  type,  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	17	None	replace
68	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  constructorType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  constructorType);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	17	None	replace
69	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type,  registry);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  type,  registry);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  type,  registry);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	17	None	replace
70	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type!=  null);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type!=  null);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)||  type!=  null);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	17	None	replace
71	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  1,  type);	  n.setJSType(getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	17	None	replace
72	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
73	[BUG]  [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  if(type!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
74	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE),  type);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE),  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE),  type);	  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
75	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE,  type));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE,  type));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE,  type));	  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
76	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE)+  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE)+  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE)+  1);	  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
77	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
78	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE)+  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE)+  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(OBJECT_TYPE)+  1);	  n.setJSType(getNativeType(OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	44	None	replace
79	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE,  type));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE,  type));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(OBJECT_TYPE,  type));	  n.setJSType(getNativeType(OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	44	None	replace
80	[BUG]  [BUGGY]  n.setJSType(constructorType.getConstructor());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(constructorType.getConstructor());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(constructorType.getConstructor());	  n.setJSType(type.getConstructor());    	non-compiled	[CE]  ';'  expected	11	None	replace
81	[BUG]  [BUGGY]  n.setJSType(type.getReturnType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getReturnType());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getReturnType());	  n.setJSType(type.getConstructor());    	non-compiled	[CE]  ';'  expected	11	None	replace
82	[BUG]  [BUGGY]  n.setJSType(type.getConstructor()  ||  type.isInterface());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getConstructor()  ||  type.isInterface());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getConstructor()  ||  type.isInterface());	  n.setJSType(type.getConstructor());    	non-compiled	[CE]  ';'  expected	11	None	replace
83	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
84	[BUG]  [BUGGY]  FunctionType  constructorType  =  ct.getConstructor();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  ct.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  ct.getConstructor();	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
85	[BUG]  [BUGGY]  FunctionType  constructorType  =  type.getInstanceType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  type.getInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type.getInstanceType();	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
86	[BUG]  [BUGGY]  FunctionType  constructorType  =  n.getConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  n.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  n.getConstructor();	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
87	[BUG]  [BUGGY]  FunctionType  constructorType  =  type.getFunctionType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  type.getFunctionType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type.getFunctionType();	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
88	[BUG]  [BUGGY]  FunctionType  constructorType  =  type.getConstructor(registry);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  type.getConstructor(registry);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type.getConstructor(registry);	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
89	[BUG]  [BUGGY]  FunctionType  constructorType  =  scope.getConstructor();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  scope.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  scope.getConstructor();	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
90	[BUG]  [BUGGY]  n.removeChild(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.removeChild(scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.removeChild(scope);	  n.removeChild(constructorType);    	non-compiled	[CE]  ';'  expected	7	None	replace
91	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
92	[BUG]  [BUGGY]  if(constructorType!=  null)  {  for(JSType  constructor  :  constructor.getConstructors())  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  for(JSType  constructor  :  constructor.getConstructors())  {  n.setJSType(type);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  for(JSType  constructor  :  constructor.getConstructors())  {  n.setJSType(type);  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
93	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type);  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
94	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  type);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
95	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  2);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  2);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  2);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
96	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)/  1);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)/  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)/  1);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
97	[BUG]  [BUGGY]  if(constructorType!=  null)  {  scope  =  traverse(n,  scope);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  scope  =  traverse(n,  scope);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  scope  =  traverse(n,  scope);  }	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
98	[BUG]  [BUGGY]  Scope  constructor  =  traverse(n,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  traverse(n,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  traverse(n,  scope);	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
99	[BUG]  [BUGGY]  cope  =  traverse(n,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  cope  =  traverse(n,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	cope  =  traverse(n,  scope);	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
100	[BUG]  [BUGGY]  JSType  constructorType  =  type!=  null?  scope  :  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  type!=  null?  scope  :  getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type!=  null?  scope  :  getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
101	[BUG]  [BUGGY]  JSType  constructorType  =  type!=  null?  scope  :  n.getJSType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  type!=  null?  scope  :  n.getJSType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type!=  null?  scope  :  n.getJSType();	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
102	[BUG]  [BUGGY]  JSType  constructorType  =  type!=  null?  scope  :  traverse(n,  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  type!=  null?  scope  :  traverse(n,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type!=  null?  scope  :  traverse(n,  scope);	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
103	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)&&  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)&&  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)&&  getNativeType(JSTypeNative.UNKNOWN_TYPE));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||    getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
104	[BUG]  [BUGGY]  n.setJSType(type.getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||    getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
105	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getConstructorType(JSTypeNative.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getConstructorType(JSTypeNative.UNKNOWN_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getConstructorType(JSTypeNative.UNKNOWN_TYPE));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||    getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
106	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.NO_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||    getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
107	[BUG]  [BUGGY]  Node  constructor  =  type.getNext();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  type.getNext();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  type.getNext();	  Node    constructor    =    n.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
108	[BUG]  [BUGGY]  Node  constructor  =  n.getConstructor();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  n.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getConstructor();	  Node    constructor    =    n.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
109	[BUG]  [BUGGY]  Node  constructor  =  n.getParent();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  n.getParent();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getParent();	  Node    constructor    =    n.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
110	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
111	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  compiler.reportCodeChange();  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
112	[BUG]  [BUGGY]  if(type!=  null)  {  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  if(constructorType!=  null)  {  n.setJSType(constructorType);  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
113	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  type);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	29	None	replace
114	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  2);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  2);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  2);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	29	None	replace
115	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)/  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)/  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)/  1);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	29	None	replace
116	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  1,  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  1,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+  1,  type);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	29	None	replace
117	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type,  scope);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	28	None	replace
118	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  constructorType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  constructorType);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	28	None	replace
119	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type,  context);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type,  context);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),  type,  context);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	28	None	replace
120	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type!=  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type!=  null);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type!=  null);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	28	None	replace
121	[BUG]  [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  type);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	13	None	replace
122	[BUG]  [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  2);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  2);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	13	None	replace
123	[BUG]  [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)/  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)/  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getNativeType(UNKNOWN_TYPE)/  1);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	13	None	replace
124	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE)+  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE)+  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(STRING_TYPE)+  1);	  n.setJSType(getNativeType(STRING_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
125	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type!=  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type!=  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)||  type!=  FUNCTION_LITERAL_UNDEFINED_THIS);	  n.setJSType(getNativeType(UNKNOWN_TYPE)||    type    ==    FUNCTION_LITERAL_UNDEFINED_THIS);    	non-compiled	[CE]  ';'  expected	57	None	replace
126	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)&&  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)&&  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)&&  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);	  n.setJSType(getNativeType(UNKNOWN_TYPE)||    type    ==    FUNCTION_LITERAL_UNDEFINED_THIS);    	non-compiled	[CE]  ';'  expected	57	None	replace
127	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS,  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE)||    type    ==    FUNCTION_LITERAL_UNDEFINED_THIS);    	non-compiled	[CE]  ';'  expected	57	None	replace
128	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  >=  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  >=  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)||  type  >=  FUNCTION_LITERAL_UNDEFINED_THIS);	  n.setJSType(getNativeType(UNKNOWN_TYPE)||    type    ==    FUNCTION_LITERAL_UNDEFINED_THIS);    	non-compiled	[CE]  ';'  expected	57	None	replace
129	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	48	None	replace
130	[BUG]  [BUGGY]  n.removeChild(constructor);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.removeChild(constructor);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.removeChild(constructor);	  n.removeChild(type);    	non-compiled	[CE]  ';'  expected	5	None	replace
131	[BUG]  [BUGGY]  n.setJSType(type.getConstructorType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getConstructorType());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getConstructorType());	  n.setJSType(type.getInstanceType());    	non-compiled	[CE]  ';'  expected	8	None	replace
132	[BUG]  [BUGGY]  n.setJSType(type.getSimpleName());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getSimpleName());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getSimpleName());	  n.setJSType(type.getInstanceType());    	non-compiled	[CE]  ';'  expected	8	None	replace
133	[BUG]  [BUGGY]  if(type!=  null)  {  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
134	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  return  scope;  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
135	[BUG]  [BUGGY]  n.setJSType(constructor);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(constructor);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(constructor);	  if(type!=    null)    {    n.setJSType(compiler);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
136	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(n,  scope,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(n,  scope,  type);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
137	[BUG]  [BUGGY]  scope  =  traverse(type,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(type,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(type,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
138	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  ct);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(n,  scope,  ct);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(n,  scope,  ct);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
139	[BUG]  [BUGGY]  scope  =  traverse(ct,  scope);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(ct,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(ct,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
140	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  true);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(n,  scope,  true);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(n,  scope,  true);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
141	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeType(UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
142	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE,  type);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
143	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
144	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
145	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  registry.getConstructorRegistry().getNativeObjectType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  registry.getConstructorRegistry().getNativeObjectType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  registry.getConstructorRegistry().getNativeObjectType(UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
146	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  registry.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  registry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  registry.getNativeType(UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
147	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(NO_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(NO_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
148	[BUG]  [BUGGY]  Constructor  constructor  =  type.getConstructor();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  type.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  type.getConstructor();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
149	[BUG]  [BUGGY]  Constructor  constructor  =  n.getConstructor(type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getConstructor(type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getConstructor(type);	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
150	[BUG]  [BUGGY]  Constructor  constructor  =  scope.getConstructor();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  scope.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  scope.getConstructor();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
151	[BUG]  [BUGGY]  Constructor  constructor  =  n.getConstructorInstance();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getConstructorInstance();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getConstructorInstance();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
152	[BUG]  [BUGGY]  Constructor  constructor  =  n.getConstructorType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getConstructorType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getConstructorType();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
153	[BUG]  [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE)+  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(CONSTRUCTOR_TYPE)+  1);	  n.setJSType(getNativeType(CONSTRUCTOR_TYPE));    	non-compiled	[CE]  ';'  expected	19	None	replace
154	[BUG]  [BUGGY]  n.addChildToFront(constructorType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.addChildToFront(constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.addChildToFront(constructorType);	  n.addChildToFront(type);    	non-compiled	[CE]  ';'  expected	6	None	replace
155	[BUG]  [BUGGY]  n.addChildToFront(type,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.addChildToFront(type,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.addChildToFront(type,  scope);	  n.addChildToFront(type);    	non-compiled	[CE]  ';'  expected	6	None	replace
156	[BUG]  [BUGGY]  n.addChildToFront(scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.addChildToFront(scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.addChildToFront(scope);	  n.addChildToFront(type);    	non-compiled	[CE]  ';'  expected	6	None	replace
157	[BUG]  [BUGGY]  n.addChildToFront(ct);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.addChildToFront(ct);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.addChildToFront(ct);	  n.addChildToFront(type);    	non-compiled	[CE]  ';'  expected	6	None	replace
158	[BUG]  [BUGGY]  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	for(Node  constructor  =  n.getFirstChild();  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	62	None	replace
159	[BUG]  [BUGGY]  if(constructorType!=  null)  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  for(Node  constructor  =  n.getFirstChild();  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	62	None	replace
160	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  for(Node  constructor  =  n.getLastChild();  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  for(Node  constructor  =  n.getLastChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  for(Node  constructor  =  n.getLastChild();  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	62	None	replace
161	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	62	None	replace
162	[BUG]  [BUGGY]  Constructor  constructor  =  ct.getConstructor(type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  ct.getConstructor(type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  ct.getConstructor(type);	  Constructor    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	21	None	replace
163	[BUG]  [BUGGY]  Constructor  constructor  =  ct.getConstructorInstance();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  ct.getConstructorInstance();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  ct.getConstructorInstance();	  Constructor    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	21	None	replace
164	[BUG]  [BUGGY]  Constructor  constructor  =  ct.getInstanceType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  ct.getInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  ct.getInstanceType();	  Constructor    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	21	None	replace
165	[BUG]  [BUGGY]  Constructor  constructor  =  ct.getConstructorInstanceType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  ct.getConstructorInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  ct.getConstructorInstanceType();	  Constructor    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	21	None	replace
166	[BUG]  [BUGGY]  n.setJSType(compiler.getInstanceType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getInstanceType());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getInstanceType());	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
167	[BUG]  [BUGGY]  n.setJSType(scope.getInstanceType());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(scope.getInstanceType());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(scope.getInstanceType());	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
168	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE)||  getNativeType(JSTypeNative.NO_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE)||  getNativeType(JSTypeNative.NO_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.NO_TYPE)||  getNativeType(JSTypeNative.NO_TYPE));	  n.setJSType(getNativeType(JSTypeNative.NO_TYPE));    	non-compiled	[CE]  ';'  expected	51	None	replace
169	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE,  type));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE,  type));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.NO_TYPE,  type));	  n.setJSType(getNativeType(JSTypeNative.NO_TYPE));    	non-compiled	[CE]  ';'  expected	51	None	replace
170	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE)+  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE)+  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.NO_TYPE)+  1);	  n.setJSType(getNativeType(JSTypeNative.NO_TYPE));    	non-compiled	[CE]  ';'  expected	51	None	replace
171	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE),  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_TYPE),  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.NO_TYPE),  type);	  n.setJSType(getNativeType(JSTypeNative.NO_TYPE));    	non-compiled	[CE]  ';'  expected	51	None	replace
172	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	53	None	replace
173	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	60	None	replace
174	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	60	None	replace
175	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	60	None	replace
176	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  registry.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	60	None	replace
177	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  registry.getConstructorRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  registry.getConstructorRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  registry.getConstructorRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	60	None	replace
178	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE,  type);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	60	None	replace
179	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	60	None	replace
180	[BUG]  [BUGGY]  JSType  constructorType  =  n.setJSType(constructorType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  n.setJSType(constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  n.setJSType(constructorType);	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
181	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  n.getConstructor();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructorType  =  n.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructorType  =  n.getConstructor();	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
182	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  n.getConstructorType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructorType  =  n.getConstructorType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructorType  =  n.getConstructorType();	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
183	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	37	None	replace
184	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	37	None	replace
185	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(functionType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(functionType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(functionType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	37	None	replace
186	[BUG]  [BUGGY]  Type  constructorType  =  ct.getConstructorType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Type  constructorType  =  ct.getConstructorType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  ct.getConstructorType();	  Type    constructorType    =    type.getConstructorType();    	non-compiled	[CE]  ';'  expected	42	None	replace
187	[BUG]  [BUGGY]  Type  constructorType  =  type.getInstanceType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Type  constructorType  =  type.getInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  type.getInstanceType();	  Type    constructorType    =    type.getConstructorType();    	non-compiled	[CE]  ';'  expected	42	None	replace
188	[BUG]  [BUGGY]  Type  constructorType  =  n.getConstructorType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Type  constructorType  =  n.getConstructorType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  n.getConstructorType();	  Type    constructorType    =    type.getConstructorType();    	non-compiled	[CE]  ';'  expected	42	None	replace
189	[BUG]  [BUGGY]  Type  constructorType  =  type.getConstructor();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Type  constructorType  =  type.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  type.getConstructor();	  Type    constructorType    =    type.getConstructorType();    	non-compiled	[CE]  ';'  expected	42	None	replace
190	[BUG]  [BUGGY]  Type  constructorType  =  type.getFunctionType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Type  constructorType  =  type.getFunctionType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  type.getFunctionType();	  Type    constructorType    =    type.getConstructorType();    	non-compiled	[CE]  ';'  expected	42	None	replace
191	[BUG]  [BUGGY]  Type  constructorType  =  type.getConstructorType(registry);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Type  constructorType  =  type.getConstructorType(registry);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  type.getConstructorType(registry);	  Type    constructorType    =    type.getConstructorType();    	non-compiled	[CE]  ';'  expected	42	None	replace
192	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  type.getConstructor(registry);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  type.getConstructor(registry);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  type.getConstructor(registry);	  Constructor    <?>    constructor    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	65	None	replace
193	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  type.getInstanceType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  type.getInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  type.getInstanceType();	  Constructor    <?>    constructor    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	65	None	replace
194	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  type.getConstructorInstance();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  type.getConstructorInstance();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  type.getConstructorInstance();	  Constructor    <?>    constructor    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	65	None	replace
195	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  type.getFunctionType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  type.getFunctionType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  type.getFunctionType();	  Constructor    <?>    constructor    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	65	None	replace
196	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  n.setJSType(type);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  n.setJSType(type);  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
197	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  scope  =  traverse(scope,  constructorType);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  scope  =  traverse(scope,  constructorType);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  scope  =  traverse(scope,  constructorType);  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
198	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getConstructor();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getConstructor();	  if(type    ==    null)    {    n.setJSType(compiler);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
199	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getConstructor(n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getConstructor(n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getConstructor(n);	  if(type    ==    null)    {    n.setJSType(compiler);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
200	[BUG]  [BUGGY]  n.setJSType(ct.getFunctionType());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(ct.getFunctionType());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getFunctionType());	  n.setJSType(ct.getConstructor());    	non-compiled	[CE]  ';'  expected	9	None	replace
201	[BUG]  [BUGGY]  JSType  constructorType  =  ct.getConstructor();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  ct.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  ct.getConstructor();	  JSType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	25	None	replace
202	[BUG]  [BUGGY]  JSType  constructorType  =  n.getConstructor();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  n.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  n.getConstructor();	  JSType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	25	None	replace
203	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getConstructor();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  scope.getConstructor();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  scope.getConstructor();	  JSType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	25	None	replace
204	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  scope);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	27	None	replace
205	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  context);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  context);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  context);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	27	None	replace
206	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  constructorType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  constructorType);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	27	None	replace
207	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  true);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  true);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  true);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	27	None	replace
208	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  constructorType));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  constructorType));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  constructorType));	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	27	None	replace
209	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	36	None	replace
210	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	36	None	replace
211	[BUG]  [BUGGY]  n.addChildToBack(type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.addChildToBack(type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.addChildToBack(type);	  n.removeChild(constructorType);    	non-compiled	[CE]  ';'  expected	7	None	replace
212	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getConstructor());  }	  n.setJSType(ct.getConstructor());    	non-compiled	[CE]  ';'  expected	9	None	replace
213	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  n.setJSType(ct.getConstructor());  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  n.setJSType(ct.getConstructor());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  n.setJSType(ct.getConstructor());  }	  n.setJSType(ct.getConstructor());    	non-compiled	[CE]  ';'  expected	9	None	replace
214	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  type  =  ct.getInstanceType();  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  type  =  ct.getInstanceType();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  type  =  ct.getInstanceType();  }	  n.setJSType(ct.getConstructor());    	non-compiled	[CE]  ';'  expected	9	None	replace
215	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getConstructor());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(ct.getConstructor());    	non-compiled	[CE]  ';'  expected	9	None	replace
216	[BUG]  [BUGGY]  n.setJSType(buildorType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(buildorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(buildorType);	  if(type    ==    null)    {    n.setJSType(compiler);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
217	[BUG]  [BUGGY]  JSType  constructorType  =  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  null;  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  null;	  if(type    ==    null)    {    n.setJSType(compiler);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
218	[BUG]  [BUGGY]  Node  constructor  =  n.getProp(Node.SOURCENAME_PROP);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  n.getProp(Node.SOURCENAME_PROP);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getProp(Node.SOURCENAME_PROP);	  Node    constructor    =    n.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
219	[BUG]  [BUGGY]  Node  constructor  =  n.getProp(Node.SOURCEFILE_PROP);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  n.getProp(Node.SOURCEFILE_PROP);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getProp(Node.SOURCEFILE_PROP);	  Node    constructor    =    n.getNext();    	non-compiled	[CE]  ';'  expected	26	None	replace
220	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  constructor);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  constructor);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  constructor);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
221	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	53	None	replace
222	[BUG]  [BUGGY]  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE)+  1);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	13	None	replace
223	[BUG]  [BUGGY]  n.setJSType(type.getReferenceName());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getReferenceName());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getReferenceName());	  n.setJSType(type.getConstructor());    	non-compiled	[CE]  ';'  expected	11	None	replace
224	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  type.getConstructor(n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  type.getConstructor(n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  type.getConstructor(n);	  Constructor    <?>    constructor    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	65	None	replace
225	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
226	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
227	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  n.setJSType(type.getInstanceType());  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  n.setJSType(type.getInstanceType());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  n.setJSType(type.getInstanceType());  }	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
228	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  compiler.reportCodeChange();  }	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
229	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  return  scope;  }	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
230	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
231	[BUG]  [BUGGY]  Type  constructorType  =  type.getConstructorType(n);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Type  constructorType  =  type.getConstructorType(n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  type.getConstructorType(n);	  Type    constructorType    =    type.getConstructorType();    	non-compiled	[CE]  ';'  expected	42	None	replace
232	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructorType());  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructorType());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getConstructorType());  }	  n.setJSType(ct.getConstructorType());    	non-compiled	[CE]  ';'  expected	10	None	replace
233	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructorType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(ct.getConstructorType());  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(ct.getConstructorType());  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(ct.getConstructorType());    	non-compiled	[CE]  ';'  expected	10	None	replace
234	[BUG]  [BUGGY]  Node  constructor  =  n.getLastChild().getNext();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  n.getLastChild().getNext();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getLastChild().getNext();	  Node    constructor    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	40	None	replace
235	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructor);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(scope,  constructor);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(scope,  constructor);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
236	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  functionScope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(n,  scope,  functionScope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(n,  scope,  functionScope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
237	[BUG]  [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE),  constructorType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE),  constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getNativeType(UNKNOWN_TYPE),  constructorType);	  n.setJSType(type.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	12	None	replace
238	[BUG]  [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE),  constructor);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getNativeType(UNKNOWN_TYPE),  constructor);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getNativeType(UNKNOWN_TYPE),  constructor);	  n.setJSType(type.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	12	None	replace
239	[BUG]  [BUGGY]  n.setJSType(type  ==  null?  type  :  getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type  ==  null?  type  :  getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type  ==  null?  type  :  getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.UNKNOWN_TYPE));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||    getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
240	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.NO_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.NO_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  getNativeType(JSTypeNative.NO_TYPE));	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||    getNativeType(JSTypeNative.UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	2	None	replace
241	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE,  type);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
242	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(CONSTRUCTOR_TYPE);	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
243	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(UNKNOWN_TYPE)+  1;	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	59	None	replace
244	[BUG]  [BUGGY]  Node  constructor  =  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  n.getFirstChild().getNext();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.getFirstChild().getNext();	  Node    constructor    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
245	[BUG]  [BUGGY]  if(constructorType!=  null)  {  constructorType.setJSType(null);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  constructorType.setJSType(null);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  constructorType.setJSType(null);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	37	None	replace
246	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( ". ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( ". ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	37	None	replace
247	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(functionScope,  n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(functionScope,  n);	  scope    =    traverse(type,    n);    	non-compiled	[CE]  ';'  expected	66	None	replace
248	[BUG]  [BUGGY]  scope  =  traverse(structorType,  n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(structorType,  n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(structorType,  n);	  scope    =    traverse(type,    n);    	non-compiled	[CE]  ';'  expected	66	None	replace
249	[BUG]  [BUGGY]  Scope  constructor  =  functionScope.getScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  functionScope.getScope();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  functionScope.getScope();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
250	[BUG]  [BUGGY]  Scope  constructor  =  n.getJSType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getJSType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getJSType();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
251	[BUG]  [BUGGY]  Scope  constructor  =  n.getPrototype();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getPrototype();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getPrototype();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
252	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  compiler.getTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;	  Constructor    <?>    constructor    =    compiler.getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	60	None	replace
253	[BUG]  [BUGGY]  n.setJSType(getNativeType(STRING_TYPE),  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(STRING_TYPE),  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(STRING_TYPE),  type);	  n.setJSType(getNativeType(STRING_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
254	[BUG]  [BUGGY]  if(type  ==  null)  {  scope  =  traverse(n,  scope);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type  ==  null)  {  scope  =  traverse(n,  scope);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type  ==  null)  {  scope  =  traverse(n,  scope);  }	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
255	[BUG]  [BUGGY]  if(type!=  null)  {  scope  =  traverse(scope,  constructorType);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  scope  =  traverse(scope,  constructorType);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  scope  =  traverse(scope,  constructorType);  }	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
256	[BUG]  [BUGGY]  if(type!=  null)  {  scope  =  traverse(scope,  constructor);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  scope  =  traverse(scope,  constructor);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  scope  =  traverse(scope,  constructor);  }	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
257	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	36	None	replace
258	[BUG]  [BUGGY]  if(constructorType!=  null)  {  constructorType.setJSType(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  constructorType.setJSType(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  constructorType.setJSType(null);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	36	None	replace
259	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  throw  new  IllegalStateException( " ");  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	55	None	replace
260	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1,  type);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)+    1);    	non-compiled	[CE]  ';'  expected	4	None	replace
261	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  true);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  true);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  true);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	3	None	replace
262	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  compiler);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  compiler);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  compiler);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	27	None	replace
263	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  false);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  false);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  false);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	27	None	replace
264	[BUG]  [BUGGY]  Constructor  constructor  =  ct.getFunctionType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  ct.getFunctionType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  ct.getFunctionType();	  Constructor    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	21	None	replace
265	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
266	[BUG]  [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS_EXPECTED));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS_EXPECTED));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(TEMPLATE_TYPE_OF_THIS_EXPECTED));	  n.setJSType(getNativeType(TYPE_NOT_OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
267	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructorType  =  n.getJSType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructorType  =  n.getJSType();	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
268	[BUG]  [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Type  constructorType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Type  constructorType  =  getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    n.setJSType(getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	58	None	replace
269	[BUG]  [BUGGY]  NativeType  constructorType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  NativeType  constructorType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	NativeType  constructorType  =  getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    n.setJSType(getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	58	None	replace
270	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  return  scope;  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	56	None	replace
271	[BUG]  [BUGGY]  if(type!=  null)  {  n.setJSType(constructor.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null)  {  n.setJSType(constructor.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null)  {  n.setJSType(constructor.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
272	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
273	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	54	None	replace
274	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  type  =  getNativeType(UNKNOWN_TYPE);  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	50	None	replace
275	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( ". ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( ". ");  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	48	None	replace
276	[BUG]  [BUGGY]  if(constructorType!=  null)  {  scope.setJSType(constructorType);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  scope.setJSType(constructorType);  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  scope.setJSType(constructorType);  }  else  {  return  scope;  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
277	[BUG]  [BUGGY]  JSType  constructorType  =  n.setJSType(ct.getInstanceType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  n.setJSType(ct.getInstanceType());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  n.setJSType(ct.getInstanceType());	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
278	[BUG]  [BUGGY]  Constructor  constructor  =  n.getFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getFunctionType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getFunctionType();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
279	[BUG]  [BUGGY]  Constructor  constructor  =  n.getInstanceType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getInstanceType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getInstanceType();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
280	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type!=  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type!=  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type!=  FUNCTION_LITERAL_UNDEFINED_THIS);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	28	None	replace
281	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE)||  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	28	None	replace
282	[BUG]  [BUGGY]  FunctionType  constructorType  =  type.getConstructor(n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  type.getConstructor(n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type.getConstructor(n);	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
283	[BUG]  [BUGGY]  n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS)||  type  ==  FUNCTION_LITERAL_UNDEFINED_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS)||  type  ==  FUNCTION_LITERAL_UNDEFINED_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS)||  type  ==  FUNCTION_LITERAL_UNDEFINED_TYPE);	  n.setJSType(getNativeType(UNKNOWN_TYPE)||    type    ==    FUNCTION_LITERAL_UNDEFINED_THIS);    	non-compiled	[CE]  ';'  expected	57	None	replace
284	[BUG]  [BUGGY]  n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS)&&  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS)&&  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS)&&  type  ==  FUNCTION_LITERAL_UNDEFINED_THIS);	  n.setJSType(getNativeType(UNKNOWN_TYPE)||    type    ==    FUNCTION_LITERAL_UNDEFINED_THIS);    	non-compiled	[CE]  ';'  expected	57	None	replace
285	[BUG]  [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  1,  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  1,  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(ct.getNativeType(UNKNOWN_TYPE)+  1,  type);	  n.setJSType(ct.getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	14	None	replace
286	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE),  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE),  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(OBJECT_TYPE),  type);	  n.setJSType(getNativeType(OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	44	None	replace
287	[BUG]  [BUGGY]  if(constructorType!=  null)  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  compiler.reportCodeChange();  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
288	[BUG]  [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE),  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(CONSTRUCTOR_TYPE),  type);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(CONSTRUCTOR_TYPE),  type);	  n.setJSType(getNativeType(CONSTRUCTOR_TYPE));    	non-compiled	[CE]  ';'  expected	19	None	replace
289	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNCONSTRUCTOR_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNCONSTRUCTOR_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNCONSTRUCTOR_TYPE));	  n.setJSType(getNativeType(CONSTRUCTOR_TYPE));    	non-compiled	[CE]  ';'  expected	19	None	replace
290	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.NO_OBJECT_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.NO_OBJECT_TYPE));	  n.setJSType(getNativeType(JSTypeNative.NO_TYPE));    	non-compiled	[CE]  ';'  expected	51	None	replace
291	[BUG]  [BUGGY]  JSType  constructorType  =  type.getConstructor(n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  type.getConstructor(n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type.getConstructor(n);	  JSType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	25	None	replace
292	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  ct.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructorType  =  ct.getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructorType  =  ct.getNativeType(UNKNOWN_TYPE);	  if(type!=    null)    {    n.setJSType(ct.getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	32	None	replace
293	[BUG]  [BUGGY]  Scope  constructor  =  n.getLastChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getLastChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getLastChild();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
294	[BUG]  [BUGGY]  Scope  constructor  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getFirstChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getFirstChild();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
295	[BUG]  [BUGGY]  Scope  constructor  =  n.getParent();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Scope  constructor  =  n.getParent();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Scope  constructor  =  n.getParent();	  Scope    constructor    =    n.getScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
296	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  constructor.getJSType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  constructor.getJSType();	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    for(Node    constructor    =    n.getFirstChild();    }    	non-compiled	[CE]  ';'  expected	62	None	replace
297	[BUG]  [BUGGY]  n.setJSType(getNativeType(TYPE_OBJECT_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(TYPE_OBJECT_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(TYPE_OBJECT_TYPE));	  n.setJSType(getNativeType(OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	44	None	replace
298	[BUG]  [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(ARRAY_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(ARRAY_TYPE));	  n.setJSType(getNativeType(OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	44	None	replace
299	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	46	None	replace
300	[BUG]  [BUGGY]  n.setJSType(createFunctionType(scope,  constructorType));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(createFunctionType(scope,  constructorType));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(createFunctionType(scope,  constructorType));	  if(type!=    null)    {    n.setJSType(compiler);    }    	non-compiled	[CE]  ';'  expected	45	None	replace
301	[BUG]  [BUGGY]  n.setJSType(type.getRawClass());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getRawClass());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getRawClass());	  n.setJSType(type.getInstanceType());    	non-compiled	[CE]  ';'  expected	8	None	replace
302	[BUG]  [BUGGY]  Constructor  constructor  =  ct.getConstructorForType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  ct.getConstructorForType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  ct.getConstructorForType();	  Constructor    constructor    =    ct.getConstructor();    	non-compiled	[CE]  ';'  expected	21	None	replace
303	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	36	None	replace
304	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunction())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunction())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isFunction())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	36	None	replace
305	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunctionType())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunctionType())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isFunctionType())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	36	None	replace
306	[BUG]  [BUGGY]  Constructor  <?>  constructorType  =  getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructorType  =  getNativeType(UNKNOWN_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructorType  =  getNativeType(UNKNOWN_TYPE));	  if(type!=    null)    {    n.setJSType(getNativeType(UNKNOWN_TYPE));    }    	non-compiled	[CE]  ';'  expected	58	None	replace
307	[BUG]  [BUGGY]  n.setJSType(type,  getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type,  getNativeType(UNKNOWN_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type,  getNativeType(UNKNOWN_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	17	None	replace
308	[BUG]  [BUGGY]  Constructor  constructor  =  n.getLastChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getLastChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getLastChild();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
309	[BUG]  [BUGGY]  Constructor  constructor  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getFirstChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getFirstChild();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
310	[BUG]  [BUGGY]  Constructor  constructor  =  n.getOwnerFunction();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getOwnerFunction();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getOwnerFunction();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
311	[BUG]  [BUGGY]  Constructor  constructor  =  n.getParent();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  constructor  =  n.getParent();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  constructor  =  n.getParent();	  Constructor    constructor    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	22	None	replace
312	[BUG]  [BUGGY]  n.setJSType(getNativeType(FUNCTION_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(FUNCTION_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(FUNCTION_TYPE));	  n.setJSType(getNativeType(STRING_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
313	[BUG]  [BUGGY]  n.setJSType(type.getImplicitPrototype());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.getImplicitPrototype());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.getImplicitPrototype());	  n.setJSType(type.getConstructor());    	non-compiled	[CE]  ';'  expected	11	None	replace
314	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " "));  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	48	None	replace
315	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	48	None	replace
316	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ".equals(type));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ".equals(type));  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(compiler);  }  else  {  throw  new  IllegalStateException( " ".equals(type));  }	  if(type!=    null)    {    n.setJSType(compiler);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	48	None	replace
317	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  n.setJSType(type);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getInstanceType());  }  else  {  n.setJSType(type);  }	  n.setJSType(constructorType.getInstanceType());    	non-compiled	[CE]  ';'  expected	61	None	replace
318	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  TEMPLATE_TYPE_OF_THIS_EXPECTED);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  TEMPLATE_TYPE_OF_THIS_EXPECTED);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  TEMPLATE_TYPE_OF_THIS_EXPECTED);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
319	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  ct);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  ct);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  type),  ct);	  n.setJSType(getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	18	None	replace
320	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
321	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  ct);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  ct);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  ct);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	3	None	replace
322	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  n);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,  type),  n);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	3	None	replace
323	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }	  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	15	None	replace
324	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  n.setJSType(type);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  n.setJSType(type);  }	  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	15	None	replace
325	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  for(Node  constructor  =  n.getFirstChild();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  for(Node  constructor  =  n.getFirstChild();  }	  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	15	None	replace
326	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setJSType(constructorType.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	15	None	replace
327	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " "));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(ct.getInstanceType());  }  else  {  throw  new  IllegalStateException( " "));  }	  if(type!=    null)    {    n.setJSType(ct.getInstanceType());    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	55	None	replace
328	[BUG]  [BUGGY]  JSType  constructorType  =  type.getFunctionType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  type.getFunctionType();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type.getFunctionType();	  JSType    constructorType    =    type.getInstanceType();    	non-compiled	[CE]  ';'  expected	41	None	replace
329	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  type.getImplicitPrototype();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  type.getImplicitPrototype();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  type.getImplicitPrototype();	  Constructor    <?>    constructor    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	65	None	replace
330	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  type.getInstance();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Constructor  <?>  constructor  =  type.getInstance();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Constructor  <?>  constructor  =  type.getInstance();	  Constructor    <?>    constructor    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	65	None	replace
331	[BUG]  [BUGGY]  Node  constructor  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  Node  constructor  =  n.removeFirstChild();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	Node  constructor  =  n.removeFirstChild();	  Node    constructor    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	20	None	replace
332	[BUG]  [BUGGY]  n.setJSType(type.toString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type.toString());  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type.toString());	  n.setJSType(ct.getConstructor());    	non-compiled	[CE]  ';'  expected	9	None	replace
333	[BUG]  [BUGGY]  n.removeChild(clazz);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.removeChild(clazz);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.removeChild(clazz);	  n.removeChild(constructorType);    	non-compiled	[CE]  ';'  expected	7	None	replace
334	[BUG]  [BUGGY]  constructorType  =  n.setJSType(constructorType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  constructorType  =  n.setJSType(constructorType);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	constructorType  =  n.setJSType(constructorType);	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    	non-compiled	[CE]  ';'  expected	33	None	replace
335	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	37	None	replace
336	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunction())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunction())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isFunction())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	37	None	replace
337	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunctionType())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunctionType())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isFunctionType())  {  n.setJSType(constructorType);  }  else  {  throw  new  IllegalStateException( " ");  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	37	None	replace
338	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(type);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(type);  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
339	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(type);  }  else  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(type);  }  else  {  n.setJSType(type);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(type);  }  else  {  n.setJSType(type);  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
340	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  n.setJSType(type);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  n.setJSType(type);  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    n.setJSType(type);    }    	non-compiled	[CE]  ';'  expected	35	None	replace
341	[BUG]  [BUGGY]  FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  null;  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  null;	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
342	[BUG]  [BUGGY]  FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  getNativeType(UNKNOWN_TYPE);	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
343	[BUG]  [BUGGY]  FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  getNativeType(JSTypeNative.UNKNOWN_TYPE);	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
344	[BUG]  [BUGGY]  FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  registry.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  registry.getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	FunctionType  constructorType  =  type!=  null?  type.getConstructor()  :  registry.getNativeType(UNKNOWN_TYPE);	  FunctionType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	39	None	replace
345	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.TYPE_NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.TYPE_NOT_OBJECT_TYPE));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.TYPE_NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(JSTypeNative.NO_TYPE));    	non-compiled	[CE]  ';'  expected	51	None	replace
346	[BUG]  [BUGGY]  n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS  ||  type  ==  FUNCTION_LITERAL_UNDEFINED_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS  ||  type  ==  FUNCTION_LITERAL_UNDEFINED_TYPE);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(type  ==  FUNCTION_LITERAL_UNDEFINED_THIS  ||  type  ==  FUNCTION_LITERAL_UNDEFINED_TYPE);	  n.setJSType(getNativeType(UNKNOWN_TYPE)||    type    ==    FUNCTION_LITERAL_UNDEFINED_THIS);    	non-compiled	[CE]  ';'  expected	57	None	replace
347	[BUG]  [BUGGY]  if(type!=  null  &&  type.isConstructor())  {  scope  =  traverse(n,  scope);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null  &&  type.isConstructor())  {  scope  =  traverse(n,  scope);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null  &&  type.isConstructor())  {  scope  =  traverse(n,  scope);  }	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
348	[BUG]  [BUGGY]  if(type!=  null  &&  type.isUnknownType())  {  scope  =  traverse(n,  scope);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null  &&  type.isUnknownType())  {  scope  =  traverse(n,  scope);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null  &&  type.isUnknownType())  {  scope  =  traverse(n,  scope);  }	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
349	[BUG]  [BUGGY]  if(type!=  null  &&  type.isInstanceType())  {  scope  =  traverse(n,  scope);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null  &&  type.isInstanceType())  {  scope  =  traverse(n,  scope);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null  &&  type.isInstanceType())  {  scope  =  traverse(n,  scope);  }	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
350	[BUG]  [BUGGY]  if(type!=  null  &&  type.isFunction())  {  scope  =  traverse(n,  scope);  }  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(type!=  null  &&  type.isFunction())  {  scope  =  traverse(n,  scope);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(type!=  null  &&  type.isFunction())  {  scope  =  traverse(n,  scope);  }	  if(type!=    null)    {    scope    =    traverse(n,    scope);    }    	non-compiled	[CE]  ';'  expected	64	None	replace
351	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  return  scope;  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
352	[BUG]  [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  return  scope;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  return  scope;  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null)  {  n.setJSType(type);  }  else  {  return  scope;  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
353	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    return    scope;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
354	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  ct);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  ct);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,  type),  ct);	  n.setJSType(compiler.getNativeType(UNKNOWN_TYPE,    type));    	non-compiled	[CE]  ';'  expected	27	None	replace
355	[BUG]  [BUGGY]  n.setJSType(createFunctionType(type));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(createFunctionType(type));  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(createFunctionType(type));	  if(type    ==    null)    {    n.setJSType(compiler);    }    	non-compiled	[CE]  ';'  expected	49	None	replace
356	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  type  ==  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  type  ==  null);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE)||  type  ==  null);	  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE),    type);    	non-compiled	[CE]  ';'  expected	1	None	replace
357	[BUG]  [BUGGY]  scope  =  traverse(constructor,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(constructor,  scope);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(constructor,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
358	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  compiler);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  scope  =  traverse(n,  scope,  compiler);  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	scope  =  traverse(n,  scope,  compiler);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	24	None	replace
359	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	if(constructorType!=  null  &&  constructorType.isConstructor())  {  n.setJSType(constructorType);  }  else  {  compiler.reportCodeChange();  }	  if(constructorType!=    null)    {    n.setJSType(constructorType);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  ';'  expected	34	None	replace
360	[BUG]  [BUGGY]  JSType  constructorType  =  type.toString();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]          ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }      [BUGGY]  JSType  constructorType  =  type.toString();  [BUGGY]      for  (Node  arg  =  constructor.getNext();  arg  !=  null;  arg  =  arg.getNext())  {  scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1058	1058	1	replace	JSType  constructorType  =  type.toString();	  JSType    constructorType    =    type.getConstructor();    	non-compiled	[CE]  ';'  expected	25	None	replace
