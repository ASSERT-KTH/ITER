bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;	boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  	non-compiled	[CE]  ';'  expected	49	None	replace
2	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  	non-compiled	[CE]  ';'  expected	49	None	replace
3	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()!=  null;	boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  	non-compiled	[CE]  ';'  expected	49	None	replace
4	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  [BUGGY]    [BUGGY]  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	  	boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  	non-compiled	[CE]  ';'  expected	49	None	replace
5	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();	boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  	non-compiled	[CE]  ';'  expected	49	None	replace
6	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null;  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null;  [BUGGY]  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null;	boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  	non-compiled	[CE]  ';'  expected	49	None	replace
7	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()!=  null;	boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  	non-compiled	[CE]  ';'  expected	49	None	replace
8	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]        ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()!=  null;	boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  	non-compiled	[CE]  ';'  expected	49	None	replace
