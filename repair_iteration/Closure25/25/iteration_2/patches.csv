bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	30	None	replace
2	[BUG]  [BUGGY]  n.getJSDocInfo().setMemberName(qObjName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setMemberName(qObjName);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setMemberName(qObjName);	  n.getJSDocInfo().setValue(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
3	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(qObjName,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(qObjName,  scope);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(qObjName,  scope);	  n.getJSDocInfo().setValue(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
4	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(memberName);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(memberName);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(memberName);	  n.getJSDocInfo().setValue(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
5	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(keyName);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(keyName);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(keyName);	  n.getJSDocInfo().setValue(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
6	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	29	None	replace
7	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	29	None	replace
8	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	29	None	replace
9	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()  ==  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null;    	non-compiled	[CE]  ';'  expected	6	None	replace
10	[BUG]  [BUGGY]  n.getJSDocInfo().setValueType(type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValueType(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValueType(type);	  n.getJSDocInfo().setValueType(valueType);    	non-compiled	[CE]  ';'  expected	17	None	replace
11	[BUG]  [BUGGY]  n.getJSDocInfo().setValueType(valueType,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValueType(valueType,  scope);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValueType(valueType,  scope);	  n.getJSDocInfo().setValueType(valueType);    	non-compiled	[CE]  ';'  expected	17	None	replace
12	[BUG]  [BUGGY]  n.getJSDocInfo().setLendsName(name);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setLendsName(name);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setLendsName(name);	  n.getJSDocInfo().setLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	12	None	replace
13	[BUG]  [BUGGY]  n.getJSDocInfo().setLendsName(memberName);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setLendsName(memberName);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setLendsName(memberName);	  n.getJSDocInfo().setLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	12	None	replace
14	[BUG]  [BUGGY]  n.getJSDocInfo().setKeyName(qObjName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setKeyName(qObjName);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setKeyName(qObjName);	  n.getJSDocInfo().setLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	12	None	replace
15	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasReferenceName();	  boolean    hasLendsName    =    n.hasReferenceName();    	non-compiled	[CE]  ';'  expected	21	None	replace
16	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasLendsName();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasLendsName();	  boolean    hasLendsName    =    n.hasReferenceName();    	non-compiled	[CE]  ';'  expected	21	None	replace
17	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasType();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasType();	  boolean    hasLendsName    =    n.hasReferenceName();    	non-compiled	[CE]  ';'  expected	21	None	replace
18	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasValue();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasValue();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasValue();	  boolean    hasLendsName    =    n.hasReferenceName();    	non-compiled	[CE]  ';'  expected	21	None	replace
19	[BUG]  [BUGGY]  JSDocInfo  n  =  scope.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSDocInfo  n  =  scope.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSDocInfo  n  =  scope.getNativeObjectType(JSDocInfo.UNKNOWN_TYPE);	  JSDocInfo    n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	32	None	replace
20	[BUG]  [BUGGY]  JSDocInfo  n  =  objectType.getJSDocInfo();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSDocInfo  n  =  objectType.getJSDocInfo();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSDocInfo  n  =  objectType.getJSDocInfo();	  JSDocInfo    n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	32	None	replace
21	[BUG]  [BUGGY]  JSDocInfo  n  =  scope.getNodeInfo();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSDocInfo  n  =  scope.getNodeInfo();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSDocInfo  n  =  scope.getNodeInfo();	  JSDocInfo    n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	32	None	replace
22	[BUG]  [BUGGY]  JSDocInfo  n  =  scope.getScopeInfo();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSDocInfo  n  =  scope.getScopeInfo();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSDocInfo  n  =  scope.getScopeInfo();	  JSDocInfo    n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	32	None	replace
23	[BUG]  [BUGGY]  JSDocInfo  n  =  scope.getJSDocInfoForType(type);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSDocInfo  n  =  scope.getJSDocInfoForType(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSDocInfo  n  =  scope.getJSDocInfoForType(type);	  JSDocInfo    n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	32	None	replace
24	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	4	None	replace
25	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    ||    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
26	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  objectType.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  objectType.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  ||  objectType.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasReferenceName()    &&    objectType.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	26	None	replace
27	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.hasReferenceName()    &&    objectType.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	26	None	replace
28	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  objectType.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  objectType.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  &&  objectType.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.hasReferenceName()    &&    objectType.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	26	None	replace
29	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	10	None	replace
30	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(valueType,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(valueType,  scope);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(valueType,  scope);	  n.getJSDocInfo().setValue(valueType);    	non-compiled	[CE]  ';'  expected	14	None	replace
31	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(type);	  n.getJSDocInfo().setValue(valueType);    	non-compiled	[CE]  ';'  expected	14	None	replace
32	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(objectType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(objectType);	  n.getJSDocInfo().setValue(valueType);    	non-compiled	[CE]  ';'  expected	14	None	replace
33	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().isConstructor();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().isConstructor();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().isConstructor();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
34	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().isConstructor();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().isConstructor();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().isConstructor();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
35	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isSyntheticType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isSyntheticType();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isSyntheticType();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
36	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isLenient();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isLenient();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isLenient();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
37	[BUG]  [BUGGY]  n.setJSDocInfo(type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(type);	  n.setJSDocInfo(objectType);    	non-compiled	[CE]  ';'  expected	31	None	replace
38	[BUG]  [BUGGY]  n.setJSDocInfo(valueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(valueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(valueType);	  n.setJSDocInfo(objectType);    	non-compiled	[CE]  ';'  expected	31	None	replace
39	[BUG]  [BUGGY]  n.setJSDocInfo(objectType.getJSDocInfo());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(objectType.getJSDocInfo());  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(objectType.getJSDocInfo());	  n.setJSDocInfo(objectType);    	non-compiled	[CE]  ';'  expected	31	None	replace
40	[BUG]  [BUGGY]  n.setJSDocInfo(dataType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(dataType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(dataType);	  n.setJSDocInfo(objectType);    	non-compiled	[CE]  ';'  expected	31	None	replace
41	[BUG]  [BUGGY]  n.setJSDocInfo(objectType.getReferenceName());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(objectType.getReferenceName());  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(objectType.getReferenceName());	  n.setJSDocInfo(objectType);    	non-compiled	[CE]  ';'  expected	31	None	replace
42	[BUG]  [BUGGY]  n.setJSDocInfo(baseType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(baseType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(baseType);	  n.setJSDocInfo(objectType);    	non-compiled	[CE]  ';'  expected	31	None	replace
43	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasReferenceName()  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.hasReferenceName()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	11	None	replace
44	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(value,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(value,  scope);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(value,  scope);	  n.getJSDocInfo().setValue(value);    	non-compiled	[CE]  ';'  expected	13	None	replace
45	[BUG]  [BUGGY]  n.setJSDocInfo(value);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(value);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(value);	  n.getJSDocInfo().setValue(value);    	non-compiled	[CE]  ';'  expected	13	None	replace
46	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(scope);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(scope);	  n.getJSDocInfo().setValue(value);    	non-compiled	[CE]  ';'  expected	13	None	replace
47	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasJSDocInfo();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasJSDocInfo();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasJSDocInfo();	  boolean    hasLendsName    =    n.hasJSDocInfo();    	non-compiled	[CE]  ';'  expected	34	None	replace
48	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.hasJSDocInfo();    	non-compiled	[CE]  ';'  expected	34	None	replace
49	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo().hasReferenceName();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo().hasReferenceName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo().hasReferenceName();	  boolean    hasLendsName    =    n.hasJSDocInfo();    	non-compiled	[CE]  ';'  expected	34	None	replace
50	[BUG]  [BUGGY]  n.getJSDocInfo().setObjectType(objectType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setObjectType(objectType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setObjectType(objectType);	  n.getJSDocInfo().setType(type);    	non-compiled	[CE]  ';'  expected	18	None	replace
51	[BUG]  [BUGGY]  n.getJSDocInfo().setType(valueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setType(valueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setType(valueType);	  n.getJSDocInfo().setType(objectType);    	non-compiled	[CE]  ';'  expected	33	None	replace
52	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	5	None	replace
53	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	5	None	replace
54	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenceName();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenceName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenceName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	5	None	replace
55	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName()  ||  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName()  ||  n.getJSDocInfo().isLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLendsName()  ||  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	5	None	replace
56	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isConstructor();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isConstructor();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isConstructor();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	37	None	replace
57	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isConstructor();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isConstructor();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isConstructor();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	37	None	replace
58	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isConstructorType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isConstructorType();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isConstructorType();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	37	None	replace
59	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isDeclared(type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isDeclared(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isDeclared(type);	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	37	None	replace
60	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
61	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getLends()!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getLends()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getLends()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
62	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getReferenceName()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getReferenceName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getReferenceName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
63	[BUG]  [BUGGY]  JSType  oldValueType  =  objectType.cast(value,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  objectType.cast(value,  scope);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  objectType.cast(value,  scope);	  JSType    oldValueType    =    objectType.cast(value);    	non-compiled	[CE]  ';'  expected	25	None	replace
64	[BUG]  [BUGGY]  JSType  oldValueType  =  objectType.cast(rawValueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  objectType.cast(rawValueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  objectType.cast(rawValueType);	  JSType    oldValueType    =    objectType.cast(value);    	non-compiled	[CE]  ';'  expected	25	None	replace
65	[BUG]  [BUGGY]  JSType  oldValueType  =  objectType.cast(var);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  objectType.cast(var);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  objectType.cast(var);	  JSType    oldValueType    =    objectType.cast(value);    	non-compiled	[CE]  ';'  expected	25	None	replace
66	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.hasChildren();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.hasChildren();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasChildren()  ||  n.hasChildren();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	35	None	replace
67	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasChildren();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasChildren();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasChildren();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	35	None	replace
68	[BUG]  [BUGGY]  JSType  oldValueType  =  ObjectType.cast(value,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  ObjectType.cast(value,  scope);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  ObjectType.cast(value,  scope);	  JSType    oldValueType    =    ObjectType.cast(value);    	non-compiled	[CE]  ';'  expected	24	None	replace
69	[BUG]  [BUGGY]  JSType  oldValueType  =  ObjectType.cast(value,  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  ObjectType.cast(value,  type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  ObjectType.cast(value,  type);	  JSType    oldValueType    =    ObjectType.cast(value);    	non-compiled	[CE]  ';'  expected	24	None	replace
70	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.getJSDocInfo()  ==  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.getJSDocInfo()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.getJSDocInfo()  ==  null;	  boolean    hasLendsName    =    scope.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
71	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isReferenced();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isReferenced();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  ||  n.getJSDocInfo().isReferenced();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isReferenced();    	non-compiled	[CE]  ';'  expected	38	None	replace
72	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isReferenced();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isReferenced();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().isReferenced();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isReferenced();    	non-compiled	[CE]  ';'  expected	38	None	replace
73	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isSynthetic();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isSynthetic();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isSynthetic();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isReferenced();    	non-compiled	[CE]  ';'  expected	38	None	replace
74	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferencedType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferencedType();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferencedType();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isReferenced();    	non-compiled	[CE]  ';'  expected	38	None	replace
75	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	36	None	replace
76	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasReferenceName()  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	36	None	replace
77	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	36	None	replace
78	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isLendsName();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isLendsName();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	36	None	replace
79	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    ||    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
80	[BUG]  [BUGGY]  n.setJSType(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSType(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSType(type);	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	23	None	replace
81	[BUG]  [BUGGY]  n.setJSType(valueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSType(valueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSType(valueType);	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	23	None	replace
82	[BUG]  [BUGGY]  n.setJSType(objectType.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getNativeType(UNKNOWN_TYPE));  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSType(objectType.getNativeType(UNKNOWN_TYPE));	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	23	None	replace
83	[BUG]  [BUGGY]  n.setJSType(objectType.getReferenceName());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSType(objectType.getReferenceName());  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSType(objectType.getReferenceName());	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	23	None	replace
84	[BUG]  [BUGGY]  JSType  oldValueType  =  ObjectType.cast(valueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  ObjectType.cast(valueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  ObjectType.cast(valueType);	  JSType    oldValueType    =    ObjectType.cast(type);    	non-compiled	[CE]  ';'  expected	22	None	replace
85	[BUG]  [BUGGY]  JSType  oldValueType  =  ObjectType.cast(rawValueType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  ObjectType.cast(rawValueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  ObjectType.cast(rawValueType);	  JSType    oldValueType    =    ObjectType.cast(type);    	non-compiled	[CE]  ';'  expected	22	None	replace
86	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getSimpleName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getSimpleName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getSimpleName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
87	[BUG]  [BUGGY]  n.getJSDocInfo().setObjName(qObjName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setObjName(qObjName);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setObjName(qObjName);	  n.getJSDocInfo().setLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	12	None	replace
88	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenced();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenced();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isReferenced();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isReferenced();    	non-compiled	[CE]  ';'  expected	38	None	replace
89	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLocal();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLocal();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLocal();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isReferenced();    	non-compiled	[CE]  ';'  expected	38	None	replace
90	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasReferenceName();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasReferenceName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasReferenceName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isReferenced();    	non-compiled	[CE]  ';'  expected	38	None	replace
91	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.hasReferenceName()  &&  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.hasReferenceName()    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	11	None	replace
92	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasOneChild();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasOneChild();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasOneChild();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	35	None	replace
93	[BUG]  [BUGGY]  boolean  hasLendsName  =  value.hasChildren();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  value.hasChildren();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  value.hasChildren();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	35	None	replace
94	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getReferenceName()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getReferenceName()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getReferenceName()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    ||    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
95	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(value,  qObjName);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(value,  qObjName);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(value,  qObjName);	  n.getJSDocInfo().setValue(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
96	[BUG]  [BUGGY]  n.getJSDocInfo().setValue(qObjName,  value);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValue(qObjName,  value);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValue(qObjName,  value);	  n.getJSDocInfo().setValue(qObjName);    	non-compiled	[CE]  ';'  expected	15	None	replace
97	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.hasReferenceName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.hasReferenceName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.hasReferenceName();	  boolean    hasLendsName    =    n.hasReferenceName();    	non-compiled	[CE]  ';'  expected	21	None	replace
98	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName()!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  ||  n.getJSDocInfo().hasLendsName()!=  null;	  boolean    hasLendsName    =    n.hasReferenceName()    ||    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	9	None	replace
99	[BUG]  [BUGGY]  n.getJSDocInfo().setValueType(rawValueType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setValueType(rawValueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setValueType(rawValueType);	  n.getJSDocInfo().setValueType(valueType);    	non-compiled	[CE]  ';'  expected	17	None	replace
100	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.hasJSDocInfo();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.hasJSDocInfo();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.hasJSDocInfo();	  boolean    hasLendsName    =    n.hasJSDocInfo();    	non-compiled	[CE]  ';'  expected	34	None	replace
101	[BUG]  [BUGGY]  JSType  oldValueType  =  ObjectType.cast(type,  rawValueType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  ObjectType.cast(type,  rawValueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  ObjectType.cast(type,  rawValueType);	  JSType    oldValueType    =    ObjectType.cast(type);    	non-compiled	[CE]  ';'  expected	22	None	replace
102	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  [Delete]  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  [Delete]  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  [Delete]  null;	  boolean    hasLendsName    =    n.getJSDocInfo()    >=    null;    	non-compiled	[CE]  ';'  expected	20	None	replace
103	[BUG]  [BUGGY]  JSDocInfo  n  =  scope.getJSDocInfo(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSDocInfo  n  =  scope.getJSDocInfo(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSDocInfo  n  =  scope.getJSDocInfo(type);	  JSDocInfo    n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	32	None	replace
104	[BUG]  [BUGGY]  JSDocInfo  n  =  scope.getJSDocInfo(true);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSDocInfo  n  =  scope.getJSDocInfo(true);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSDocInfo  n  =  scope.getJSDocInfo(true);	  JSDocInfo    n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	32	None	replace
105	[BUG]  [BUGGY]  JSDocInfo  n  =  scope.getJSDocInfo(this);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSDocInfo  n  =  scope.getJSDocInfo(this);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSDocInfo  n  =  scope.getJSDocInfo(this);	  JSDocInfo    n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	32	None	replace
106	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType!=  null  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType!=  null  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType!=  null  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    ||    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	3	None	replace
107	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().isConstructor();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().isConstructor();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasType()  &&  n.getJSDocInfo().isConstructor();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
108	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isFunctionType();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isFunctionType();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isFunctionType();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
109	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.getJSDocInfo()!=  null  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	29	None	replace
110	[BUG]  [BUGGY]  n.getJSDocInfo().setType(value);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setType(value);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setType(value);	  n.getJSDocInfo().setValue(value);    	non-compiled	[CE]  ';'  expected	13	None	replace
111	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isUnknownType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isUnknownType();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isUnknownType();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	37	None	replace
112	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isCollection();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isCollection();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isCollection();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	37	None	replace
113	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	23	None	replace
114	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	23	None	replace
115	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSType(getNativeType(JSTypeNative.UNKNOWN_TYPE));	  n.setJSType(objectType);    	non-compiled	[CE]  ';'  expected	23	None	replace
116	[BUG]  [BUGGY]  JSType  oldValueType  =  objectType.cast(value,  rawValueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  objectType.cast(value,  rawValueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  objectType.cast(value,  rawValueType);	  JSType    oldValueType    =    objectType.cast(value);    	non-compiled	[CE]  ';'  expected	25	None	replace
117	[BUG]  [BUGGY]  JSType  oldValueType  =  rawValueType.cast(value);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  rawValueType.cast(value);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  rawValueType.cast(value);	  JSType    oldValueType    =    objectType.cast(value);    	non-compiled	[CE]  ';'  expected	25	None	replace
118	[BUG]  [BUGGY]  boolean  hasLendsName  =  type.getJSDocInfo()!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  type.getJSDocInfo()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  type.getJSDocInfo()!=  null;	  boolean    hasLendsName    =    scope.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
119	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.getJavaType()!=  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.getJavaType()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.getJavaType()!=  null;	  boolean    hasLendsName    =    scope.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
120	[BUG]  [BUGGY]  JSType  oldValueType  =  ObjectType.cast(value,  rawValueType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  ObjectType.cast(value,  rawValueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  ObjectType.cast(value,  rawValueType);	  JSType    oldValueType    =    ObjectType.cast(value);    	non-compiled	[CE]  ';'  expected	24	None	replace
121	[BUG]  [BUGGY]  JSType  oldValueType  =  ObjectType.cast(value,  valueType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  ObjectType.cast(value,  valueType);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  ObjectType.cast(value,  valueType);	  JSType    oldValueType    =    ObjectType.cast(value);    	non-compiled	[CE]  ';'  expected	24	None	replace
122	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isAllowLendsName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isAllowLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isAllowLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isLendsName();    	non-compiled	[CE]  ';'  expected	5	None	replace
123	[BUG]  [BUGGY]  n.setJSDocInfo(data);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(data);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(data);	  n.setJSDocInfo(objectType);    	non-compiled	[CE]  ';'  expected	31	None	replace
124	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.hasReferenceName()  &&  objectType.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.hasReferenceName()  &&  objectType.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.hasReferenceName()  &&  objectType.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasReferenceName()    &&    objectType.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	26	None	replace
125	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  ||  objectType.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasReferenceName()  ||  objectType.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasReferenceName()  ||  objectType.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    n.hasReferenceName()    &&    objectType.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	26	None	replace
126	[BUG]  [BUGGY]  n.setJSDocInfo(this);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setJSDocInfo(this);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setJSDocInfo(this);	  n.setJSDocInfo(objectType);    	non-compiled	[CE]  ';'  expected	31	None	replace
127	[BUG]  [BUGGY]  n.getJSDocInfo().setMemberName(memberName);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.getJSDocInfo().setMemberName(memberName);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.getJSDocInfo().setMemberName(memberName);	  n.getJSDocInfo().setLendsName(qObjName);    	non-compiled	[CE]  ';'  expected	12	None	replace
128	[BUG]  [BUGGY]  JSType  oldValueType  =  objectType.cast(type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  objectType.cast(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  objectType.cast(type);	  JSType    oldValueType    =    objectType.cast(value);    	non-compiled	[CE]  ';'  expected	25	None	replace
129	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.isAllType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.isAllType();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.isAllType();	  boolean    hasLendsName    =    scope.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
130	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasDeclaration()  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasDeclaration()  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasDeclaration()  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	36	None	replace
131	[BUG]  [BUGGY]  n.setType(type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  n.setType(type);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	n.setType(type);	  n.getJSDocInfo().setType(objectType);    	non-compiled	[CE]  ';'  expected	33	None	replace
132	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  &&  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	4	None	replace
133	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasJSDocInfo()  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasJSDocInfo()  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    ||    n.getJSDocInfo().hasLendsName();    	non-compiled	[CE]  ';'  expected	3	None	replace
134	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isInterface();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isInterface();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isInterface();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	37	None	replace
135	[BUG]  [BUGGY]  JSType  oldValueType  =  ObjectType.cast(val);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  oldValueType  =  ObjectType.cast(val);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  oldValueType  =  ObjectType.cast(val);	  JSType    oldValueType    =    ObjectType.cast(type);    	non-compiled	[CE]  ';'  expected	22	None	replace
136	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasLendsName()  ||  n.hasChildren();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasLendsName()  ||  n.hasChildren();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasLendsName()  ||  n.hasChildren();	  boolean    hasLendsName    =    n.hasReferenceName();    	non-compiled	[CE]  ';'  expected	21	None	replace
137	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.hasLendsName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.hasLendsName();	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
138	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.isLends();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.isLends();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.isLends();	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	7	None	replace
139	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getScope()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getScope()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getScope()!=  null  &&  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    &&    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	19	None	replace
140	[BUG]  [BUGGY]  JSType  valueType  =  ObjectType.cast(value);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  JSType  valueType  =  ObjectType.cast(value);  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	JSType  valueType  =  ObjectType.cast(value);	  JSType    oldValueType    =    ObjectType.cast(value);    	non-compiled	[CE]  ';'  expected	24	None	replace
141	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasSimpleName();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasSimpleName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasSimpleName();	  boolean    hasLendsName    =    n.hasJSDocInfo();    	non-compiled	[CE]  ';'  expected	34	None	replace
142	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()    ==    null    &&    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	30	None	replace
143	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()  ==  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()  ==  null  ||  n.getJSDocInfo().getLendsName()  ==  null;	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    ||    n.getJSDocInfo().getLendsName()    ==    null;    	non-compiled	[CE]  ';'  expected	1	None	replace
144	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLends();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLends();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.getJSDocInfo()!=  null  &&  n.getJSDocInfo().isLends();	  boolean    hasLendsName    =    n.getJSDocInfo()!=    null    &&    n.getJSDocInfo().isReferenced();    	non-compiled	[CE]  ';'  expected	38	None	replace
145	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasDeclaration()  &&  n.getJSDocInfo().isConstructor();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasDeclaration()  &&  n.getJSDocInfo().isConstructor();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasDeclaration()  &&  n.getJSDocInfo().isConstructor();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
146	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isInterface();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
147	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isUnknownType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isUnknownType();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasReferenceName()  &&  n.getJSDocInfo().isUnknownType();	  boolean    hasLendsName    =    n.hasReferenceName()    &&    n.getJSDocInfo().isConstructor();    	non-compiled	[CE]  ';'  expected	27	None	replace
148	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().hasLendsName();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().hasLendsName();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.hasChildren()  ||  n.getJSDocInfo().hasLendsName();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	35	None	replace
149	[BUG]  [BUGGY]  boolean  hasLendsName  =  n.isLends();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  n.isLends();  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  n.isLends();	  boolean    hasLendsName    =    n.hasChildren();    	non-compiled	[CE]  ';'  expected	35	None	replace
150	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getScope()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getScope()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getScope()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    ||    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
151	[BUG]  [BUGGY]  boolean  hasLendsName  =  scope.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  scope.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  scope.getJSDocInfo()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    ||    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
152	[BUG]  [BUGGY]  boolean  hasLendsName  =  objectType.getSimpleName()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]            ObjectType  objectType  =  ObjectType.cast(type);  if  (objectType  ==  null)  {  return  scope;  }      [BUGGY]  boolean  hasLendsName  =  objectType.getSimpleName()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;  [BUGGY]      n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  String  qObjName  =  NodeUtil.getBestLValueName(  NodeUtil.getBestLValue(n));  for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  Node  value  =  name.getFirstChild();  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	667	668	1	replace	boolean  hasLendsName  =  objectType.getSimpleName()!=  null  ||  n.getJSDocInfo().getLendsName()!=  null;	  boolean    hasLendsName    =    objectType.getJSDocInfo()!=    null    ||    n.getJSDocInfo().getLendsName()!=    null;    	non-compiled	[CE]  ';'  expected	2	None	replace
