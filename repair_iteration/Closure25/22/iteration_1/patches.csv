bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getString())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getString())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
2	[BUG]  [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
3	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
5	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
6	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getString())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getString())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
7	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
8	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
9	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
10	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {	  for(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
11	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {	  for(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
12	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  scope);  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	4	None	replace
13	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  Node  name  =  n.getFirstChild();  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getFirstChild();	      	non-compiled	[CE]  ';'  expected	4	None	replace
14	[BUG]  [BUGGY]  scope  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  scope  =  traverse(name.getLastChild(),  scope);  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  scope);  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(name.getFirstChild(),  scope);	      	non-compiled	[CE]  ';'  expected	4	None	replace
16	[BUG]  [BUGGY]  scope  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  scope  =  traverse(name.getFirstChild(),  scope);  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(name.getFirstChild(),  scope);	      	non-compiled	[CE]  ';'  expected	4	None	replace
17	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  name);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  name);  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(name.getLastChild(),  name);	      	non-compiled	[CE]  ';'  expected	4	None	replace
18	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);	      	non-compiled	[CE]  ';'  expected	4	None	replace
19	[BUG]  [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getString())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getString())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
20	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
21	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
22	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getValue())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getValue())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getValue())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
23	[BUG]  [BUGGY]  for(Node  name  =  n.getfirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  n.getfirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getfirstChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
24	[BUG]  [BUGGY]  for(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
25	[BUG]  [BUGGY]  JSType  name  =  n.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  JSType  name  =  n.getJSType();  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  n.getJSType();	      	non-compiled	[CE]  ';'  expected	4	None	replace
26	[BUG]  [BUGGY]  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);	      	non-compiled	[CE]  ';'  expected	4	None	replace
27	[BUG]  [BUGGY]  Node  name  =  n.getLastChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  Node  name  =  n.getLastChild();  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getLastChild();	      	non-compiled	[CE]  ';'  expected	4	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkNotNull(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  Preconditions.checkNotNull(type);  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkNotNull(type);	      	non-compiled	[CE]  ';'  expected	4	None	replace
29	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  :  n.getFirstChild(),  name!=  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild(),  name!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
30	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  :  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
31	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
32	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ";  name  =  name.getNext())  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ";  name  =  name.getNext())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ";  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.toString())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.toString())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.toString())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
34	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
35	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType())  {  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
36	[BUG]  [BUGGY]  Scope.Var  name  =  n.getFirstChild();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);    [BUGGY]  Scope.Var  name  =  n.getFirstChild();  [BUGGY]    scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  n.getFirstChild();	      	non-compiled	[CE]  ';'  expected	4	None	replace
