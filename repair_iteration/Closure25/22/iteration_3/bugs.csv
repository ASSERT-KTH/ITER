bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JSType  name  =  type.getJSType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  JSType  name  =  type.getJSType();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  type.getJSType();	  JSType    name    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	25	None	replace
2	[BUG]  [BUGGY]  JSType  name  =  type!=  null?  scope.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  JSType  name  =  type!=  null?  scope.getJSType()  :  n.getJSType();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  type!=  null?  scope.getJSType()  :  n.getJSType();	  JSType    name    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	25	None	replace
3	[BUG]  [BUGGY]  JSType  name  =  scope.getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  JSType  name  =  scope.getJSType();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  scope.getJSType();	  JSType    name    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	25	None	replace
4	[BUG]  [BUGGY]  JSType  name  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  JSType  name  =  n.getFirstChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  n.getFirstChild();	  JSType    name    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	25	None	replace
5	[BUG]  [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
7	[BUG]  [BUGGY]  For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
8	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getType()  ==  Token.FUNCTION)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
9	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.FUNCTION)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
10	[BUG]  [BUGGY]  Node  name  =  n.getLastChild();  Preconditions.checkNotNull(name);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getLastChild();  Preconditions.checkNotNull(name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getLastChild();  Preconditions.checkNotNull(name);	  Node    name    =    n.getFirstChild();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	18	None	replace
11	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Name  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Name  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);	  Node    name    =    n.getFirstChild();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	18	None	replace
12	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkState(name.length()  ==  0);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkState(name.length()  ==  0);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getFirstChild();  Preconditions.checkState(name.length()  ==  0);	  Node    name    =    n.getFirstChild();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	18	None	replace
13	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkState(name!=  null);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkState(name!=  null);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getFirstChild();  Preconditions.checkState(name!=  null);	  Node    name    =    n.getFirstChild();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	18	None	replace
14	[BUG]  [BUGGY]  Node  name  =  n.getLastChild();  Preconditions.checkState(name.length()  ==  0);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getLastChild();  Preconditions.checkState(name.length()  ==  0);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getLastChild();  Preconditions.checkState(name.length()  ==  0);	  Node    name    =    n.getFirstChild();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	18	None	replace
15	[BUG]  [BUGGY]  Node  name  =  type.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  type.getLastChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  type.getLastChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	27	None	replace
16	[BUG]  [BUGGY]  Node  name  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  scope.getLastChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  scope.getLastChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	27	None	replace
17	[BUG]  [BUGGY]  Node  name  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  scope.getFirstChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  scope.getFirstChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	27	None	replace
18	[BUG]  [BUGGY]  Node  name  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  type.getFirstChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  type.getFirstChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	27	None	replace
19	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
20	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
21	[BUG]  [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getString())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
22	[BUG]  [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(n.getFirstChild(),  scope);	  scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
23	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(n.getLastChild(),  scope);	  scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
24	[BUG]  [BUGGY]  scope  =  traverse(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(n.getJSType(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(n.getJSType(),  scope);	  scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
25	[BUG]  [BUGGY]  scope  =  traverse(n.getString(),  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(n.getString(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(n.getString(),  scope);	  scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
26	[BUG]  [BUGGY]  scope  =  traverse(n.getType(),  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(n.getType(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(n.getType(),  scope);	  scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
27	[BUG]  [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.toString())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.toString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.toString())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.toString())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
28	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.toString())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.toString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.toString())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.toString())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
29	[BUG]  [BUGGY]  for(Node  name  =  n.getNext();  name!=  null;  name  =  name.toString())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getNext();  name!=  null;  name  =  name.toString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getNext();  name!=  null;  name  =  name.toString())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.toString())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
30	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.toString())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.toString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.toString())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.toString())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkState(type!=  null);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkState(type!=  null);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(!hasLendsName);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkState(!hasLendsName);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkState(!hasLendsName);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkNotNull(scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkNotNull(scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkNotNull(scope);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
37	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  name);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(name.getFirstChild(),  name);	  Scope    scope    =    traverse(name.getLastChild(),    name);    	non-compiled	[CE]  ';'  expected	17	None	replace
38	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  name);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(n.getLastChild(),  name);	  Scope    scope    =    traverse(name.getLastChild(),    name);    	non-compiled	[CE]  ';'  expected	17	None	replace
39	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  type);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  type);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(name.getLastChild(),  type);	  Scope    scope    =    traverse(name.getLastChild(),    name);    	non-compiled	[CE]  ';'  expected	17	None	replace
40	[BUG]  [BUGGY]  scope  =  traverse(name.getFirstChild(),  name);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(name.getFirstChild(),  name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(name.getFirstChild(),  name);	  Scope    scope    =    traverse(name.getLastChild(),    name);    	non-compiled	[CE]  ';'  expected	17	None	replace
41	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getFirstChild(),  name);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(n.getFirstChild(),  name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(n.getFirstChild(),  name);	  Scope    scope    =    traverse(name.getLastChild(),    name);    	non-compiled	[CE]  ';'  expected	17	None	replace
42	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  value);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  value);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(name.getLastChild(),  value);	  Scope    scope    =    traverse(name.getLastChild(),    name);    	non-compiled	[CE]  ';'  expected	17	None	replace
43	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  scope!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild(),  scope!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild(),  scope!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
44	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  scope  ==  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild(),  scope  ==  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild(),  scope  ==  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
45	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild(),  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getLastChild(),  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getLastChild(),  name!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
46	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild(),  scope!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild(),  scope!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild(),  scope!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
47	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  scope  >=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild(),  scope  >=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild(),  scope  >=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
48	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
49	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
50	[BUG]  [BUGGY]  for(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getString())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
51	[BUG]  [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    =    node.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
52	[BUG]  [BUGGY]  For(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    =    node.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
53	[BUG]  [BUGGY]  scope  =  traverse(name.getString(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(name.getString(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(name.getString(),  scope);	  scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	14	None	replace
54	[BUG]  [BUGGY]  scope  =  traverse(name.getNext(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(name.getNext(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(name.getNext(),  scope);	  scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	14	None	replace
55	[BUG]  [BUGGY]  scope  =  traverse(name.getJSType(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(name.getJSType(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(name.getJSType(),  scope);	  scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	14	None	replace
56	[BUG]  [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getQualifiedName())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
57	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).toLowerCase())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).toLowerCase())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).toLowerCase())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
58	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedKey())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedKey())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedKey())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
59	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).returnNull();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).returnNull();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).returnNull();	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
60	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
61	[BUG]  [BUGGY]  Scope.Var  name  =  n.getLastChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  n.getLastChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  n.getLastChild();	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
62	[BUG]  [BUGGY]  Scope.Var  name  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  type.getFirstChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  type.getFirstChild();	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
63	[BUG]  [BUGGY]  Scope.Var  name  =  scope.getVar(n.getFirstChild());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  scope.getVar(n.getFirstChild());  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  scope.getVar(n.getFirstChild());	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
64	[BUG]  [BUGGY]  Scope.Var  name  =  n.getString();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  n.getString();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  n.getString();	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
65	[BUG]  [BUGGY]  Scope.Var  name  =  scope.getVar(n.getLastChild());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  scope.getVar(n.getLastChild());  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  scope.getVar(n.getLastChild());	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
66	[BUG]  [BUGGY]  Scope.Var  name  =  n.getSimpleName();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  n.getSimpleName();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  n.getSimpleName();	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
67	[BUG]  [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getQualifiedName())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
68	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedKey())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedKey())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedKey())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
69	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).restrictByNotNullOrUndefined()  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).restrictByNotNullOrUndefined()  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName()).restrictByNotNullOrUndefined()  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
70	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(n.getFirstChild(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(n.getFirstChild(),  scope);	  Scope    scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
71	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(n.getLastChild(),  scope);	  Scope    scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
72	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(n.getJSType(),  scope);	  Scope    scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
73	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getType(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(n.getType(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(n.getType(),  scope);	  Scope    scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
74	[BUG]  [BUGGY]  Node  name  =  n.getNext();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getNext();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getNext();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
75	[BUG]  [BUGGY]  Node  name  =  n.getLocalName();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getLocalName();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getLocalName();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
76	[BUG]  [BUGGY]  Node  name  =  n.getString();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getString();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getString();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
77	[BUG]  [BUGGY]  For(Node  name  =  scope.getLastChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  scope.getLastChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  scope.getLastChild();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    =    scope.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
78	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  scope.getFirstChild();  name!=  null;  name  =  name.getString())  {	  For(Node    name    =    scope.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
79	[BUG]  [BUGGY]  For(Node  name  =  scope.getFirstChild(),  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  scope.getFirstChild(),  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  scope.getFirstChild(),  name!=  null;  name  =  name.getNext())  {	  For(Node    name    =    scope.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
80	[BUG]  [BUGGY]  For(Node  name  =  type.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  type.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  type.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    =    scope.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getKey())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getKey())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getKey())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getValue())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
82	[BUG]  [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getValue())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getValue())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getValue())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getValue())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
83	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getValue())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
84	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getValue())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getValue())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getValue())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getValue())    {    	non-compiled	[CE]  ';'  expected	22	None	replace
85	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getFirstChild())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	21	None	replace
86	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {	  For(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
87	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getString(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(name.getString(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(name.getString(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
88	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getNext(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(name.getNext(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(name.getNext(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
89	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getString())  {	  For(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
90	[BUG]  [BUGGY]  For(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getLastChild();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
91	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getLastChild())  {	  For(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
92	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild(),  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild(),  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild(),  name!=  null;  name  =  name.getNext())  {	  For(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
93	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getPrefix())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getPrefix())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getPrefix())  {	  For(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
94	[BUG]  [BUGGY]  For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getString())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
95	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name  >=  null;  name  =  name.getString())  {	  for(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
96	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getString())  {	  for(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
97	[BUG]  [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getType())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getType())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
98	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext().getType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext().getType())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext().getType())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
99	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
100	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkNotNull(n);	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkNotNull(n.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkNotNull(n.getJSType());  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkNotNull(n.getJSType());	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
103	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getFirstChild(),  scope);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getFirstChild(),  scope);  }  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getFirstChild(),  scope);  }	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
104	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getLastChild(),  scope);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getLastChild(),  scope);  }  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	if(n.getType()  ==  Token.NAME)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getLastChild(),  scope);  }	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
105	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name  >=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
106	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "null ";  name  =  name.getNext())  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "null ";  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "null ";  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =   "   ";    name    =    name.getNext())    {    	non-compiled	[CE]  	32	None	replace
107	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =   "[ ";  name  =  name.getNext())  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  =   "[ ";  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  =   "[ ";  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =   "   ";    name    =    name.getNext())    {    	non-compiled	[CE]  	32	None	replace
108	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "   ";  name  =  name.getString())  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "   ";  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "   ";  name  =  name.getString())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =   "   ";    name    =    name.getNext())    {    	non-compiled	[CE]  	32	None	replace
109	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ",  name  =  name.getNext())  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ",  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ",  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =   "   ";    name    =    name.getNext())    {    	non-compiled	[CE]  	32	None	replace
110	[BUG]  [BUGGY]  for(Node  name  :  n.getfirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getfirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getfirstChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
111	[BUG]  [BUGGY]  for(Node  name  :  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  node.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
112	[BUG]  [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getFirstChild())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getFirstChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getFirstChild())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
113	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  name  ==  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild(),  name  ==  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild(),  name  ==  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
114	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  value!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild(),  value!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild(),  value!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
115	[BUG]  [BUGGY]  Scope  scope  =  traverse(scope.getLastChild(),  name);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(scope.getLastChild(),  name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(scope.getLastChild(),  name);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
116	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(type.getLastChild(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(type.getLastChild(),  scope);	  Scope    scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
117	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getJSType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getJSType())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getJSType())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
118	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getName())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getName())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
119	[BUG]  [BUGGY]  for(Node  name  :  n.getNext();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getNext();  name!=  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getNext();  name!=  null;  name  =  name.getString())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
120	[BUG]  [BUGGY]  scope  =  traverse(type.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(type.getLastChild(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(type.getLastChild(),  scope);	  scope    =    traverse(name.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	14	None	replace
121	[BUG]  [BUGGY]  Node  name  =  node.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  node.getLastChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  node.getLastChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	27	None	replace
122	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Name  name  =  n.getFirstChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Name  name  =  n.getFirstChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	27	None	replace
123	[BUG]  [BUGGY]  Scope  scope  =  traverse(value.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(value.getLastChild(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(value.getLastChild(),  scope);	  Scope    scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
124	[BUG]  [BUGGY]  Scope.Var  name  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  scope.getFirstChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  scope.getFirstChild();	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
125	[BUG]  [BUGGY]  Scope.Var  name  =  n.getFirstChild().getString();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  n.getFirstChild().getString();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  n.getFirstChild().getString();	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
126	[BUG]  [BUGGY]  Scope.Var  name  =  n.getNext();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope.Var  name  =  n.getNext();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope.Var  name  =  n.getNext();	  Scope.Var    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	36	None	replace
127	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getName())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
128	[BUG]  [BUGGY]  for(Node  name  =  n.getNext();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getNext();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getNext();  name!=  null;  name  =  name.getQualifiedName())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
129	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild();  name  ==  null;  name  =  name.getNext())  {	  For(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
130	[BUG]  [BUGGY]  For(String  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(String  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(String  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
131	[BUG]  [BUGGY]  For(Name  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Name  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Name  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
132	[BUG]  [BUGGY]  JSType  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  JSType  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  n.getFirstChild();  Preconditions.checkNotNull(name);	  Node    name    =    n.getFirstChild();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	18	None	replace
133	[BUG]  [BUGGY]  if(n.hasChildren())  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  if(n.hasChildren())  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	if(n.hasChildren())  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
134	[BUG]  [BUGGY]  if(n.hasChildren())  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getFirstChild(),  scope);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  if(n.hasChildren())  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getFirstChild(),  scope);  }  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	if(n.hasChildren())  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  else  {  scope  =  traverse(n.getFirstChild(),  scope);  }	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
135	[BUG]  [BUGGY]  if(n.getType()  ==  Token.OBJECTLIT)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  if(n.getType()  ==  Token.OBJECTLIT)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	if(n.getType()  ==  Token.OBJECTLIT)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
136	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  JSType  name  =  n.getJSType();  Preconditions.checkNotNull(name);  }	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
137	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = ",  hasLendsName  =  true;  name  =  name.getNext())  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = ",  hasLendsName  =  true;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = ",  hasLendsName  =  true;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =   "   ";    name    =    name.getNext())    {    	non-compiled	[CE]  	32	None	replace
138	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = ",  hasLendsName  =  false;  name  =  name.getNext())  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = ",  hasLendsName  =  false;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = ",  hasLendsName  =  false;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =   "   ";    name    =    name.getNext())    {    	non-compiled	[CE]  	32	None	replace
139	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.NAME)  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.NAME)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
140	[BUG]  [BUGGY]  for(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getString())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  node.getFirstChild();  name!=  null;  name  =  name.getString())  {	  for(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  ';'  expected	19	None	replace
141	[BUG]  [BUGGY]  scope  =  traverse(n.getNext(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  scope  =  traverse(n.getNext(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	scope  =  traverse(n.getNext(),  scope);	  scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	16	None	replace
142	[BUG]  [BUGGY]  Scope  scope  =  traverse(value.getLastChild(),  name);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(value.getLastChild(),  name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(value.getLastChild(),  name);	  Scope    scope    =    traverse(name.getLastChild(),    name);    	non-compiled	[CE]  ';'  expected	17	None	replace
143	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild().getNext();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getFirstChild().getNext();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getFirstChild().getNext();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
144	[BUG]  [BUGGY]  For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getNext();  name!=  null;  name  =  name.getQualifiedName())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
145	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getQualifiedName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.getQualifiedName())  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getQualifiedName())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
146	[BUG]  [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getFirstChild())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getFirstChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getLastChild();  name!=  null;  name  =  name.getFirstChild())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  ';'  expected	21	None	replace
147	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.toString())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.toString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name  ==  null;  name  =  name.toString())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.toString())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkNotNull(objectType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkNotNull(objectType);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkNotNull(objectType);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkNotNull(valueType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkNotNull(valueType);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkNotNull(valueType);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkNotNull(name);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkNotNull(name);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkNotNull(name);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkNotNull(value);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkNotNull(value);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkNotNull(value);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
152	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  this.memberName!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild(),  this.memberName!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild(),  this.memberName!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
153	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild(),  type!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild(),  type!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild(),  type!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getFirstChild(),    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
154	[BUG]  [BUGGY]  Node  name  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.removeFirstChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.removeFirstChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	27	None	replace
155	[BUG]  [BUGGY]  Node  name  =  node.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  node.getFirstChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  node.getFirstChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	27	None	replace
156	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild().getLastChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getFirstChild().getLastChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getFirstChild().getLastChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	13	None	replace
157	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ";  name  =  name.getLastChild())  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ";  name  =  name.getLastChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = " ";  name  =  name.getLastChild())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  	9	None	replace
158	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object ".equals(name.getLastChild()))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object ".equals(name.getLastChild()))  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object ".equals(name.getLastChild()))  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  	9	None	replace
159	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "java.util.ArrayList ");  name  =  name.getLastChild())  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "java.util.ArrayList ");  name  =  name.getLastChild())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "java.util.ArrayList ");  name  =  name.getLastChild())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getLastChild())    {    	non-compiled	[CE]  	9	None	replace
160	[BUG]  [BUGGY]  for(Node  name  =  type.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  type.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  type.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    =    n.getFirstChild();    name    ==    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	10	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkArgument(type!=  null);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkArgument(type!=  null);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkState(n.hasChildren());	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkArgument(n.hasChildren());	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Preconditions.checkState(n.hasOneChild());  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Preconditions.checkState(n.hasOneChild());	  Preconditions.checkNotNull(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
167	[BUG]  [BUGGY]  JSType  name  =  n.getJSType();  Preconditions.checkArgument(name.length()  ==  0);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  JSType  name  =  n.getJSType();  Preconditions.checkArgument(name.length()  ==  0);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  n.getJSType();  Preconditions.checkArgument(name.length()  ==  0);	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
168	[BUG]  [BUGGY]  JSType  name  =  n.getJSType();  Preconditions.checkState(name!=  null);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  JSType  name  =  n.getJSType();  Preconditions.checkState(name!=  null);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  n.getJSType();  Preconditions.checkState(name!=  null);	  JSType    name    =    n.getJSType();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	26	None	replace
169	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getProp(Node.SOURCENAME_PROP))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getProp(Node.SOURCENAME_PROP))  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getProp(Node.SOURCENAME_PROP))  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
170	[BUG]  [BUGGY]  Scope  scope  =  traverse(value.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(value.getFirstChild(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(value.getFirstChild(),  scope);	  Scope    scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
171	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getString(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Scope  scope  =  traverse(n.getString(),  scope);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Scope  scope  =  traverse(n.getString(),  scope);	  Scope    scope    =    traverse(name.getFirstChild(),    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
172	[BUG]  [BUGGY]  for(Node  name  :  n.getChildren();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getChildren();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getChildren();  name!=  null;  name  =  name.getNext())  {	  for(Node    name    :    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
173	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkArgument(name.length()  ==  0);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkArgument(name.length()  ==  0);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getFirstChild();  Preconditions.checkArgument(name.length()  ==  0);	  Node    name    =    n.getFirstChild();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	18	None	replace
174	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkArgument(name!=  null);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  Node  name  =  n.getFirstChild();  Preconditions.checkArgument(name!=  null);  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	Node  name  =  n.getFirstChild();  Preconditions.checkArgument(name!=  null);	  Node    name    =    n.getFirstChild();    Preconditions.checkNotNull(name);    	non-compiled	[CE]  ';'  expected	18	None	replace
175	[BUG]  [BUGGY]  JSType  name  =  n.getLastChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  JSType  name  =  n.getLastChild();  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	JSType  name  =  n.getLastChild();	  JSType    name    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	25	None	replace
176	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild().getNext();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild().getNext();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild().getNext();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
177	[BUG]  [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  :  n.getFirstChild();  name!=  null;  name  =  name.getQualifiedName())  {	  For(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
178	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object ".equals(name.getString()))  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object ".equals(name.getString()))  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object ".equals(name.getString()))  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  	6	None	replace
179	[BUG]  [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object "  +  name.getString())  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object "  +  name.getString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  :  n.getFirstChild();  name!=  null;  name  = "object "  +  name.getString())  {	  for(Node    name    :    n.getFirstChild();    name!=    null;    name    =    name.getString())    {    	non-compiled	[CE]  	6	None	replace
180	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.trim())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.trim())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.trim())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.toString())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
181	[BUG]  [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  nameName  =  name.toString())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  for(Node  name  =  n.getFirstChild();  name!=  null;  nameName  =  name.toString())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	for(Node  name  =  n.getFirstChild();  name!=  null;  nameName  =  name.toString())  {	  for(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.toString())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
182	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.VAR)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.VAR)  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  ==  Token.VAR)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
183	[BUG]  [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  >=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  >=  Token.FUNCTION)  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	For(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getType()  >=  Token.FUNCTION)  {	  For(Node    name    =    n.getFirstChild();    name!=    null;    name    =    name.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ';'  expected	4	None	replace
184	[BUG]  [BUGGY]  FOR(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  Preconditions.checkNotNull(type);      [BUGGY]  FOR(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {  [BUGGY]      scope  =  traverse(name.getFirstChild(),  scope);  }        ObjectType  objectType  =  ObjectType.cast(type);  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	652	652	1	replace	FOR(Node  name  =  n.getFirstChild();  name!=  null;  name  =  name.getNext())  {	  For(Node    name    =    n.getLastChild();    name!=    null;    name    =    name.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
