bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(valueType,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(valueType,  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(valueType,  scope);	  ObjectType    objectType    =    ObjectType.cast(valueType);    	non-compiled	[CE]  ';'  expected	8	None	replace
2	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(n);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(n);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(n);	  ObjectType    objectType    =    ObjectType.cast(valueType);    	non-compiled	[CE]  ';'  expected	8	None	replace
3	[BUG]  [BUGGY]  scope  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  scope  =  traverse(name.getLastChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	scope  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
4	[BUG]  [BUGGY]  Scope  objectType  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  Scope  objectType  =  traverse(name.getLastChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	Scope  objectType  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
5	[BUG]  [BUGGY]  Scope  objectType  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  Scope  objectType  =  traverse(name.getFirstChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	Scope  objectType  =  traverse(name.getFirstChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
6	[BUG]  [BUGGY]  scope  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  scope  =  traverse(name.getFirstChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	scope  =  traverse(name.getFirstChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
7	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  Scope  scope  =  traverse(name.getLastChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	Scope  scope  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
8	[BUG]  [BUGGY]  Scope  objectType  =  traverse(name.getNext(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  Scope  objectType  =  traverse(name.getNext(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	Scope  objectType  =  traverse(name.getNext(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
9	[BUG]  [BUGGY]  Node  objectType  =  name.getFirstChild();  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  Node  objectType  =  name.getFirstChild();  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	Node  objectType  =  name.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
10	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(scope,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(scope,  type);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(scope,  type);	  ObjectType    objectType    =    ObjectType.cast(type,    scope);    	non-compiled	[CE]  ';'  expected	6	None	replace
11	[BUG]  [BUGGY]  JSType  objectType  =  ObjectType.cast(name,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  JSType  objectType  =  ObjectType.cast(name,  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	JSType  objectType  =  ObjectType.cast(name,  scope);	  ObjectType    objectType    =    ObjectType.cast(type,    scope);    	non-compiled	[CE]  ';'  expected	6	None	replace
12	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(n,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(n,  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(n,  scope);	  ObjectType    objectType    =    ObjectType.cast(type,    scope);    	non-compiled	[CE]  ';'  expected	6	None	replace
13	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(value,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(value,  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(value,  scope);	  ObjectType    objectType    =    ObjectType.cast(type,    scope);    	non-compiled	[CE]  ';'  expected	6	None	replace
14	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  valueType);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  valueType);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  scope,  valueType);	  ObjectType    objectType    =    ObjectType.cast(name,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
15	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  scope,  scope);	  ObjectType    objectType    =    ObjectType.cast(name,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
16	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  hasLendsName);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  hasLendsName);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  scope,  hasLendsName);	  ObjectType    objectType    =    ObjectType.cast(name,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
17	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  value);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  value);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  scope,  value);	  ObjectType    objectType    =    ObjectType.cast(name,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
18	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  status);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  status);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  scope,  status);	  ObjectType    objectType    =    ObjectType.cast(name,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
19	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  type);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  scope,  type);	  ObjectType    objectType    =    ObjectType.cast(name,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
20	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(scope,  name);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(scope,  name);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(scope,  name);	  ObjectType    objectType    =    ObjectType.cast(scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
21	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(registry);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(registry);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(registry);	  ObjectType    objectType    =    ObjectType.cast(scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
22	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(scope,  value);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(scope,  value);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(scope,  value);	  ObjectType    objectType    =    ObjectType.cast(scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
23	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(scope,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(scope,  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(scope,  scope);	  ObjectType    objectType    =    ObjectType.cast(scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
24	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  type,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  type,  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  type,  scope);	  ObjectType    objectType    =    ObjectType.cast(name,    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
25	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  valueType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  valueType);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  valueType);	  ObjectType    objectType    =    ObjectType.cast(name,    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
26	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  value);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  value);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  value);	  ObjectType    objectType    =    ObjectType.cast(name,    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
27	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  name);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  name);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  name);	  ObjectType    objectType    =    ObjectType.cast(name,    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
28	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(type,  name);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(type,  name);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(type,  name);	  ObjectType    objectType    =    ObjectType.cast(name,    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
29	[BUG]  [BUGGY]  if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }  else  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }  else  {  scope  =  traverse(name.getFirstChild(),  scope);  }  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }  else  {  scope  =  traverse(name.getFirstChild(),  scope);  }	  ObjectType    objectType    =    ObjectType.cast(name);    	non-compiled	[CE]  ';'  expected	1	None	replace
30	[BUG]  [BUGGY]  if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }  else  {  scope  =  traverse(name.getLastChild(),  scope);  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }  else  {  scope  =  traverse(name.getLastChild(),  scope);  }  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }  else  {  scope  =  traverse(name.getLastChild(),  scope);  }	  ObjectType    objectType    =    ObjectType.cast(name);    	non-compiled	[CE]  ';'  expected	1	None	replace
31	[BUG]  [BUGGY]  if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	if(name!=  null)  {  ObjectType  objectType  =  ObjectType.cast(name);  }	  ObjectType    objectType    =    ObjectType.cast(name);    	non-compiled	[CE]  ';'  expected	1	None	replace
32	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(value,  name);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(value,  name);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(value,  name);	  ObjectType    objectType    =    ObjectType.cast(value);    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  rawValueType);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  rawValueType);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  scope,  rawValueType);	  ObjectType    objectType    =    ObjectType.cast(name,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(valueType,  name);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(valueType,  name);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(valueType,  name);	  ObjectType    objectType    =    ObjectType.cast(valueType);    	non-compiled	[CE]  ';'  expected	8	None	replace
35	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(value,  type);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(value,  type);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(value,  type);	  ObjectType    objectType    =    ObjectType.cast(name,    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
36	[BUG]  [BUGGY]  JSType  objectType  =  ObjectType.cast(name);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  JSType  objectType  =  ObjectType.cast(name);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	JSType  objectType  =  ObjectType.cast(name);	  ObjectType    objectType    =    ObjectType.cast(scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
37	[BUG]  [BUGGY]  JSType  objectType  =  ObjectType.cast(scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  JSType  objectType  =  ObjectType.cast(scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	JSType  objectType  =  ObjectType.cast(scope);	  ObjectType    objectType    =    ObjectType.cast(scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
38	[BUG]  [BUGGY]  JSType  objectType  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  JSType  objectType  =  traverse(name.getLastChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	JSType  objectType  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
39	[BUG]  [BUGGY]  JSType  objectType  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  JSType  objectType  =  traverse(name.getFirstChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	JSType  objectType  =  traverse(name.getFirstChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
40	[BUG]  [BUGGY]  ObjectType  objectType  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  traverse(name.getFirstChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  traverse(name.getFirstChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
41	[BUG]  [BUGGY]  ObjectType  objectType  =  traverse(name.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  traverse(name.getLastChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  traverse(name.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
42	[BUG]  [BUGGY]  JSType  objectType  =  traverse(name.getNext(),  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  JSType  objectType  =  traverse(name.getNext(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	JSType  objectType  =  traverse(name.getNext(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
43	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  interpreter);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name,  scope,  interpreter);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name,  scope,  interpreter);	  ObjectType    objectType    =    ObjectType.cast(name,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
44	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(nameObjName);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(nameObjName);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(nameObjName);	  ObjectType    objectType    =    ObjectType.cast(name);    	non-compiled	[CE]  ';'  expected	1	None	replace
45	[BUG]  [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name.getJSType());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  ObjectType  objectType  =  ObjectType.cast(name.getJSType());  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	ObjectType  objectType  =  ObjectType.cast(name.getJSType());	  ObjectType    objectType    =    ObjectType.cast(name);    	non-compiled	[CE]  ';'  expected	1	None	replace
46	[BUG]  [BUGGY]  JSType  objectType  =  ObjectType.cast(valueType);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  JSType  objectType  =  ObjectType.cast(valueType);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	JSType  objectType  =  ObjectType.cast(valueType);	  ObjectType    objectType    =    ObjectType.cast(valueType);    	non-compiled	[CE]  ';'  expected	8	None	replace
47	[BUG]  [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }          [BUGGY]  Scope  scope  =  traverse(name.getFirstChild(),  scope);  [BUGGY]    if  (objectType  ==  null)  {  return  scope;  }  boolean  hasLendsName  =  n.getJSDocInfo()  !=  null  &&  n.getJSDocInfo().getLendsName()  !=  null;  if  (objectType.hasReferenceName()  &&  !hasLendsName)  {  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	662	662	1	replace	Scope  scope  =  traverse(name.getFirstChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
