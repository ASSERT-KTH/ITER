bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
2	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  scope  =  traverseObjectLit(n,  scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  scope  =  traverseLitLiteral(n,  scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
5	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  scope  =  traverseObjLit(n,  scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
6	[BUG]  [BUGGY]  scope  =  traverseBoolean(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  scope  =  traverseBoolean(n,  scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBoolean(n,  scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
7	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]    [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	  	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
8	[BUG]  [BUGGY]  n  =  n.getJSDocInfo();  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  n  =  n.getJSDocInfo();  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getJSDocInfo();	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
9	[BUG]  [BUGGY]  if(scope!=  null)  {  break;  }  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  if(scope!=  null)  {  break;  }  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  break;  }	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
10	[BUG]  [BUGGY]  shadow  =  traverseObjectLiteral(n,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  shadow  =  traverseObjectLiteral(n,  scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseObjectLiteral(n,  scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
11	[BUG]  [BUGGY]  n.setJSType(castType);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  n.setJSType(castType);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(castType);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
12	[BUG]  [BUGGY]  n.removeChild(scope);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  n.removeChild(scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
13	[BUG]  [BUGGY]  n.addChildToFront(scope);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  n.addChildToFront(scope);  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope);	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
14	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]  n  =  n.getFirstChild();  [BUGGY]    case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getFirstChild();	break;  	non-compiled	[CE]  ';'  expected	37	None	replace
