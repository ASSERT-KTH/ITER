projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLit(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseBooleanLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLitLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjLit(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseBoolean(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.getJSDocInfo();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281shadow=traverseObjectLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(castType);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.removeChild(scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.addChildToFront(scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.getFirstChild();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=scope.getJSDocInfo();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.createJSDocInfo();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjLit(n,scope).getJoinedFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLit(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope==null){break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){scope=traverseObjectLiteral(n,scope);}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){scope=traverseObjectLit(n,scope);}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){scope=traverseBoolean(n,scope);}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281shadow=traverseBooleanLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281shadow=traverseLitLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281shadow=traverseSilentLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLitLiteral(n,scope).getJoinedFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLitLiteral(n,scope).getJoinedFlowScope().createChildFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLitLiteral(n,scope).getJoinedFunctionScope().createChildFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLocal(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLiteral(n,scope).getJoinedFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjLitLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseNumberLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLiteral(n,scope.cloneTree());
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLocalLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseOtherLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.getLastChild();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.getNext();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=scope.getFirstChild();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.getParent();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(type);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.removeChild(scope,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.addChildToBack(scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.removeChild(scope)-1;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.removeChild(scope)+1;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.addChildToFront(scope,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.addChildToFront(scope,newBooleanLiteralSet());
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.removeChildToFront(scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLiteral(n,scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLit(n,scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseBoolean(n,scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseBooleanLiteral(n,scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLitLiteral(n,scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLit(n,scope).getJoinedFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLit(n,scope).getJoinedFlowScope().createChildFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseOBJECTLit(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLong(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseOBJECTLIT(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseBooleanLiteral(n,scope.booleanValues);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseBooleanLiteral(n,scope).booleanValues;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLit(n,scope-1);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjectLit(n,scope).createChildFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLitLiteral(n,scope-1);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n!=null?scope.getJSDocInfo():n.getJSDocInfo();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.getJSDocInfo()||n.getJSDocInfo()!=null;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.getJSDocInfo()||n.getJSDocInfo()==null;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(OBJECTLIT_TYPE);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(OBJECTLIT);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(getNativeType(UNKNOWN_TYPE));
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.getChildCount();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.addChildToFront(functionScope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281caseToken.OBJECTLIT:scope=traverseObjectLiteral(n,scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseLit(n,scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281cope!=null){break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setJSType(castType);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.removeChild(scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObject(n,scope);break;
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){scope=traverseObjectLit(n,scope);}else{break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.setChildCount(n.getChildCount());
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseEmbeddedBooleanLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){scope=traverseObjectLiteral(n,scope);}else{scope=traverseBooleanLiteral(n,scope);}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){scope=traverseObjectLiteral(n,scope);}else{break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){scope=traverseObjectLiteral(n,scope);break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null&&scope.getType()==Token.OBJECTLIT){break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null&&scope.getType()==Token.FUNCTION){break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281if(scope!=null){scope=traverseObjectLit(n,scope);break;}
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n=n.removeFirstChild();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObjLit(n,scope).getJoinedFlowScope().createChildFlowScope();
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281n.addChildToFront(scope,n);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281shadow=traverseObjLitLiteral(n,scope);
projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java281scope=traverseObject(n,scope);
