bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  scope.getJSDocInfo();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  scope.getJSDocInfo();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getJSDocInfo();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	8	None	replace
2	[BUG]  [BUGGY]  n  =  n.createJSDocInfo();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n.createJSDocInfo();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.createJSDocInfo();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	8	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedFlowScope();	  scope    =    traverseObjLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLit(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLit(n,  scope);	  scope    =    traverseObjLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
5	[BUG]  [BUGGY]  if(scope  ==  null)  {  break;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope  ==  null)  {  break;  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null)  {  break;  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
6	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseBoolean(n,  scope);  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null)  {  scope  =  traverseBoolean(n,  scope);  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseBoolean(n,  scope);  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
9	[BUG]  [BUGGY]  shadow  =  traverseBooleanLiteral(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  shadow  =  traverseBooleanLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseBooleanLiteral(n,  scope);	  shadow    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	10	None	replace
10	[BUG]  [BUGGY]  shadow  =  traverseLitLiteral(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  shadow  =  traverseLitLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseLitLiteral(n,  scope);	  shadow    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	10	None	replace
11	[BUG]  [BUGGY]  shadow  =  traverseSilentLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  shadow  =  traverseSilentLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseSilentLiteral(n,  scope);	  shadow    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	10	None	replace
12	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();	  scope    =    traverseLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
13	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
14	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  scope  =  traverseLocal(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLocal(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocal(n,  scope);	  scope    =    traverseBoolean(n,    scope);    	non-compiled	[CE]  ';'  expected	6	None	replace
16	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();	  scope    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
17	[BUG]  [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLitLiteral(n,  scope);	  scope    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
18	[BUG]  [BUGGY]  scope  =  traverseNumberLiteral(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseNumberLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseNumberLiteral(n,  scope);	  scope    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
19	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneTree());  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.cloneTree());	  scope    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseLocalLiteral(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLocalLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocalLiteral(n,  scope);	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseOtherLiteral(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseOtherLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOtherLiteral(n,  scope);	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
22	[BUG]  [BUGGY]  scope  =  traverseLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLiteral(n,  scope);	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
23	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n.getLastChild();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getLastChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	14	None	replace
24	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n.getNext();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getNext();	  n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	14	None	replace
25	[BUG]  [BUGGY]  n  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  scope.getFirstChild();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	14	None	replace
26	[BUG]  [BUGGY]  n  =  n.getParent();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n.getParent();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getParent();	  n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	14	None	replace
27	[BUG]  [BUGGY]  n.setJSType(scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(scope);	  n.setJSType(castType);    	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  n.setJSType(type);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(type);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(type);	  n.setJSType(castType);    	non-compiled	[CE]  ';'  expected	11	None	replace
29	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));	  n.setJSType(castType);    	non-compiled	[CE]  ';'  expected	11	None	replace
30	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));	  n.setJSType(castType);    	non-compiled	[CE]  ';'  expected	11	None	replace
31	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));	  n.setJSType(castType);    	non-compiled	[CE]  ';'  expected	11	None	replace
32	[BUG]  [BUGGY]  n.removeChild(scope,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.removeChild(scope,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  scope);	  n.removeChild(scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
33	[BUG]  [BUGGY]  n.addChildToBack(scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.addChildToBack(scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToBack(scope);	  n.removeChild(scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
34	[BUG]  [BUGGY]  n.removeChild(scope)-  1;  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.removeChild(scope)-  1;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)-  1;	  n.removeChild(scope);    	non-compiled	[CE]  not  a  statement	12	None	replace
35	[BUG]  [BUGGY]  n.removeChild(scope)+  1;  [CE]  not  a  statement  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.removeChild(scope)+  1;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)+  1;	  n.removeChild(scope);    	non-compiled	[CE]  not  a  statement	12	None	replace
36	[BUG]  [BUGGY]  n.addChildToFront(scope,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.addChildToFront(scope,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  scope);	  n.addChildToFront(scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
37	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet());  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanLiteralSet());	  n.addChildToFront(scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  n.removeChildToFront(scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.removeChildToFront(scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChildToFront(scope);	  n.addChildToFront(scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
40	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope);  break;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjectLit(n,  scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
41	[BUG]  [BUGGY]  scope  =  traverseBoolean(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseBoolean(n,  scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBoolean(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
42	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
43	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLitLiteral(n,  scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
45	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
46	[BUG]  [BUGGY]  scope  =  traverseOBJECTLit(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseOBJECTLit(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOBJECTLit(n,  scope);	  scope    =    traverseObjLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
47	[BUG]  [BUGGY]  scope  =  traverseLong(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLong(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLong(n,  scope);	  scope    =    traverseBoolean(n,    scope);    	non-compiled	[CE]  ';'  expected	6	None	replace
48	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOBJECTLIT(n,  scope);	  scope    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
49	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.booleanValues);	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
50	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).booleanValues;	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
51	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope  -  1);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjectLit(n,  scope  -  1);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope  -  1);	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
52	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjectLit(n,  scope).createChildFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
53	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLitLiteral(n,  scope  -  1);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope  -  1);	  scope    =    traverseLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
54	[BUG]  [BUGGY]  n  =  n!=  null?  scope.getJSDocInfo()  :  n.getJSDocInfo();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n!=  null?  scope.getJSDocInfo()  :  n.getJSDocInfo();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n!=  null?  scope.getJSDocInfo()  :  n.getJSDocInfo();	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	8	None	replace
55	[BUG]  [BUGGY]  n  =  n.getJSDocInfo()  ||  n.getJSDocInfo()!=  null;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n.getJSDocInfo()  ||  n.getJSDocInfo()!=  null;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getJSDocInfo()  ||  n.getJSDocInfo()!=  null;	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	8	None	replace
56	[BUG]  [BUGGY]  n  =  n.getJSDocInfo()  ||  n.getJSDocInfo()  ==  null;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n.getJSDocInfo()  ||  n.getJSDocInfo()  ==  null;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getJSDocInfo()  ||  n.getJSDocInfo()  ==  null;	  n    =    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  n.setJSType(OBJECTLIT_TYPE);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(OBJECTLIT_TYPE);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(OBJECTLIT_TYPE);	  n.setJSType(castType);    	non-compiled	[CE]  ';'  expected	11	None	replace
58	[BUG]  [BUGGY]  n.setJSType(OBJECTLIT);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(OBJECTLIT);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(OBJECTLIT);	  n.setJSType(castType);    	non-compiled	[CE]  ';'  expected	11	None	replace
59	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));	  n.setJSType(castType);    	non-compiled	[CE]  ';'  expected	11	None	replace
60	[BUG]  [BUGGY]  n  =  n.getChildCount();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n.getChildCount();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getChildCount();	  n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	14	None	replace
61	[BUG]  [BUGGY]  n.addChildToFront(functionScope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.addChildToFront(functionScope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(functionScope);	  n.addChildToFront(scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
62	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
63	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope);  break;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseLit(n,  scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLit(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
64	[BUG]  [BUGGY]  cope!=  null)  {  break;  }  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  cope!=  null)  {  break;  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null)  {  break;  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
65	[BUG]  [BUGGY]  n.setJSType(castType);  break;  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setJSType(castType);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(castType);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
66	[BUG]  [BUGGY]  n.removeChild(scope);  break;  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.removeChild(scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
67	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObject(n,  scope);  break;  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObject(n,  scope);  break;	      	non-compiled	[CE]  ';'  expected	7	None	replace
68	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }  else  {  break;  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }  else  {  break;  }	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	2	None	replace
69	[BUG]  [BUGGY]  n.setChildCount(n.getChildCount());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.setChildCount(n.getChildCount());  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(n.getChildCount());	  n.removeChild(scope);    	non-compiled	[CE]  ';'  expected	12	None	replace
70	[BUG]  [BUGGY]  scope  =  traverseEmbeddedBooleanLiteral(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseEmbeddedBooleanLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseEmbeddedBooleanLiteral(n,  scope);	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
71	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }	  scope    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
72	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  break;  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  break;  }	  scope    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
73	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
74	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
75	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
76	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  break;  }  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  break;  }	  if(scope!=    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
77	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.removeFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	14	None	replace
78	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
79	[BUG]  [BUGGY]  n.addChildToFront(scope,  n);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  n.addChildToFront(scope,  n);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  n);	  n.addChildToFront(scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
80	[BUG]  [BUGGY]  shadow  =  traverseObjLitLiteral(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  shadow  =  traverseObjLitLiteral(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseObjLitLiteral(n,  scope);	  shadow    =    traverseObjectLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	10	None	replace
81	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);    [BUGGY]  scope  =  traverseObject(n,  scope);  [BUGGY]      case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObject(n,  scope);	  scope    =    traverseBoolean(n,    scope);    	non-compiled	[CE]  ';'  expected	6	None	replace
