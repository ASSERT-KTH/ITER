bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverseLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	13	None	replace
2	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	13	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJSDocInfo().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJSDocInfo().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJSDocInfo().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	13	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseMutatorLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseMutatorLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseMutatorLiteral(n,  scope);	  scope    =    traverseEmbeddedBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	70	None	replace
5	[BUG]  [BUGGY]  scope  =  traverseSingleNodeLiteral(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseSingleNodeLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseSingleNodeLiteral(n,  scope);	  scope    =    traverseEmbeddedBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	70	None	replace
6	[BUG]  [BUGGY]  n.addChildToBack(scope,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToBack(scope,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToBack(scope,  scope);	  n.addChildToBack(scope);    	non-compiled	[CE]  ';'  expected	33	None	replace
7	[BUG]  [BUGGY]  n.removeChildToBack(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChildToBack(scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChildToBack(scope);	  n.addChildToBack(scope);    	non-compiled	[CE]  ';'  expected	33	None	replace
8	[BUG]  [BUGGY]  n.addChildToBack(scope,  new  BooleanLiteralSet());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToBack(scope,  new  BooleanLiteralSet());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToBack(scope,  new  BooleanLiteralSet());	  n.addChildToBack(scope);    	non-compiled	[CE]  ';'  expected	33	None	replace
9	[BUG]  [BUGGY]  scope  =  traverseLocal(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLocal(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocal(n,  scope).getJoinedFlowScope();	  scope    =    traverseLocal(n,    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
10	[BUG]  [BUGGY]  scope  =  traverseLocal(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLocal(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocal(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseLocal(n,    scope);    	non-compiled	[CE]  ';'  expected	15	None	replace
11	[BUG]  [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLitLiteral(n,  scope).getJoinedFlowScope();	  scope    =    traverseObjLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
12	[BUG]  [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
13	[BUG]  [BUGGY]  scope  =  traverseOBJECTLitLiteral(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOBJECTLitLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOBJECTLitLiteral(n,  scope);	  scope    =    traverseObjLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
14	[BUG]  [BUGGY]  n  =  scope.createJSDocInfo();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.createJSDocInfo();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.createJSDocInfo();	  n    =    n.createJSDocInfo();    	non-compiled	[CE]  ';'  expected	2	None	replace
15	[BUG]  [BUGGY]  n  =  n.createJSDocInfo(scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.createJSDocInfo(scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.createJSDocInfo(scope);	  n    =    n.createJSDocInfo();    	non-compiled	[CE]  ';'  expected	2	None	replace
16	[BUG]  [BUGGY]  scope  =  traverseObjECTLit(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjECTLit(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjECTLit(n,  scope);	  scope    =    traverseOBJECTLit(n,    scope);    	non-compiled	[CE]  ';'  expected	46	None	replace
17	[BUG]  [BUGGY]  n.setJSType(scope,  castType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(scope,  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(scope,  castType);	  n.setJSType(scope);    	non-compiled	[CE]  ';'  expected	27	None	replace
18	[BUG]  [BUGGY]  n  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getLastChild();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getLastChild();	  n    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
19	[BUG]  [BUGGY]  n  =  n.getfirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getfirstChild();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getfirstChild();	  n    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLitLiteral(n,  scope);  break;	  scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	39	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();  break;	  scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	39	None	replace
22	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	Scope  scope  =  traverseObjectLit(n,  scope);	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  cope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null)  {  scope  =  traverseObjectLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
24	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.GETPROP)  {  scope  =  traverseObjectLit(n,  scope);  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.GETPROP)  {  scope  =  traverseObjectLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&  parent.getType()  ==  Token.GETPROP)  {  scope  =  traverseObjectLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
25	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLit(n,  scope);  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
26	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  scope  =  traverseObjectLit(n,  scope);  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  scope  =  traverseObjectLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  scope  =  traverseObjectLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
27	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope  -  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope  -  1);	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
28	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope.cloneTree());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope.cloneTree());	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
29	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLit(n,  scope  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLit(n,  scope  -  1);	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
30	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope  -  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope  -  2);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope  -  2);	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
31	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope  +  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope  +  1);	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
32	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
33	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
34	[BUG]  [BUGGY]  scope  =  traverseLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
35	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getFunctionScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getFunctionScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
36	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntacticScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntacticScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getSyntacticScope();	  scope    =    traverseObjectLit(n,    scope).createChildFlowScope();    	non-compiled	[CE]  ';'  expected	52	None	replace
37	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLit(n,  scope).createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLit(n,  scope).createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).createChildFlowScope();    	non-compiled	[CE]  ';'  expected	52	None	replace
38	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).createChildFlowScope();    	non-compiled	[CE]  ';'  expected	52	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).toBooleanOutcomes;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).toBooleanOutcomes;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).toBooleanOutcomes;	  scope    =    traverseBooleanLiteral(n,    scope).booleanValues;    	non-compiled	[CE]  ';'  expected	50	None	replace
40	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).toBooleanValues;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).toBooleanValues;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).toBooleanValues;	  scope    =    traverseBooleanLiteral(n,    scope).booleanValues;    	non-compiled	[CE]  ';'  expected	50	None	replace
41	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues  ||  toBooleanOutcomes;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues  ||  toBooleanOutcomes;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).booleanValues  ||  toBooleanOutcomes;	  scope    =    traverseBooleanLiteral(n,    scope).booleanValues;    	non-compiled	[CE]  ';'  expected	50	None	replace
42	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).booleanValues;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).booleanValues;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).booleanValues;	  scope    =    traverseBooleanLiteral(n,    scope).booleanValues;    	non-compiled	[CE]  ';'  expected	50	None	replace
43	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues  &&  toBooleanOutcomes;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues  &&  toBooleanOutcomes;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).booleanValues  &&  toBooleanOutcomes;	  scope    =    traverseBooleanLiteral(n,    scope).booleanValues;    	non-compiled	[CE]  ';'  expected	50	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).booleanValues();	  scope    =    traverseBooleanLiteral(n,    scope).booleanValues;    	non-compiled	[CE]  ';'  expected	50	None	replace
45	[BUG]  [BUGGY]  scope  =  traverseLong(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLong(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLong(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseLong(n,    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
46	[BUG]  [BUGGY]  scope  =  traverseLong(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLong(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLong(n,  scope).getJoinedFlowScope();	  scope    =    traverseLong(n,    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
47	[BUG]  [BUGGY]  scope  =  traverseInt(n,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseInt(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseInt(n,  scope);	  scope    =    traverseLong(n,    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
48	[BUG]  [BUGGY]  scope  =  traverseLong(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLong(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLong(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseLong(n,    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
49	[BUG]  [BUGGY]  n.removeChildToFront(scope,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChildToFront(scope,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChildToFront(scope,  scope);	  n.removeChildToFront(scope);    	non-compiled	[CE]  ';'  expected	38	None	replace
50	[BUG]  [BUGGY]  n.removeChildAfter(scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChildAfter(scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChildAfter(scope);	  n.removeChildToFront(scope);    	non-compiled	[CE]  ';'  expected	38	None	replace
51	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
52	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJSDocInfo().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJSDocInfo().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJSDocInfo().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
53	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
54	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntacticScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntacticScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getSyntacticScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
55	[BUG]  [BUGGY]  scope  =  traverseOtherLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOtherLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOtherLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseOtherLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	21	None	replace
56	[BUG]  [BUGGY]  scope  =  traverseOtherLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOtherLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOtherLiteral(n,  scope).getJoinedFlowScope();	  scope    =    traverseOtherLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	21	None	replace
57	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope.cloneTree());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope.cloneTree());	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
58	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneTree(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneTree(),  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.cloneTree(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
59	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.cloneTree());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.cloneTree());	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
60	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneBoolean());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneBoolean());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.cloneBoolean());	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
61	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope());	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
62	[BUG]  [BUGGY]  n.addChildToFront(syntacticScope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(syntacticScope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(syntacticScope);	  n.addChildToFront(functionScope);    	non-compiled	[CE]  ';'  expected	61	None	replace
63	[BUG]  [BUGGY]  Scope  scope  =  traverseBoolean(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  Scope  scope  =  traverseBoolean(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	Scope  scope  =  traverseBoolean(n,  scope);	  if(scope!=    null)    {    scope    =    traverseBoolean(n,    scope);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
64	[BUG]  [BUGGY]  cope!=  null)  {  scope  =  traverseBoolean(n,  scope);  }  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null)  {  scope  =  traverseBoolean(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null)  {  scope  =  traverseBoolean(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseBoolean(n,    scope);    }    	non-compiled	[CE]  not  a  statement	8	None	replace
65	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();  break;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();  break;	  scope    =    traverseLitLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	43	None	replace
66	[BUG]  [BUGGY]  scope  =  traverseOtherLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOtherLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOtherLiteral(n,  scope);  break;	  scope    =    traverseLitLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	43	None	replace
67	[BUG]  [BUGGY]  n.removeChild(scope,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  scope);  break;	  n.removeChild(scope);    break;    	non-compiled	[CE]  ';'  expected	66	None	replace
68	[BUG]  [BUGGY]  n.addChildToFront(scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope);  break;	  n.removeChild(scope);    break;    	non-compiled	[CE]  ';'  expected	66	None	replace
69	[BUG]  [BUGGY]  n.addChildToBack(scope);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToBack(scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToBack(scope);  break;	  n.removeChild(scope);    break;    	non-compiled	[CE]  ';'  expected	66	None	replace
70	[BUG]  [BUGGY]  scope  =  traverseLocalLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLocalLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocalLiteral(n,  scope).getJoinedFlowScope();	  scope    =    traverseLocalLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
71	[BUG]  [BUGGY]  scope  =  traverseLocalLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLocalLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocalLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseLocalLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
72	[BUG]  [BUGGY]  scope  =  traverseLocalLiteral(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLocalLiteral(n,  scope.cloneTree());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocalLiteral(n,  scope.cloneTree());	  scope    =    traverseLocalLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
73	[BUG]  [BUGGY]  n.addChildToFront(scope,  n.cloneTree());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  n.cloneTree());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  n.cloneTree());	  n.addChildToFront(scope,    n);    	non-compiled	[CE]  ';'  expected	79	None	replace
74	[BUG]  [BUGGY]  n.addChildToFront(scope,  n.getJSDocInfo());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  n.getJSDocInfo());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  n.getJSDocInfo());	  n.addChildToFront(scope,    n);    	non-compiled	[CE]  ';'  expected	79	None	replace
75	[BUG]  [BUGGY]  n.addChildToFront(scope,  n.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  n.getJSType());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  n.getJSType());	  n.addChildToFront(scope,    n);    	non-compiled	[CE]  ';'  expected	79	None	replace
76	[BUG]  [BUGGY]  n.addChildToFront(scope,  n.toString());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  n.toString());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  n.toString());	  n.addChildToFront(scope,    n);    	non-compiled	[CE]  ';'  expected	79	None	replace
77	[BUG]  [BUGGY]  n.addChildToFront(scope,  n,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  n,  scope);	  n.addChildToFront(scope,    n);    	non-compiled	[CE]  ';'  expected	79	None	replace
78	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE,  castType));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE,  castType));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE,  castType));	  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
79	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE),  castType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE),  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE),  castType);	  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
80	[BUG]  [BUGGY]  n.setJSType(registry.getNativeType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(registry.getNativeType(JSTypeNative.OBJECT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(registry.getNativeType(JSTypeNative.OBJECT_TYPE));	  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
81	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE)+  castType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE)+  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE)+  castType);	  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
82	[BUG]  [BUGGY]  if(scope!=  null  ||  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  ||  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  ||  scope.getType()  ==  Token.FUNCTION)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
83	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.NAME)  {  break;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.NAME)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.NAME)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
84	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.EXPR_RESULT)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.EXPR_RESULT)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
85	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.GETPROP)  {  break;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.GETPROP)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
86	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLit(n,  scope).getJoinedFlowScope();	  scope    =    traverseLit(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
87	[BUG]  [BUGGY]  n  =  n.getNext()  +  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getNext()  +  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getNext()  +  1;	  n    =    n.getNext();    	non-compiled	[CE]  ';'  expected	24	None	replace
88	[BUG]  [BUGGY]  n  =  n.getNumber();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getNumber();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getNumber();	  n    =    n.getNext();    	non-compiled	[CE]  ';'  expected	24	None	replace
89	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope);  break;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	Scope  scope  =  traverseObjectLit(n,  scope);  break;	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
90	[BUG]  [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
91	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE,  castType));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE,  castType));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE,  castType));	  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
92	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)+  castType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)+  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)+  castType);	  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
93	[BUG]  [BUGGY]  n.setJSType(scope.getNativeType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(scope.getNativeType(JSTypeNative.OBJECT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(scope.getNativeType(JSTypeNative.OBJECT_TYPE));	  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
94	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)+  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)+  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)+  1);	  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
95	[BUG]  [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
96	[BUG]  [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null)  {  scope  =  traverseObjectLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
97	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
98	[BUG]  [BUGGY]  scope  =  traverseSilentLiteral(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseSilentLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseSilentLiteral(n,  scope);	  shadow    =    traverseSilentLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	11	None	replace
99	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.toBooleanOutcomes);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.toBooleanOutcomes);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.toBooleanOutcomes);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
100	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.toBooleanValues);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.toBooleanValues);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.toBooleanValues);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
101	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope.booleanValues);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope.booleanValues);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope.booleanValues);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
102	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues,  toBooleanOutcomes);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues,  toBooleanOutcomes);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.booleanValues,  toBooleanOutcomes);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
103	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.toBooleanIncomes);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.toBooleanIncomes);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.toBooleanIncomes);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
104	[BUG]  [BUGGY]  scope  =  traverseDoubleLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseDoubleLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseDoubleLiteral(n,  scope);	  scope    =    traverseNumberLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
105	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope);  break;	  scope    =    traverseObject(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	67	None	replace
106	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope  -  1);	  scope    =    traverseLitLiteral(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	53	None	replace
107	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope  -  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope  -  2);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope  -  2);	  scope    =    traverseLitLiteral(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	53	None	replace
108	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope  +  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope  +  1);	  scope    =    traverseLitLiteral(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	53	None	replace
109	[BUG]  [BUGGY]  n  =  n.removeLastChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.removeLastChild();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.removeLastChild();	  n    =    n.removeFirstChild();    	non-compiled	[CE]  ';'  expected	77	None	replace
110	[BUG]  [BUGGY]  n  =  scope.removeFirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.removeFirstChild();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.removeFirstChild();	  n    =    n.removeFirstChild();    	non-compiled	[CE]  ';'  expected	77	None	replace
111	[BUG]  [BUGGY]  n  =  n.replaceChild(n,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.replaceChild(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.replaceChild(n,  scope);	  n    =    n.removeFirstChild();    	non-compiled	[CE]  ';'  expected	77	None	replace
112	[BUG]  [BUGGY]  n.removeChild(scope,  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  1);	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
113	[BUG]  [BUGGY]  n.removeChild(scope,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  n);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  n);	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
114	[BUG]  [BUGGY]  n.removeChild(scope,  name);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  name);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  name);	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
115	[BUG]  [BUGGY]  n.removeChild(scope,  description);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  description);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  description);	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
116	[BUG]  [BUGGY]  n.removeChild(scope,  this);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  this);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  this);	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
117	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJoinedFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).createJoinedFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	44	None	replace
118	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	44	None	replace
119	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObject(n,    scope);    	non-compiled	[CE]  ';'  expected	81	None	replace
120	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObject(n,  scope).getJoinedFlowScope();	  scope    =    traverseObject(n,    scope);    	non-compiled	[CE]  ';'  expected	81	None	replace
121	[BUG]  [BUGGY]  cope!=  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }	  cope!=    null)    {    break;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
122	[BUG]  [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  break;  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  break;  }	  cope!=    null)    {    break;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
123	[BUG]  [BUGGY]  cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }	  cope!=    null)    {    break;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
124	[BUG]  [BUGGY]  cope  ==  null)  {  break;  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope  ==  null)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope  ==  null)  {  break;  }	  cope!=    null)    {    break;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
125	[BUG]  [BUGGY]  n  =  n.getJSDocInfo()  &&  n.getJSDocInfo()  ==  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getJSDocInfo()  &&  n.getJSDocInfo()  ==  null;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getJSDocInfo()  &&  n.getJSDocInfo()  ==  null;	  n    =    n.getJSDocInfo()    ||    n.getJSDocInfo()    ==    null;    	non-compiled	[CE]  ';'  expected	56	None	replace
126	[BUG]  [BUGGY]  n  =  n.getJSDocInfo()  ||  scope.getJSDocInfo()  ==  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getJSDocInfo()  ||  scope.getJSDocInfo()  ==  null;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getJSDocInfo()  ||  scope.getJSDocInfo()  ==  null;	  n    =    n.getJSDocInfo()    ||    n.getJSDocInfo()    ==    null;    	non-compiled	[CE]  ';'  expected	56	None	replace
127	[BUG]  [BUGGY]  n  =  scope.getJSDocInfo()  ||  n.getJSDocInfo()  ==  null;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getJSDocInfo()  ||  n.getJSDocInfo()  ==  null;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getJSDocInfo()  ||  n.getJSDocInfo()  ==  null;	  n    =    n.getJSDocInfo()    ||    n.getJSDocInfo()    ==    null;    	non-compiled	[CE]  ';'  expected	56	None	replace
128	[BUG]  [BUGGY]  n  =  n.getJSDocInfo()  &&  n.getJSDocInfo()!=  null;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getJSDocInfo()  &&  n.getJSDocInfo()!=  null;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getJSDocInfo()  &&  n.getJSDocInfo()!=  null;	  n    =    n.getJSDocInfo()    ||    n.getJSDocInfo()    ==    null;    	non-compiled	[CE]  ';'  expected	56	None	replace
129	[BUG]  [BUGGY]  n  =  scope.getNext();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNext();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNext();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
130	[BUG]  [BUGGY]  n  =  scope.getLeastChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getLeastChild();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getLeastChild();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
131	[BUG]  [BUGGY]  n  =  scope.getNumberOfChildren();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNumberOfChildren();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNumberOfChildren();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
132	[BUG]  [BUGGY]  n  =  scope.getEndChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getEndChild();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getEndChild();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
133	[BUG]  [BUGGY]  n  =  scope.getParent();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getParent();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getParent();	  n    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
134	[BUG]  [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
135	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  Scope  scope  =  traverseObjectLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	Scope  scope  =  traverseObjectLiteral(n,  scope);	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
136	[BUG]  [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
137	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
138	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
139	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).createJoinedFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
140	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
141	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
142	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getFunctionScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getFunctionScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).getFunctionScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
143	[BUG]  [BUGGY]  n  =  n.getChildCount()  +  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getChildCount()  +  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getChildCount()  +  1;	  n    =    n.getChildCount();    	non-compiled	[CE]  ';'  expected	60	None	replace
144	[BUG]  [BUGGY]  n  =  n.getChildCount()  -  1;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getChildCount()  -  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getChildCount()  -  1;	  n    =    n.getChildCount();    	non-compiled	[CE]  ';'  expected	60	None	replace
145	[BUG]  [BUGGY]  n  =  n.getChildCount()  *  2;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getChildCount()  *  2;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getChildCount()  *  2;	  n    =    n.getChildCount();    	non-compiled	[CE]  ';'  expected	60	None	replace
146	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).createChildFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	3	None	replace
147	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).createJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).createJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).createJoinedFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	3	None	replace
148	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFunctionScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFunctionScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedFunctionScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	3	None	replace
149	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getSyntacticScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).getSyntacticScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getSyntacticScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	3	None	replace
150	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  Scope  scope  =  traverseObjectLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	Scope  scope  =  traverseObjectLiteral(n,  scope);  break;	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
151	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
152	[BUG]  [BUGGY]  n.addChildToFront(scope,  context);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  context);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  context);	  n.addChildToFront(scope,    scope);    	non-compiled	[CE]  ';'  expected	36	None	replace
153	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	12	None	replace
154	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedFunctionScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	12	None	replace
155	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).createJoinedFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	12	None	replace
156	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getSyntacticScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getSyntacticScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getSyntacticScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	12	None	replace
157	[BUG]  [BUGGY]  cope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
158	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
159	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseNullLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseNullLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseNullLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
160	[BUG]  [BUGGY]  State  state  =  n.getState();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  State  state  =  n.getState();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	State  state  =  n.getState();	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
161	[BUG]  [BUGGY]  shadow  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  shadow  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseLitLiteral(n,  scope).getJoinedFlowScope();	  shadow    =    traverseLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	10	None	replace
162	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE,  castType));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE,  castType));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE,  castType));	  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
163	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE),  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE),  scope);	  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
164	[BUG]  [BUGGY]  n.setJSType(scope.getNativeType(JSTypeNative.OBJECTLIT_TYPE));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(scope.getNativeType(JSTypeNative.OBJECTLIT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(scope.getNativeType(JSTypeNative.OBJECTLIT_TYPE));	  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
165	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE),  castType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE),  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE),  castType);	  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
166	[BUG]  [BUGGY]  scope  =  traverseUndefinedLiteral(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseUndefinedLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseUndefinedLiteral(n,  scope);	  scope    =    traverseLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	22	None	replace
167	[BUG]  [BUGGY]  n.setJSType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(UNKNOWN_TYPE);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(UNKNOWN_TYPE);	  n.setJSType(OBJECTLIT_TYPE);    	non-compiled	[CE]  ';'  expected	57	None	replace
168	[BUG]  [BUGGY]  n.setJSType(NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(NOT_OBJECT_TYPE);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(NOT_OBJECT_TYPE);	  n.setJSType(OBJECTLIT_TYPE);    	non-compiled	[CE]  ';'  expected	57	None	replace
169	[BUG]  [BUGGY]  scope  =  traverseLocal(n,  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLocal(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocal(n,  scope);  break;	  scope    =    traverseBoolean(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	41	None	replace
170	[BUG]  [BUGGY]  n  =  n.getType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getType();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getType();	  n    =    n.getParent();    	non-compiled	[CE]  ';'  expected	26	None	replace
171	[BUG]  [BUGGY]  n  =  scope.getNativeType(JSDocInfo.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNativeType(JSDocInfo.UNKNOWN_TYPE);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNativeType(JSDocInfo.UNKNOWN_TYPE);	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
172	[BUG]  [BUGGY]  n  =  scope.getNativeObject();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNativeObject();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNativeObject();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
173	[BUG]  [BUGGY]  n  =  scope.getNumberOfFunctions();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNumberOfFunctions();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNumberOfFunctions();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
174	[BUG]  [BUGGY]  n  =  scope.getNativeJSDocInfo();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNativeJSDocInfo();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNativeJSDocInfo();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
175	[BUG]  [BUGGY]  n  =  scope.getNativeType(JSDocInfo.NULL_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNativeType(JSDocInfo.NULL_TYPE);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNativeType(JSDocInfo.NULL_TYPE);	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
176	[BUG]  [BUGGY]  n  =  scope.getNumberOfScopes();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNumberOfScopes();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNumberOfScopes();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
177	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE,  castType));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	59	None	replace
178	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  castType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  castType);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	59	None	replace
179	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECTLIT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(OBJECTLIT_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	59	None	replace
180	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE),  scope);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	59	None	replace
181	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  1);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	59	None	replace
182	[BUG]  [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(NOT_OBJECT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(NOT_OBJECT_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	59	None	replace
183	[BUG]  [BUGGY]  n  =  n  ==  null?  scope.getJSDocInfo()  :  n.getJSDocInfo();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n  ==  null?  scope.getJSDocInfo()  :  n.getJSDocInfo();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n  ==  null?  scope.getJSDocInfo()  :  n.getJSDocInfo();	  n    =    n!=    null?    scope.getJSDocInfo()    :    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	54	None	replace
184	[BUG]  [BUGGY]  n  =  scope!=  null?  n.getJSDocInfo()  :  n.getJSDocInfo();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope!=  null?  n.getJSDocInfo()  :  n.getJSDocInfo();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope!=  null?  n.getJSDocInfo()  :  n.getJSDocInfo();	  n    =    n!=    null?    scope.getJSDocInfo()    :    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	54	None	replace
185	[BUG]  [BUGGY]  n  =  scope.getJSDocInfo()!=  null?  n.getJSDocInfo()  :  n.getJSDocInfo();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getJSDocInfo()!=  null?  n.getJSDocInfo()  :  n.getJSDocInfo();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getJSDocInfo()!=  null?  n.getJSDocInfo()  :  n.getJSDocInfo();	  n    =    n!=    null?    scope.getJSDocInfo()    :    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	54	None	replace
186	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  break;	  scope    =    traverseObjectLit(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	40	None	replace
187	[BUG]  [BUGGY]  n.removeChild(scope)/  1;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope)/  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)/  1;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
188	[BUG]  [BUGGY]  n.removeChild(scope)-  1L;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope)-  1L;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)-  1L;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
189	[BUG]  [BUGGY]  n.removeChild(scope,  scope)-  1;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  scope)-  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  scope)-  1;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
190	[BUG]  [BUGGY]  n.addChildToFront(scope)-  1;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope)-  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope)-  1;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
191	[BUG]  [BUGGY]  n.replaceChild(scope,  scope)-  1;  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.replaceChild(scope,  scope)-  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.replaceChild(scope,  scope)-  1;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
192	[BUG]  [BUGGY]  scope  =  traverseLocalLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLocalLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocalLiteral(n,  scope);  break;	  scope    =    traverseBooleanLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	42	None	replace
193	[BUG]  [BUGGY]  scope  =  traverseArrayLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseArrayLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseArrayLiteral(n,  scope);  break;	  scope    =    traverseBooleanLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	42	None	replace
194	[BUG]  [BUGGY]  n  =  n.getJSDocInfo()  ||  scope.getJSDocInfo()!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getJSDocInfo()  ||  scope.getJSDocInfo()!=  null;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getJSDocInfo()  ||  scope.getJSDocInfo()!=  null;	  n    =    n.getJSDocInfo()    ||    n.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	55	None	replace
195	[BUG]  [BUGGY]  n  =  scope.getJSDocInfo()  ||  n.getJSDocInfo()!=  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getJSDocInfo()  ||  n.getJSDocInfo()!=  null;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getJSDocInfo()  ||  n.getJSDocInfo()!=  null;	  n    =    n.getJSDocInfo()    ||    n.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	55	None	replace
196	[BUG]  [BUGGY]  n.setJSType(scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(scope);  break;	  n.setJSType(castType);    break;    	non-compiled	[CE]  ';'  expected	65	None	replace
197	[BUG]  [BUGGY]  n.setJSType(type);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(type);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(type);  break;	  n.setJSType(castType);    break;    	non-compiled	[CE]  ';'  expected	65	None	replace
198	[BUG]  [BUGGY]  scope  =  traverseObjECTLIT(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjECTLIT(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjECTLIT(n,  scope);	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	48	None	replace
199	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanValues());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanValues());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanValues());	  n.addChildToFront(scope,    new    BooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	37	None	replace
200	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(),  toBooleanOutcomes);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(),  toBooleanOutcomes);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanLiteralSet(),  toBooleanOutcomes);	  n.addChildToFront(scope,    new    BooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	37	None	replace
201	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet()).booleanValues();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet()).booleanValues();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanLiteralSet()).booleanValues();	  n.addChildToFront(scope,    new    BooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	37	None	replace
202	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(),  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanLiteralSet(),  scope);	  n.addChildToFront(scope,    new    BooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	37	None	replace
203	[BUG]  [BUGGY]  n.removeChild(scope)+  2;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope)+  2;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)+  2;	  n.removeChild(scope)+    1;    	non-compiled	[CE]  not  a  statement	35	None	replace
204	[BUG]  [BUGGY]  n.removeChild(scope)+  1L;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope)+  1L;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)+  1L;	  n.removeChild(scope)+    1;    	non-compiled	[CE]  not  a  statement	35	None	replace
205	[BUG]  [BUGGY]  n.addChildToFront(scope)+  1;  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope)+  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope)+  1;	  n.removeChild(scope)+    1;    	non-compiled	[CE]  not  a  statement	35	None	replace
206	[BUG]  [BUGGY]  n.replaceChild(scope)+  1;  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.replaceChild(scope)+  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.replaceChild(scope)+  1;	  n.removeChild(scope)+    1;    	non-compiled	[CE]  not  a  statement	35	None	replace
207	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	78	None	replace
208	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	78	None	replace
209	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJSDocInfo().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJSDocInfo().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJSDocInfo().createChildFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	78	None	replace
210	[BUG]  [BUGGY]  n.setChildCount(n.getChildCount()  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setChildCount(n.getChildCount()  +  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(n.getChildCount()  +  1);	  n.setChildCount(n.getChildCount());    	non-compiled	[CE]  ';'  expected	69	None	replace
211	[BUG]  [BUGGY]  n.setChildCount(n.getChildCount()  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setChildCount(n.getChildCount()  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(n.getChildCount()  -  1);	  n.setChildCount(n.getChildCount());    	non-compiled	[CE]  ';'  expected	69	None	replace
212	[BUG]  [BUGGY]  n.setChildCount(0);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setChildCount(0);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(0);	  n.setChildCount(n.getChildCount());    	non-compiled	[CE]  ';'  expected	69	None	replace
213	[BUG]  [BUGGY]  n.setChildCount(n.getChildCount()  *  2);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setChildCount(n.getChildCount()  *  2);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(n.getChildCount()  *  2);	  n.setChildCount(n.getChildCount());    	non-compiled	[CE]  ';'  expected	69	None	replace
214	[BUG]  [BUGGY]  n.setChildCount(n.getChildCount()  +  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setChildCount(n.getChildCount()  +  2);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(n.getChildCount()  +  2);	  n.setChildCount(n.getChildCount());    	non-compiled	[CE]  ';'  expected	69	None	replace
215	[BUG]  [BUGGY]  n.setChildCount(n.getChildCount()  -  2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setChildCount(n.getChildCount()  -  2);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(n.getChildCount()  -  2);	  n.setChildCount(n.getChildCount());    	non-compiled	[CE]  ';'  expected	69	None	replace
216	[BUG]  [BUGGY]  if(scope!=  null  ||  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  ||  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  ||  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
217	[BUG]  [BUGGY]  if(scope  ==  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null  &&  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
218	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.EMPTY)  {  break;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.EMPTY)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.EMPTY)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
219	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseLitLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    scope    =    traverseBooleanLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
220	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseLitLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseLitLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseLitLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    scope    =    traverseBooleanLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
221	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    scope    =    traverseBooleanLiteral(n,    scope);    }    	non-compiled	[CE]  orphaned  case	71	None	replace
222	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseBooleanLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseBooleanLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseBooleanLiteral(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
223	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseOtherLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseOtherLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseOtherLiteral(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
224	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseIntLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseIntLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseIntLiteral(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
225	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseUnknownLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseUnknownLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseUnknownLiteral(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
226	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseUndefinedLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseUndefinedLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseUndefinedLiteral(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
227	[BUG]  [BUGGY]  n.addChildToFront(scope,  n.createChildFlowScope());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  n.createChildFlowScope());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  n.createChildFlowScope());	  n.addChildToFront(scope,    n);    	non-compiled	[CE]  ';'  expected	79	None	replace
228	[BUG]  [BUGGY]  n  =  n.createJSDocInfo(info);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.createJSDocInfo(info);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.createJSDocInfo(info);	  n    =    n.createJSDocInfo();    	non-compiled	[CE]  ';'  expected	2	None	replace
229	[BUG]  [BUGGY]  case  TOken.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  TOken.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  TOken.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
230	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope();  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
231	[BUG]  [BUGGY]  Case.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  Case.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	Case.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  not  a  statement	62	None	replace
232	[BUG]  [BUGGY]  n  =  n.getLastChild()  +  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getLastChild()  +  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getLastChild()  +  1;	  n    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
233	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createThreeFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createThreeFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).createThreeFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
234	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createSyntacticScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createSyntacticScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).createSyntacticScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
235	[BUG]  [BUGGY]  scope  =  traverseLongLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLongLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLongLiteral(n,  scope);	  scope    =    traverseNumberLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
236	[BUG]  [BUGGY]  n  =  n.getPrevious();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getPrevious();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getPrevious();	  n    =    n.getParent();    	non-compiled	[CE]  ';'  expected	26	None	replace
237	[BUG]  [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope.cloneTree());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLitLiteral(n,  scope.cloneTree());	  scope    =    traverseObjLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
238	[BUG]  [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLitLiteral(n,  scope  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLitLiteral(n,  scope  -  1);	  scope    =    traverseObjLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
239	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE),  castType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE),  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE),  castType);	  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
240	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECTLIT));	  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
241	[BUG]  [BUGGY]  scope  =  traverseIntLiteral(n,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseIntLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseIntLiteral(n,  scope);	  scope    =    traverseLong(n,    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
242	[BUG]  [BUGGY]  scope  =  traverseNumber(n,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseNumber(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseNumber(n,  scope);	  scope    =    traverseLong(n,    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
243	[BUG]  [BUGGY]  scope  =  traverseFloat(n,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseFloat(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseFloat(n,  scope);	  scope    =    traverseLong(n,    scope);    	non-compiled	[CE]  ';'  expected	47	None	replace
244	[BUG]  [BUGGY]  n.addChildToFront(scope,  syntacticScope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  syntacticScope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  syntacticScope);	  n.addChildToFront(scope,    scope);    	non-compiled	[CE]  ';'  expected	36	None	replace
245	[BUG]  [BUGGY]  n.addChildToFront(scope,  functionScope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  functionScope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  functionScope);	  n.addChildToFront(scope,    scope);    	non-compiled	[CE]  ';'  expected	36	None	replace
246	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanOutcomePair());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanOutcomePair());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanOutcomePair());	  n.addChildToFront(scope,    scope);    	non-compiled	[CE]  ';'  expected	36	None	replace
247	[BUG]  [BUGGY]  n.addChildToFront(scope,  output);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  output);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  output);	  n.addChildToFront(scope,    scope);    	non-compiled	[CE]  ';'  expected	36	None	replace
248	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOBJECTLIT(n,  scope);  break;	  scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	39	None	replace
249	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues  +  toBooleanOutcomes;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues  +  toBooleanOutcomes;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).booleanValues  +  toBooleanOutcomes;	  scope    =    traverseBooleanLiteral(n,    scope).booleanValues;    	non-compiled	[CE]  ';'  expected	50	None	replace
250	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE)+  castType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE)+  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE)+  castType);	  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
251	[BUG]  [BUGGY]  n.removeChild(scope,  input);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  input);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  input);	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
252	[BUG]  [BUGGY]  n.removeChild(scope,  output);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  output);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  output);	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
253	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope  -  1  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope  -  1  +  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope  -  1  +  1);	  scope    =    traverseLitLiteral(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	53	None	replace
254	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralValues());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralValues());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanLiteralValues());	  n.addChildToFront(scope,    new    BooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	37	None	replace
255	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(0));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(0));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanLiteralSet(0));	  n.addChildToFront(scope,    new    BooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	37	None	replace
256	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(1));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(1));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanLiteralSet(1));	  n.addChildToFront(scope,    new    BooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	37	None	replace
257	[BUG]  [BUGGY]  parentFunctionScope  =  parentFunctionScope.createChildObjectFunctionScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  parentFunctionScope  =  parentFunctionScope.createChildObjectFunctionScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	parentFunctionScope  =  parentFunctionScope.createChildObjectFunctionScope();	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
258	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseOBJECTLit(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseOBJECTLit(n,  scope);  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseOBJECTLit(n,  scope);  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
259	[BUG]  [BUGGY]  shadow  =  traverseBooleanLiteral(n,  scope).booleanValues;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  shadow  =  traverseBooleanLiteral(n,  scope).booleanValues;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseBooleanLiteral(n,  scope).booleanValues;	  shadow    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
260	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createThreeFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createThreeFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).createThreeFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	12	None	replace
261	[BUG]  [BUGGY]  scope  =  traverseOtherLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOtherLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOtherLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseOtherLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	21	None	replace
262	[BUG]  [BUGGY]  n.addChildToBack(scope)-  1;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToBack(scope)-  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToBack(scope)-  1;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
263	[BUG]  [BUGGY]  n.removeChild(scope)-  1  +  1;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope)-  1  +  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)-  1  +  1;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
264	[BUG]  [BUGGY]  n.removeChild(scope)-  2;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope)-  2;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)-  2;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
265	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneChildren());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneChildren());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.cloneChildren());	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
266	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getParent());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getParent());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.getParent());	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
267	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    scope    =    traverseBooleanLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
268	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  scope  =  traverseObjectLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  scope  =  traverseObjectLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  scope  =  traverseObjectLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    scope    =    traverseBooleanLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
269	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues? "true "  :  false);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues? "true "  :  false);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.booleanValues? "true "  :  false);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
270	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues  +  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.booleanValues  +  1);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
271	[BUG]  [BUGGY]  n  =  n.cloneTree();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.cloneTree();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.cloneTree();	  n    =    n.removeFirstChild();    	non-compiled	[CE]  ';'  expected	77	None	replace
272	[BUG]  [BUGGY]  n  =  scope.getNumberOfLinks();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNumberOfLinks();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNumberOfLinks();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
273	[BUG]  [BUGGY]  n  =  scope.getJoinedFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getJoinedFlowScope();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
274	[BUG]  [BUGGY]  n  =  scope.getJsDocInfo();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getJsDocInfo();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getJsDocInfo();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
275	[BUG]  [BUGGY]  shadow  =  traverseLitLiteral(n,  scope  -  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  shadow  =  traverseLitLiteral(n,  scope  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseLitLiteral(n,  scope  -  1);	  shadow    =    traverseLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	10	None	replace
276	[BUG]  [BUGGY]  cope!=  null  &&  scope.hasChildren())  {  break;  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope.hasChildren())  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope.hasChildren())  {  break;  }	  cope!=    null)    {    break;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
277	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  -  1);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOBJECTLIT(n,  scope  -  1);	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	48	None	replace
278	[BUG]  [BUGGY]  n  =  n.getChildCount()  -  2;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getChildCount()  -  2;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getChildCount()  -  2;	  n    =    n.getChildCount();    	non-compiled	[CE]  ';'  expected	60	None	replace
279	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope  -  1  +  1);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope  -  1  +  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope  -  1  +  1);	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
280	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope  *  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope  *  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope  *  1);	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
281	[BUG]  [BUGGY]  scope  =  traverseLocalLiteral(n,  scope  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLocalLiteral(n,  scope  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLocalLiteral(n,  scope  -  1);	  scope    =    traverseLocalLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
282	[BUG]  [BUGGY]  scope  =  traverseEmbeddedBooleanLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseEmbeddedBooleanLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseEmbeddedBooleanLiteral(n,  scope).getJoinedFlowScope();	  scope    =    traverseEmbeddedBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	70	None	replace
283	[BUG]  [BUGGY]  scope  =  traverseEmbeddedBooleanLiteral(n,  scope).booleanValues;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseEmbeddedBooleanLiteral(n,  scope).booleanValues;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseEmbeddedBooleanLiteral(n,  scope).booleanValues;	  scope    =    traverseEmbeddedBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	70	None	replace
284	[BUG]  [BUGGY]  scope  =  traverseEmbeddedBooleanLiteral(n,  scope  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseEmbeddedBooleanLiteral(n,  scope  -  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseEmbeddedBooleanLiteral(n,  scope  -  1);	  scope    =    traverseEmbeddedBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	70	None	replace
285	[BUG]  [BUGGY]  n.setJSType(FIELD_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(FIELD_TYPE);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(FIELD_TYPE);	  n.setJSType(OBJECTLIT_TYPE);    	non-compiled	[CE]  ';'  expected	57	None	replace
286	[BUG]  [BUGGY]  n.setJSType(UNKNOWN);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(UNKNOWN);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(UNKNOWN);	  n.setJSType(OBJECTLIT_TYPE);    	non-compiled	[CE]  ';'  expected	57	None	replace
287	[BUG]  [BUGGY]  n.setJSType(STATE_TYPE);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(STATE_TYPE);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(STATE_TYPE);	  n.setJSType(OBJECTLIT);    	non-compiled	[CE]  ';'  expected	58	None	replace
288	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).createJSFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).createJSFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).createJSFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	3	None	replace
289	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).createThreeFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).createThreeFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).createThreeFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	3	None	replace
290	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
291	[BUG]  [BUGGY]  n.addChildToBack(functionScope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToBack(functionScope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToBack(functionScope);	  n.addChildToBack(scope);    	non-compiled	[CE]  ';'  expected	33	None	replace
292	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECTLIT_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECTLIT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(compiler.getNativeType(JSTypeNative.OBJECTLIT_TYPE));	  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
293	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECTLIT));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECTLIT));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(compiler.getNativeType(JSTypeNative.OBJECTLIT));	  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
294	[BUG]  [BUGGY]  cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLit(n,  scope);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
295	[BUG]  [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseObjectLit(n,  scope);  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseObjectLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseObjectLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  not  a  statement	7	None	replace
296	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  castType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE)+  castType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE)+  castType);	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	59	None	replace
297	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedScope().createChildFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	78	None	replace
298	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	78	None	replace
299	[BUG]  [BUGGY]  n.addChildToBack(scope)+  1;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToBack(scope)+  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToBack(scope)+  1;	  n.removeChild(scope)+    1;    	non-compiled	[CE]  not  a  statement	35	None	replace
300	[BUG]  [BUGGY]  if(scope  ==  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null  &&  scope.getType()  ==  Token.FUNCTION)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
301	[BUG]  [BUGGY]  if(scope  ==  null  ||  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null  ||  scope.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null  ||  scope.getType()  ==  Token.FUNCTION)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
302	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));  break;	  n.setJSType(castType);    break;    	non-compiled	[CE]  ';'  expected	65	None	replace
303	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));  break;	  n.setJSType(castType);    break;    	non-compiled	[CE]  ';'  expected	65	None	replace
304	[BUG]  [BUGGY]  n.setJSType(OBJECTLIT_TYPE);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(OBJECTLIT_TYPE);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(OBJECTLIT_TYPE);  break;	  n.setJSType(castType);    break;    	non-compiled	[CE]  ';'  expected	65	None	replace
305	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));  break;	  n.setJSType(castType);    break;    	non-compiled	[CE]  ';'  expected	65	None	replace
306	[BUG]  [BUGGY]  if(scope  ==  null  ||  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null  ||  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null  ||  scope.getType()  ==  Token.OBJECTLIT)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
307	[BUG]  [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
308	[BUG]  [BUGGY]  cope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    break;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
309	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
310	[BUG]  [BUGGY]  n  =  n.getNumberOfLinks();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getNumberOfLinks();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getNumberOfLinks();	  n    =    n.getNext();    	non-compiled	[CE]  ';'  expected	24	None	replace
311	[BUG]  [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseObjectLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
312	[BUG]  [BUGGY]  cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope.getType()  ==  Token.FUNCTION)  {  scope  =  traverseObjectLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
313	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	6	None	replace
314	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope());  }  else  {  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope());  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope());  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
315	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseOBJECTLIT(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseOBJECTLIT(n,  scope);  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseOBJECTLIT(n,  scope);  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
316	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseOBJECTLit(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseOBJECTLit(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseOBJECTLit(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
317	[BUG]  [BUGGY]  n.addChildToFront(functionScope,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(functionScope,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(functionScope,  scope);	  n.addChildToFront(functionScope);    	non-compiled	[CE]  ';'  expected	61	None	replace
318	[BUG]  [BUGGY]  n.removeChild(functionScope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(functionScope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(functionScope);	  n.addChildToFront(functionScope);    	non-compiled	[CE]  ';'  expected	61	None	replace
319	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createThreeFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createThreeFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).createThreeFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	44	None	replace
320	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJSFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJSFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).createJSFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	44	None	replace
321	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    scope    =    traverseBooleanLiteral(n,    scope);    }    	non-compiled	[CE]  ';'  expected	71	None	replace
322	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	12	None	replace
323	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createJSFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createJSFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).createJSFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	12	None	replace
324	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).createFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	12	None	replace
325	[BUG]  [BUGGY]  n  =  scope.getNumberOfObjects();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.getNumberOfObjects();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.getNumberOfObjects();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
326	[BUG]  [BUGGY]  n  =  scope.createChildObjectFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.createChildObjectFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.createChildObjectFlowScope();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
327	[BUG]  [BUGGY]  n  =  scope.createChildObjectScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  scope.createChildObjectScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  scope.createChildObjectScope();	  n    =    scope.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	1	None	replace
328	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.CALL)  {  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.CALL)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.CALL)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
329	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.STRING)  {  break;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.STRING)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.STRING)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.OBJECTLIT)    {    break;    }    	non-compiled	[CE]  ';'  expected	74	None	replace
330	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(2));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanLiteralSet(2));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanLiteralSet(2));	  n.addChildToFront(scope,    new    BooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	37	None	replace
331	[BUG]  [BUGGY]  if(toBooleanOutcomes)  {  scope  =  traverseBooleanLiteral(n,  scope.booleanValues);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(toBooleanOutcomes)  {  scope  =  traverseBooleanLiteral(n,  scope.booleanValues);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(toBooleanOutcomes)  {  scope  =  traverseBooleanLiteral(n,  scope.booleanValues);  }	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
332	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues?  BooleanLiteralSet.TRUE  :  BooleanLiteralSet.FALSE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues?  BooleanLiteralSet.TRUE  :  BooleanLiteralSet.FALSE);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.booleanValues?  BooleanLiteralSet.TRUE  :  BooleanLiteralSet.FALSE);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
333	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues  ||  toBooleanOutcomes);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope.booleanValues  ||  toBooleanOutcomes);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope.booleanValues  ||  toBooleanOutcomes);	  scope    =    traverseBooleanLiteral(n,    scope.booleanValues);    	non-compiled	[CE]  ';'  expected	49	None	replace
334	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
335	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseNumberLiteral(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseNumberLiteral(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseNumberLiteral(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
336	[BUG]  [BUGGY]  n.setChildCount(n.getFirstChild());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setChildCount(n.getFirstChild());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(n.getFirstChild());	  n.setChildCount(n.getChildCount());    	non-compiled	[CE]  ';'  expected	69	None	replace
337	[BUG]  [BUGGY]  n.setJSType(cast);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(cast);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(cast);	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	28	None	replace
338	[BUG]  [BUGGY]  n.setChildCount(scope)-  1;  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setChildCount(scope)-  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setChildCount(scope)-  1;	  n.removeChild(scope)-    1;    	non-compiled	[CE]  not  a  statement	34	None	replace
339	[BUG]  [BUGGY]  n  =  n!=  null?  scope.getNumberOfLinks()  :  n.getJSDocInfo();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n!=  null?  scope.getNumberOfLinks()  :  n.getJSDocInfo();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n!=  null?  scope.getNumberOfLinks()  :  n.getJSDocInfo();	  n    =    n!=    null?    scope.getJSDocInfo()    :    n.getJSDocInfo();    	non-compiled	[CE]  ';'  expected	54	None	replace
340	[BUG]  [BUGGY]  n  =  n.getFirstChild()  ||  n.getJSDocInfo()!=  null;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getFirstChild()  ||  n.getJSDocInfo()!=  null;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getFirstChild()  ||  n.getJSDocInfo()!=  null;	  n    =    n.getJSDocInfo()    ||    n.getJSDocInfo()!=    null;    	non-compiled	[CE]  ';'  expected	55	None	replace
341	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE),  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE),  scope);	  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
342	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)||  getNativeType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)||  getNativeType(JSTypeNative.OBJECT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE)||  getNativeType(JSTypeNative.OBJECT_TYPE));	  n.setJSType(getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	29	None	replace
343	[BUG]  [BUGGY]  n.setFunctionScope(functionScope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setFunctionScope(functionScope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setFunctionScope(functionScope);	  n.addChildToFront(functionScope);    	non-compiled	[CE]  ';'  expected	61	None	replace
344	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedInputScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedInputScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedInputScope().createChildFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	78	None	replace
345	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedOutcome().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedOutcome().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedOutcome().createChildFlowScope();	  scope    =    traverseObjLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	78	None	replace
346	[BUG]  [BUGGY]  n.addChildToFront(scope,  new  BooleanIncomePair());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  new  BooleanIncomePair());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  new  BooleanIncomePair());	  n.addChildToFront(scope,    scope);    	non-compiled	[CE]  ';'  expected	36	None	replace
347	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues  ||!toBooleanOutcomes;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).booleanValues  ||!toBooleanOutcomes;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).booleanValues  ||!toBooleanOutcomes;	  scope    =    traverseBooleanLiteral(n,    scope).booleanValues;    	non-compiled	[CE]  ';'  expected	50	None	replace
348	[BUG]  [BUGGY]  shadow  =  traverseBooleanLiteral(n,  scope.booleanValues);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  shadow  =  traverseBooleanLiteral(n,  scope.booleanValues);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	shadow  =  traverseBooleanLiteral(n,  scope.booleanValues);	  shadow    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
349	[BUG]  [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(OBJECT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(OBJECT_TYPE));	  n.addChildToBack(scope);    	non-compiled	[CE]  ';'  expected	33	None	replace
350	[BUG]  [BUGGY]  scope  =  traverseOBJECTLITLiteral(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOBJECTLITLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOBJECTLITLiteral(n,  scope);	  scope    =    traverseObjLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
351	[BUG]  [BUGGY]  scope  =  traverseObjectLitLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLitLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLitLiteral(n,  scope);	  scope    =    traverseObjLitLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
352	[BUG]  [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseBooleanLiteral(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
353	[BUG]  [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseBooleanLiteral(n,  scope);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseBooleanLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope  instanceof  BooleanLiteralSet)  {  scope  =  traverseBooleanLiteral(n,  scope);	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    	non-compiled	[CE]  not  a  statement	6	None	replace
354	[BUG]  [BUGGY]  n.setJSType(baseType);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(baseType);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(baseType);  break;	  n.setJSType(castType);    break;    	non-compiled	[CE]  ';'  expected	65	None	replace
355	[BUG]  [BUGGY]  n.setJSType(baseType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(baseType);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(baseType);	  n.setJSType(OBJECTLIT_TYPE);    	non-compiled	[CE]  ';'  expected	57	None	replace
356	[BUG]  [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE)+  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE)+  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE)+  1);	  n.setJSType(getNativeType(JSTypeNative.OBJECTLIT_TYPE));    	non-compiled	[CE]  ';'  expected	30	None	replace
357	[BUG]  [BUGGY]  scope  =  traverseOptLitLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseOptLitLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseOptLitLiteral(n,  scope);	  scope    =    traverseLocalLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
358	[BUG]  [BUGGY]  n.removeChild(scope,  getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  getNativeType(UNKNOWN_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  getNativeType(UNKNOWN_TYPE));	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
359	[BUG]  [BUGGY]  n.removeChild(scope,  getNativeType(JSTypeNative.OBJECT_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope,  getNativeType(JSTypeNative.OBJECT_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope,  getNativeType(JSTypeNative.OBJECT_TYPE));	  n.removeChild(scope,    scope);    	non-compiled	[CE]  ';'  expected	32	None	replace
360	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObject(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObject(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObject(n,  scope);  break;  }	  scope    =    traverseObject(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	67	None	replace
361	[BUG]  [BUGGY]  n  =  traverseBooleanLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  traverseBooleanLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  traverseBooleanLiteral(n,  scope);  break;	  scope    =    traverseBooleanLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	42	None	replace
362	[BUG]  [BUGGY]  n  =  n.getFirstChild()  ||  n.getJSDocInfo()  ==  null;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getFirstChild()  ||  n.getJSDocInfo()  ==  null;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getFirstChild()  ||  n.getJSDocInfo()  ==  null;	  n    =    n.getJSDocInfo()    ||    n.getJSDocInfo()    ==    null;    	non-compiled	[CE]  ';'  expected	56	None	replace
363	[BUG]  [BUGGY]  n  =  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();	  n    =    n.getParent();    	non-compiled	[CE]  ';'  expected	26	None	replace
364	[BUG]  [BUGGY]  n  =  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();	  n    =    n.getParent();    	non-compiled	[CE]  ';'  expected	26	None	replace
365	[BUG]  [BUGGY]  n  =  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getNext();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getNext();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getNext();	  n    =    n.getParent();    	non-compiled	[CE]  ';'  expected	26	None	replace
366	[BUG]  [BUGGY]  scope  =  traverseNullLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseNullLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseNullLiteral(n,  scope);	  scope    =    traverseNumberLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	18	None	replace
367	[BUG]  [BUGGY]  scope  =  traverseShortLiteral(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseShortLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseShortLiteral(n,  scope);	  scope    =    traverseLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	22	None	replace
368	[BUG]  [BUGGY]  cope  =  traverseObjectLit(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope  =  traverseObjectLit(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope  =  traverseObjectLit(n,  scope);	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
369	[BUG]  [BUGGY]  State  state  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  State  state  =  n.getFirstChild();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	State  state  =  n.getFirstChild();	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
370	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseNull(n,  scope);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseNull(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseNull(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
371	[BUG]  [BUGGY]  scope  =  traverseLitValue(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitValue(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitValue(n,  scope);  break;	  scope    =    traverseLit(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	63	None	replace
372	[BUG]  [BUGGY]  cope!=  null  &&  scope.isExported(n))  {  break;  }  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope!=  null  &&  scope.isExported(n))  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope!=  null  &&  scope.isExported(n))  {  break;  }	  cope!=    null)    {    break;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
373	[BUG]  [BUGGY]  cope  =  traverseObjectLit(n,  scope);  break;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  cope  =  traverseObjectLit(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	cope  =  traverseObjectLit(n,  scope);  break;	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
374	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseNull(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseNull(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseNull(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
375	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    break;    }    	non-compiled	[CE]  ';'  expected	76	None	replace
376	[BUG]  [BUGGY]  scope  =  traverseDeepestBooleanLiteral(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseDeepestBooleanLiteral(n,  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseDeepestBooleanLiteral(n,  scope);	  scope    =    traverseEmbeddedBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	70	None	replace
377	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
378	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
379	[BUG]  [BUGGY]  n.setJSType(scope.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(scope.getNativeType(UNKNOWN_TYPE));	  n.setJSType(getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	59	None	replace
380	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE)+  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE)+  1);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE)+  1);	  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
381	[BUG]  [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE),  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE),  scope);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE),  scope);	  n.setJSType(compiler.getNativeType(JSTypeNative.OBJECT_TYPE));    	non-compiled	[CE]  ';'  expected	31	None	replace
382	[BUG]  [BUGGY]  n.removeChild(scope)*  1;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.removeChild(scope)*  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.removeChild(scope)*  1;	  n.removeChild(scope)+    1;    	non-compiled	[CE]  not  a  statement	35	None	replace
383	[BUG]  [BUGGY]  n.putBooleanProp(Node.SYNTHETIC_PROP,  true);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.putBooleanProp(Node.SYNTHETIC_PROP,  true);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.putBooleanProp(Node.SYNTHETIC_PROP,  true);  break;	  n.removeChild(scope);    break;    	non-compiled	[CE]  ';'  expected	66	None	replace
384	[BUG]  [BUGGY]  n.putBooleanProp(Node.SYNTHETIC_PROP,  false);  break;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.putBooleanProp(Node.SYNTHETIC_PROP,  false);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.putBooleanProp(Node.SYNTHETIC_PROP,  false);  break;	  n.removeChild(scope);    break;    	non-compiled	[CE]  ';'  expected	66	None	replace
385	[BUG]  [BUGGY]  n.putBooleanProp(Node.SIGNATURE_PROP,  true);  break;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.putBooleanProp(Node.SIGNATURE_PROP,  true);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.putBooleanProp(Node.SIGNATURE_PROP,  true);  break;	  n.removeChild(scope);    break;    	non-compiled	[CE]  ';'  expected	66	None	replace
386	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseBoolean(n,  scope);  break;  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseBoolean(n,  scope);  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseBoolean(n,  scope);  break;  }	  scope    =    traverseBoolean(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	41	None	replace
387	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedInputScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedInputScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedInputScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
388	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedThroughScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedThroughScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedThroughScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
389	[BUG]  [BUGGY]  n  =  n.getPreviousSibling();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getPreviousSibling();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getPreviousSibling();	  n    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
390	[BUG]  [BUGGY]  n  =  n.firstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.firstChild();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.firstChild();	  n    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
391	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.VAR)  {  break;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.VAR)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.VAR)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
392	[BUG]  [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.FOR)  {  break;  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null  &&  scope.getType()  ==  Token.FOR)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null  &&  scope.getType()  ==  Token.FOR)  {  break;  }	  if(scope!=    null    &&    scope.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
393	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();	  scope    =    traverseLitLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	13	None	replace
394	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseBooleanLiteral(n,  scope);  }	  scope    =    traverseOtherLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	21	None	replace
395	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }	  scope    =    traverseOtherLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	21	None	replace
396	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseLongLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseLongLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseLongLiteral(n,  scope);  }	  scope    =    traverseOtherLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	21	None	replace
397	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseObjectLiteral(n,  scope);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseObjectLiteral(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseOtherLiteral(n,  scope);  }  else  {  scope  =  traverseObjectLiteral(n,  scope);  }	  scope    =    traverseOtherLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	21	None	replace
398	[BUG]  [BUGGY]  n  =  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getNext();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getNext();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getNext();	  n    =    n.getNext();    	non-compiled	[CE]  ';'  expected	24	None	replace
399	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope)-  1;  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLitLiteral(n,  scope)-  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLitLiteral(n,  scope)-  1;	  scope    =    traverseLitLiteral(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	53	None	replace
400	[BUG]  [BUGGY]  n.addChildToFront(scope,  n.getFirstChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n.addChildToFront(scope,  n.getFirstChild());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n.addChildToFront(scope,  n.getFirstChild());	  n.addChildToFront(scope,    n);    	non-compiled	[CE]  ';'  expected	79	None	replace
401	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseUndefined(n,  scope);  break;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseUndefined(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseUndefined(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
402	[BUG]  [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseInstanceLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  case  Token.OBJECTLIT:  scope  =  traverseInstanceLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	case  Token.OBJECTLIT:  scope  =  traverseInstanceLiteral(n,  scope);  break;	  case    Token.OBJECTLIT:    scope    =    traverseObjectLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	62	None	replace
403	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLit(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
404	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope)-  1;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope)-  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope)-  1;	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
405	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope)+  1;  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLit(n,  scope)+  1;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLit(n,  scope)+  1;	  scope    =    traverseObjectLit(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	51	None	replace
406	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseBoolean(n,    scope);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
407	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseLit(n,  scope);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseLit(n,  scope);  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseLit(n,  scope);  }	  if(scope!=    null)    {    scope    =    traverseBoolean(n,    scope);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
408	[BUG]  [BUGGY]  if(scope  ==  null  ||  scope.getType()!=  Token.OBJECTLIT)  {  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null  ||  scope.getType()!=  Token.OBJECTLIT)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null  ||  scope.getType()!=  Token.OBJECTLIT)  {  break;  }	  if(scope    ==    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
409	[BUG]  [BUGGY]  if(scope  ==  null  ||  scope.getType()!=  Token.FUNCTION)  {  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null  ||  scope.getType()!=  Token.FUNCTION)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null  ||  scope.getType()!=  Token.FUNCTION)  {  break;  }	  if(scope    ==    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
410	[BUG]  [BUGGY]  if(scope  ==  null  ||  scope.getType()!=  Token.GETPROP)  {  break;  }  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope  ==  null  ||  scope.getType()!=  Token.GETPROP)  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope  ==  null  ||  scope.getType()!=  Token.GETPROP)  {  break;  }	  if(scope    ==    null)    {    break;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
411	[BUG]  [BUGGY]  n  =  n.createChildObjectInfo();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.createChildObjectInfo();  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.createChildObjectInfo();	  n    =    n.createJSDocInfo();    	non-compiled	[CE]  ';'  expected	2	None	replace
412	[BUG]  [BUGGY]  n  =  n.createJSDocInfo(scope,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.createJSDocInfo(scope,  n);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.createJSDocInfo(scope,  n);	  n    =    n.createJSDocInfo();    	non-compiled	[CE]  ';'  expected	2	None	replace
413	[BUG]  [BUGGY]  n  =  n.createJSDocInfo(scope,  info);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  n  =  n.createJSDocInfo(scope,  info);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	n  =  n.createJSDocInfo(scope,  info);	  n    =    n.createJSDocInfo();    	non-compiled	[CE]  ';'  expected	2	None	replace
414	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneTree(),  true);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.cloneTree(),  true);  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.cloneTree(),  true);	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
415	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.clonePair());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.clonePair());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.clonePair());	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
416	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.toString());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.toString());  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseObjectLiteral(n,  scope.toString());	  scope    =    traverseObjectLiteral(n,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	19	None	replace
417	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseBooleanLiteral(n,  scope);  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
418	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }  else  {  break;  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }  else  {  break;  }  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	if(scope!=  null)  {  scope  =  traverseObjLitLiteral(n,  scope);  }  else  {  break;  }	  if(scope!=    null)    {    scope    =    traverseObjectLiteral(n,    scope);    }    else    {    break;    }    	non-compiled	[CE]  ';'  expected	72	None	replace
419	[BUG]  [BUGGY]  scope  =  traverseLiteral(n,  scope);  break;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);      [BUGGY]  scope  =  traverseLiteral(n,  scope);  break;  [BUGGY]        case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  case  Token.ASSIGN_ADD:  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	281	281	1	replace	scope  =  traverseLiteral(n,  scope);  break;	  scope    =    traverseLitLiteral(n,    scope);    break;    	non-compiled	[CE]  ';'  expected	43	None	replace
