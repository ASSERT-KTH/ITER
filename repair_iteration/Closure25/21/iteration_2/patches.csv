bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.isUnknownType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null?   "null "  :  type.isUnknownType());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	39	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  null  :  type.isUnknownType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  null  :  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  null  :  type.isUnknownType());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	39	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.isObject());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.isObject());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.isObject());	  Preconditions.checkArgument(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	79	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isArray());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isArray());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isArray());	  Preconditions.checkArgument(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	79	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isObject());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isObject());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.isObject());	  Preconditions.checkArgument(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	79	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.getNativeType(UNKNOWN_TYPE));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null?   "null "  :  type.getNativeType(UNKNOWN_TYPE));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	66	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  type.getNativeType(UNKNOWN_TYPE):  type.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  type.getNativeType(UNKNOWN_TYPE):  type.getNativeType(UNKNOWN_TYPE));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  type.getNativeType(UNKNOWN_TYPE):  type.getNativeType(UNKNOWN_TYPE));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	66	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.getNativeType(UNKNOWN_TYPE));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null?   "null "  :  type.getNativeType(UNKNOWN_TYPE));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	66	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType.isUnknownType()  :  type.equals(valueType));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType.isUnknownType()  :  type.equals(valueType));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  valueType.isUnknownType()  :  type.equals(valueType));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.equals(valueType));    	non-compiled	[CE]  ';'  expected	81	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.equals(valueType));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.equals(valueType));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null?   "null "  :  type.equals(valueType));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.equals(valueType));    	non-compiled	[CE]  ';'  expected	81	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.equals(valueType));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.equals(valueType));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null?   "null "  :  type.equals(valueType));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.equals(valueType));    	non-compiled	[CE]  ';'  expected	81	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType.equals( "null "):  type.equals(valueType));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType.equals( "null "):  type.equals(valueType));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  valueType.equals( "null "):  type.equals(valueType));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.equals(valueType));    	non-compiled	[CE]  ';'  expected	81	None	replace
13	[BUG]  [BUGGY]  Node  value  =  type.getLastChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  value  =  type.getLastChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  type.getLastChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
14	[BUG]  [BUGGY]  Node  value  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  value  =  scope.getLastChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  scope.getLastChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
15	[BUG]  [BUGGY]  Node  value  =  n.getNext();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  value  =  n.getNext();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  n.getNext();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
16	[BUG]  [BUGGY]  Node  value  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  value  =  type.getFirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  type.getFirstChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
17	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.isUnknownType()  :  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.isUnknownType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.isUnknownType()  :  null;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
18	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.isUnknownType()  :  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.isUnknownType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  scope.isUnknownType()  :  null;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
19	[BUG]  [BUGGY]  JSType  oldValueType  =  scope.isUnknownType()?  type  :  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  scope.isUnknownType()?  type  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  scope.isUnknownType()?  type  :  null;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
20	[BUG]  [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
21	[BUG]  [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(JSTypeNative.OBJECT_TYPE);	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null,  scope);	  Preconditions.checkArgument(type!=    null,    scope);    	non-compiled	[CE]  ';'  expected	78	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null,  scope);	  Preconditions.checkArgument(type!=    null,    scope);    	non-compiled	[CE]  ';'  expected	78	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null,  scope  }  );  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null,  scope  }  );  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null,  scope  }  );	  Preconditions.checkArgument(type!=    null,    scope);    	non-compiled	[CE]  ';'  expected	78	None	replace
25	[BUG]  [BUGGY]  Node  n  =  type.getLastChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  type.getLastChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type.getLastChild();	  Node    n    =    type.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
26	[BUG]  [BUGGY]  Node  n  =  type!=  null?  scope.getNativeType(JSTypeNative.OBJECT_TYPE):  type.getNext();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  type!=  null?  scope.getNativeType(JSTypeNative.OBJECT_TYPE):  type.getNext();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type!=  null?  scope.getNativeType(JSTypeNative.OBJECT_TYPE):  type.getNext();	  Node    n    =    type.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
27	[BUG]  [BUGGY]  Node  n  =  type!=  null?  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE):  type.getNext();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  type!=  null?  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE):  type.getNext();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type!=  null?  scope.getNativeType(JSTypeNative.UNKNOWN_TYPE):  type.getNext();	  Node    n    =    type.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
28	[BUG]  [BUGGY]  Node  n  =  type!=  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getNext();  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  type!=  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getNext();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type!=  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getNext();	  Node    n    =    type.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
29	[BUG]  [BUGGY]  Node  n  =  type.getParent();  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  type.getParent();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type.getParent();	  Node    n    =    type.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  null);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  null);	  Preconditions.checkArgument(n.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	71	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()!=  null);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()!=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()!=  null);	  Preconditions.checkArgument(n.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	71	None	replace
32	[BUG]  [BUGGY]  Node  value  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  value  =  scope.getFirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  scope.getFirstChild();	  Node    value    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	73	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  type,  scope);	  Preconditions.checkArgument(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  scope);	  Preconditions.checkArgument(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  ObjectType.OBJECT_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  ObjectType.OBJECT_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  ObjectType.OBJECT_TYPE);	  Preconditions.checkArgument(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  objectType);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  objectType);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  objectType);	  Preconditions.checkArgument(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  ObjectType.UNKNOWN);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  ObjectType.UNKNOWN);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  ObjectType.UNKNOWN);	  Preconditions.checkArgument(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.hasChildren());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.hasChildren());	  Preconditions.checkState(type    ==    null    ||    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	59	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.hasChildren());	  Preconditions.checkState(type    ==    null    ||    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	59	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.hasChildCount());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.hasChildCount());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.hasChildCount());	  Preconditions.checkState(type    ==    null    ||    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	59	None	replace
41	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getJSType(),  n);	  Scope    scope    =    traverse(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
42	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  type,  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getJSType(),  type,  scope);	  Scope    scope    =    traverse(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
43	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  type);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getJSType(),  type);	  Scope    scope    =    traverse(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
44	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getJSType(),  scope);	  Scope    scope    =    traverse(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
45	[BUG]  [BUGGY]  Scope  scope  =  traverse(scope.getJSType(),  type);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(scope.getJSType(),  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(scope.getJSType(),  type);	  Scope    scope    =    traverse(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
46	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  type  +  1);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  type  +  1);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getJSType(),  type  +  1);	  Scope    scope    =    traverse(n.getJSType(),    type);    	non-compiled	[CE]  ';'  expected	21	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()!=  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()!=  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()!=  n);	  Preconditions.checkState(n.getType()!=    type);    	non-compiled	[CE]  ';'  expected	10	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(type!=  n.getType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  n.getType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  n.getType());	  Preconditions.checkState(n.getType()!=    type);    	non-compiled	[CE]  ';'  expected	10	None	replace
49	[BUG]  [BUGGY]  JSType  oldValueType  =  n.getNodeType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  n.getNodeType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  n.getNodeType();	  JSType    oldValueType    =    type.getNodeType();    	non-compiled	[CE]  ';'  expected	55	None	replace
50	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getOwnValueType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getOwnValueType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getOwnValueType();	  JSType    oldValueType    =    type.getNodeType();    	non-compiled	[CE]  ';'  expected	55	None	replace
51	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getObjectType();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getObjectType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getObjectType();	  JSType    oldValueType    =    type.getNodeType();    	non-compiled	[CE]  ';'  expected	55	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.hasChildren());	  Preconditions.checkState(type    ==    null    &&    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	60	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasChildCount());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasChildCount());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.hasChildCount());	  Preconditions.checkState(type    ==    null    &&    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	60	None	replace
54	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.toString()  :  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.toString()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.toString()  :  null;	  JSType    oldValueType    =    type.toString();    	non-compiled	[CE]  ';'  expected	74	None	replace
55	[BUG]  [BUGGY]  JSType  oldValueType  =  n.toString();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  n.toString();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  n.toString();	  JSType    oldValueType    =    type.toString();    	non-compiled	[CE]  ';'  expected	74	None	replace
56	[BUG]  [BUGGY]  JSType  oldValueType  =  type.toString()  +  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.toString()  +  1;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.toString()  +  1;	  JSType    oldValueType    =    type.toString();    	non-compiled	[CE]  ';'  expected	74	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	37	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	37	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  &&  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	37	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	37	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.getType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.getType()!=  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  &&  type.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	37	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.isObject());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.isObject());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.isObject());	  Preconditions.checkState(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	83	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isArray());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isArray());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isArray());	  Preconditions.checkState(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	83	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isInstanceType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isInstanceType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isInstanceType());	  Preconditions.checkState(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	83	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isSubtype(scope));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isSubtype(scope));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isSubtype(scope));	  Preconditions.checkState(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	83	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.NAME);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.NAME);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.NAME);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.NAME);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.NAME);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.NAME);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  scope);	  Preconditions.checkState(n.getType()    ==    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()!=  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()!=  scope);	  Preconditions.checkState(n.getType()    ==    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  scope,  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  scope,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  scope,  type);	  Preconditions.checkState(n.getType()    ==    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope.getType()  ==  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.getType()  ==  n);	  Preconditions.checkState(n.getType()    ==    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()!=  scope);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()!=  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()!=  scope);	  Preconditions.checkState(n.getType()    ==    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.isInterface());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.isInterface());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.isInterface());	  Preconditions.checkArgument(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	62	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isInterface());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isInterface());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.isInterface());	  Preconditions.checkArgument(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	62	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isSubtype(scope));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isSubtype(scope));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isSubtype(scope));	  Preconditions.checkArgument(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	62	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()!=  n);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()!=  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()!=  n);	  Preconditions.checkArgument(n.getType()!=    type);    	non-compiled	[CE]  ';'  expected	6	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  n.getType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  n.getType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  n.getType());	  Preconditions.checkArgument(n.getType()!=    type);    	non-compiled	[CE]  ';'  expected	6	None	replace
82	[BUG]  [BUGGY]  JSType  oldValueType  =  n.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  n.getJSType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  n.getJSType();	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
83	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getJSType()  :  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getJSType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.getJSType()  :  null;	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
84	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getReturnType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getReturnType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getReturnType();	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
85	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  type.getJSType()  :  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  type.getJSType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  type.getJSType()  :  null;	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()!=  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope.getType()!=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.getType()!=  null);	  Preconditions.checkState(type.getType()!=    null);    	non-compiled	[CE]  ';'  expected	35	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  scope);	  Preconditions.checkArgument(type!=    n);    	non-compiled	[CE]  ';'  expected	65	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  n.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  n.getJSType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  n.getJSType());	  Preconditions.checkArgument(type!=    n);    	non-compiled	[CE]  ';'  expected	65	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  n,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  n,  scope);	  Preconditions.checkArgument(type!=    n);    	non-compiled	[CE]  ';'  expected	65	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(type!=  ObjectType.UNKNOWN);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  ObjectType.UNKNOWN);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  ObjectType.UNKNOWN);	  Preconditions.checkState(type    ==    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  ObjectType.UNKNOWN);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  ObjectType.UNKNOWN);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  ObjectType.UNKNOWN);	  Preconditions.checkState(type    ==    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(type!=  ObjectType.OBJECT_TYPE);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  ObjectType.OBJECT_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  ObjectType.OBJECT_TYPE);	  Preconditions.checkState(type    ==    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  ObjectType.OBJECT_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  ObjectType.OBJECT_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  ObjectType.OBJECT_TYPE);	  Preconditions.checkState(type    ==    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(type!=  n,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  n,  scope);	  Preconditions.checkState(type    ==    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	36	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	36	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.getType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  &&  type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	36	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	36	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	30	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	30	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.OBJECTLIT);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	30	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	30	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  n,  scope);	  Preconditions.checkArgument(type    ==    n);    	non-compiled	[CE]  ';'  expected	64	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  n.getJSType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  n.getJSType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  n.getJSType());	  Preconditions.checkArgument(type    ==    n);    	non-compiled	[CE]  ';'  expected	64	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.isInterface());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.isInterface());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.isInterface());	  Preconditions.checkState(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	46	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isFunction());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isFunction());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isFunction());	  Preconditions.checkState(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	46	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.isInterface());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.isInterface());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.isInterface());	  Preconditions.checkState(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	46	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.hasChildren());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.hasChildren());	  Preconditions.checkArgument(type!=    null    &&    type.hasChildren());    	non-compiled	[CE]  ';'  expected	27	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(!TypeUtil.isFunctionObjectType(type));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(!TypeUtil.isFunctionObjectType(type));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(!TypeUtil.isFunctionObjectType(type));	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(TypeUtil.isFunctionObjectType(type),  scope);	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type)||  type!=  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type)||  type!=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(TypeUtil.isFunctionObjectType(type)||  type!=  null);	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(TypeUtil.isObjectType(type));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(TypeUtil.isObjectType(type));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(TypeUtil.isObjectType(type));	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type)||  type  ==  null);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type)||  type  ==  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(TypeUtil.isFunctionObjectType(type)||  type  ==  null);	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type,  scope));  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type,  scope));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(TypeUtil.isFunctionObjectType(type,  scope));	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()!=  type,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()!=  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()!=  type,  scope);	  Preconditions.checkArgument(n.getType()!=    type,    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()!=  n,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()!=  n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()!=  n,  scope);	  Preconditions.checkArgument(n.getType()!=    type,    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(valueType!=  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(valueType!=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(valueType!=  null);	  Preconditions.checkState(valueType    ==    null);    	non-compiled	[CE]  ';'  expected	70	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(type  >=  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  >=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  >=  null);	  Preconditions.checkState(valueType    ==    null);    	non-compiled	[CE]  ';'  expected	70	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()!=  type,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()!=  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()!=  type,  scope);	  Preconditions.checkState(n.getType()!=    type,    scope);    	non-compiled	[CE]  ';'  expected	11	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()!=  n,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()!=  n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()!=  n,  scope);	  Preconditions.checkState(n.getType()!=    type,    scope);    	non-compiled	[CE]  ';'  expected	11	None	replace
121	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getScope(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getScope(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getScope(),  scope);	  Scope    scope    =    traverse(type.getScope(),    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
122	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getScope(),  scope,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getScope(),  scope,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getScope(),  scope,  scope);	  Scope    scope    =    traverse(type.getScope(),    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
123	[BUG]  [BUGGY]  Scope  scope  =  traverse(scope.getScope(),  type);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(scope.getScope(),  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(scope.getScope(),  type);	  Scope    scope    =    traverse(type.getScope(),    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
124	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getParent(),  scope);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getParent(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getParent(),  scope);	  Scope    scope    =    traverse(type.getScope(),    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
125	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getType(),  scope);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getType(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getType(),  scope);	  Scope    scope    =    traverse(type.getScope(),    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasAnyChild());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasAnyChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.hasAnyChild());	  Preconditions.checkState(type!=    null    &&    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	42	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkState(type!=  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  scope);	  Preconditions.checkState(type!=    n);    	non-compiled	[CE]  ';'  expected	47	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(n!=  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n!=  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n!=  type);	  Preconditions.checkState(type!=    n);    	non-compiled	[CE]  ';'  expected	47	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkArgument(type.hasChildren()  ||  type.hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.hasChildren()  ||  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.hasChildren()  ||  type.hasChildren());	  Preconditions.checkArgument(type.hasChildren());    	non-compiled	[CE]  ';'  expected	24	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasChildren()  ||  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild()    ||    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	44	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(type.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild()    ||    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	44	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  type.getType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  type.getType()!=  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasOneChild()  ||  type.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild()    ||    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	44	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild()    ||    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	44	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(type.hasOneChild()  ||  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.hasOneChild()  ||  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.hasOneChild()  ||  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild()    ||    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	44	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ==  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ==  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasOneChild()  ==  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild()    ||    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	44	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	16	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  type);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	16	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	16	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()!=  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	16	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.toString());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.toString());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null?   "null "  :  type.toString());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.toString());    	non-compiled	[CE]  ';'  expected	63	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.toString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.toString());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null?   "null "  :  type.toString());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.toString());    	non-compiled	[CE]  ';'  expected	63	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  ';'  expected	25	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  type.hasChildren());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasChildren()  ||  type.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  ';'  expected	25	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  n,  scope);	  Preconditions.checkArgument(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null?   "null "  :  type.isUnknownType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null?   "null "  :  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null?   "null "  :  type.isUnknownType());	  Preconditions.checkState(type!=    null?   "null   "    :    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	45	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?  type.isUnknownType()  :  type.isUnknownType());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null?  type.isUnknownType()  :  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null?  type.isUnknownType()  :  type.isUnknownType());	  Preconditions.checkState(type!=    null?   "null   "    :    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	45	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?  null  :  type.isUnknownType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null?  null  :  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null?  null  :  type.isUnknownType());	  Preconditions.checkState(type!=    null?   "null   "    :    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	45	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  n,  scope);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  ObjectType.OBJECT_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  ObjectType.OBJECT_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  ObjectType.OBJECT_TYPE);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  ObjectType.UNKNOWN);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  ObjectType.UNKNOWN);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  ObjectType.UNKNOWN);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.getType()  ==  n);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  null);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  null);	  Preconditions.checkState(type.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	34	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope.getType()  ==  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.getType()  ==  null);	  Preconditions.checkState(type.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	34	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  n,  type);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  type,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(compiler,  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  type,  scope);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  type);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  n,  scope,  type);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
157	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Traversal.traverse(compiler,  n,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Traversal.traverse(compiler,  n,  type);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(registry,  n,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(registry,  n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(registry,  n,  scope);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
159	[BUG]  [BUGGY]  TraverseScope.traverse(compiler,  n,  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  TraverseScope.traverse(compiler,  n,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	TraverseScope.traverse(compiler,  n,  type);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
160	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  n.getFirstChild();	  Node    n    =    type.getFirstChild();    	non-compiled	[CE]  ';'  expected	18	None	replace
161	[BUG]  [BUGGY]  Node  n  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  scope.getFirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  scope.getFirstChild();	  Node    n    =    type.getFirstChild();    	non-compiled	[CE]  ';'  expected	18	None	replace
162	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.toObjectType()  :  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.toObjectType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.toObjectType()  :  null;	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
163	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  null;	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(type.hasLendsName());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.hasLendsName());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.hasLendsName());	  Preconditions.checkState(type.hasOneChild());    	non-compiled	[CE]  ';'  expected	41	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(type.hasOneChild());    	non-compiled	[CE]  ';'  expected	41	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null?   "null "  :  type.hasChildren());	  Preconditions.checkArgument(type    ==    null?   "null   "    :    type.hasChildren());    	non-compiled	[CE]  ';'  expected	72	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.getJSType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.getJSType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?   "null "  :  type.getJSType());	  Preconditions.checkArgument(type    ==    null?   "null   "    :    type.hasChildren());    	non-compiled	[CE]  ';'  expected	72	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null,  type);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope!=  null,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope!=  null,  type);	  Preconditions.checkState(type!=    null,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(scope!=  null);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope!=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope!=  null);	  Preconditions.checkState(type!=    null,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null,  scope  }  );  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null,  scope  }  );  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null,  scope  }  );	  Preconditions.checkState(type!=    null,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	82	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  type);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	82	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	82	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()!=  Token.NAME);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()!=  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	82	None	replace
175	[BUG]  [BUGGY]  JSType  oldValueType  =  n.getRawType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  n.getRawType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  n.getRawType();	  JSType    oldValueType    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	76	None	replace
176	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getOwnerType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getOwnerType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getOwnerType();	  JSType    oldValueType    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	76	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	29	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	29	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	29	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  Token.FUNCTION,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  Token.FUNCTION,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  Token.FUNCTION,  scope);	  Preconditions.checkArgument(type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	29	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()!=  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	29	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.getType()  ==  type);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	80	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  scope);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	80	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  objectType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  objectType);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  objectType);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	80	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.getType()  ==  type);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	80	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  type,  scope);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	80	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()  ==  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.getType()  ==  type);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	80	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.getType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null?   "null "  :  type.getType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null?   "null "  :  type.getType());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.getType());    	non-compiled	[CE]  ';'  expected	77	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.getType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null?   "null "  :  type.getType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null?   "null "  :  type.getType());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.getType());    	non-compiled	[CE]  ';'  expected	77	None	replace
190	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getFirstChild(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getFirstChild(),  scope);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	23	None	replace
191	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getLastChild(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getLastChild(),  scope);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	23	None	replace
192	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  type);  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getLastChild(),  type);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	23	None	replace
193	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getNext(),  scope);  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getNext(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getNext(),  scope);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	23	None	replace
194	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getType(),  scope);  [CE]  ';'  expected  [FE]                                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getType(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getType(),  scope);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	23	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  type,  scope);	  Preconditions.checkState(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	12	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  objectType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  objectType);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  objectType);	  Preconditions.checkState(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	12	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.isUnknownType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.isUnknownType());	  Preconditions.checkState(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	32	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.isUnknownType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.isUnknownType());	  Preconditions.checkState(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	32	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.isUnknownType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.isUnknownType());	  Preconditions.checkState(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	32	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isObjectType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isObjectType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isObjectType());	  Preconditions.checkState(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	32	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isFunctionType());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isFunctionType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isFunctionType());	  Preconditions.checkState(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	32	None	replace
202	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getFirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getFirstChild();	  JSType    oldValueType    =    type.getLastChild();    	non-compiled	[CE]  ';'  expected	75	None	replace
203	[BUG]  [BUGGY]  JSType  oldValueType  =  n.getLastChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  n.getLastChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  n.getLastChild();	  JSType    oldValueType    =    type.getLastChild();    	non-compiled	[CE]  ';'  expected	75	None	replace
204	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getNext();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getNext();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getNext();	  JSType    oldValueType    =    type.getLastChild();    	non-compiled	[CE]  ';'  expected	75	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  type,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope.getType()  ==  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.getType()  ==  type,  scope);	  Preconditions.checkState(scope.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	49	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  type,  hasLendsName);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope.getType()  ==  type,  hasLendsName);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.getType()  ==  type,  hasLendsName);	  Preconditions.checkState(scope.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	49	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()!=  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope.getType()!=  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.getType()!=  type);	  Preconditions.checkState(scope.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	49	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  type,  scope.getType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope.getType()  ==  type,  scope.getType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.getType()  ==  type,  scope.getType());	  Preconditions.checkState(scope.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	49	None	replace
209	[BUG]  [BUGGY]  JSType  oldValueType  =  type.evaluate(scope,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.evaluate(scope,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.evaluate(scope,  scope);	  JSType    oldValueType    =    type.evaluate(scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
210	[BUG]  [BUGGY]  JSType  oldValueType  =  scope.evaluate(type);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  scope.evaluate(type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  scope.evaluate(type);	  JSType    oldValueType    =    type.evaluate(scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
211	[BUG]  [BUGGY]  JSType  oldValueType  =  type.evaluate(scope,  valueType);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.evaluate(scope,  valueType);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.evaluate(scope,  valueType);	  JSType    oldValueType    =    type.evaluate(scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
212	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getNext(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getNext(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getNext(),  scope);	  Scope    scope    =    traverse(type.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
213	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getFirstChild(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getFirstChild(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getFirstChild(),  scope);	  Scope    scope    =    traverse(type.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
214	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  scope,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  scope,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getJSType(),  scope,  scope);	  Scope    scope    =    traverse(type.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.hasChildren(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.hasChildren(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.hasChildren(),  scope);	  Preconditions.checkArgument(type    ==    null    ||    type.hasChildren());    	non-compiled	[CE]  ';'  expected	56	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  ObjectType.OBJECT_TYPE,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  ObjectType.OBJECT_TYPE,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  ObjectType.OBJECT_TYPE,  scope);	  Preconditions.checkArgument(n.getType()    ==    type,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  scope);	  Preconditions.checkArgument(n.getType()    ==    type,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.isUnknownType());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	38	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.isUnknownType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  &&  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	38	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isUnknownType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.isUnknownType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	38	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isObjectType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isObjectType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isObjectType());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	38	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(type.hasChildren()  ||  type.hasChildren());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.hasChildren()  ||  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.hasChildren()  ||  type.hasChildren());	  Preconditions.checkState(type.hasChildren());    	non-compiled	[CE]  ';'  expected	26	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(scope.hasChildren());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(scope.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.hasChildren());	  Preconditions.checkState(type.hasChildren());    	non-compiled	[CE]  ';'  expected	26	None	replace
224	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  scope,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type,  scope,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  scope,  scope);	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
225	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  scope,  n);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type,  scope,  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  scope,  n);	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
226	[BUG]  [BUGGY]  Scope  scope  =  traverse(scope,  type);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(scope,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(scope,  type);	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
227	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  scope,  registry);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type,  scope,  registry);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  scope,  registry);	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
228	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  scope,  true);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type,  scope,  true);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  scope,  true);	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
229	[BUG]  [BUGGY]  Scope  scope  =  traverse(n,  scope);  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n,  scope);	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.hasChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.hasChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.hasChild());	  Preconditions.checkState(type!=    null    &&    type.hasChild());    	non-compiled	[CE]  ';'  expected	61	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.hasChild());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.hasChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.hasChild());	  Preconditions.checkState(type!=    null    &&    type.hasChild());    	non-compiled	[CE]  ';'  expected	61	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.hasChild());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.hasChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.hasChild());	  Preconditions.checkState(type!=    null    &&    type.hasChild());    	non-compiled	[CE]  ';'  expected	61	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  ObjectType.OBJECT_TYPE,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  ObjectType.OBJECT_TYPE,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  ObjectType.OBJECT_TYPE,  scope);	  Preconditions.checkState(n.getType()    ==    type,    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  type,  scope  instanceof  ObjectType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  type,  scope  instanceof  ObjectType);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  type,  scope  instanceof  ObjectType);	  Preconditions.checkState(n.getType()    ==    type,    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	31	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	31	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.getType()!=  Token.FUNCTION);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	31	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null,  scope.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	31	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT,  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT,  type);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	14	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()!=  Token.OBJECTLIT);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	14	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type!=  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type!=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type!=  null);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	14	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()!=  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()!=  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()!=  Token.OBJECTLIT);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	14	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  ObjectType.UNKNOWN);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  ObjectType.UNKNOWN);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  ObjectType.UNKNOWN);	  Preconditions.checkArgument(type    ==    n);    	non-compiled	[CE]  ';'  expected	64	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  ObjectType.UNKNOWN);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  ObjectType.UNKNOWN);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  ObjectType.UNKNOWN);	  Preconditions.checkArgument(type    ==    n);    	non-compiled	[CE]  ';'  expected	64	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(type!=  ObjectType.FUNCTION);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  ObjectType.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  ObjectType.FUNCTION);	  Preconditions.checkState(type    ==    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(type!=  ObjectType.NO_TYPE);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  ObjectType.NO_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  ObjectType.NO_TYPE);	  Preconditions.checkState(type    ==    n);    	non-compiled	[CE]  ';'  expected	48	None	replace
247	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  n.getNext();	  Node    n    =    type.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
248	[BUG]  [BUGGY]  Node  n  =  scope.getNext();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  scope.getNext();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  scope.getNext();	  Node    n    =    type.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
249	[BUG]  [BUGGY]  Node  n  =  type.getChildCount();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  type.getChildCount();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type.getChildCount();	  Node    n    =    type.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getJSType().hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getJSType().hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.getJSType().hasChildren());	  Preconditions.checkArgument(type    ==    null    ||    type.hasChildren());    	non-compiled	[CE]  ';'  expected	56	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  n);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  n);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  n);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.getType()  ==  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.getType()  ==  n);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.NAME);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	16	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getJSType().hasChildren());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getJSType().hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getJSType().hasChildren());	  Preconditions.checkArgument(type    ==    null    &&    type.hasChildren());    	non-compiled	[CE]  ';'  expected	58	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getJSType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getJSType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getJSType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	37	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getJSType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getJSType()!=  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getJSType()!=  Token.FUNCTION);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	37	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null,  type);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null,  type);	  Preconditions.checkArgument(type!=    null,    scope);    	non-compiled	[CE]  ';'  expected	78	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isNoObjectType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isNoObjectType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isNoObjectType());	  Preconditions.checkState(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	32	None	replace
260	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getLastChild()  :  type;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getLastChild()  :  type;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.getLastChild()  :  type;	  JSType    oldValueType    =    type.getLastChild();    	non-compiled	[CE]  ';'  expected	75	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	82	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  Token.NAME);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	82	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	82	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  type);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	80	None	replace
265	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  null  :  type.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  null  :  type.getJSType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  null  :  type.getJSType();	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
266	[BUG]  [BUGGY]  JSType  oldValueType  =  rawValueType.getJSType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  rawValueType.getJSType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  rawValueType.getJSType();	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
267	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getJSType()  :  rawValueType;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getJSType()  :  rawValueType;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.getJSType()  :  rawValueType;	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
268	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.getJSType()  :  rawValueType;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.getJSType()  :  rawValueType;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  scope.getJSType()  :  rawValueType;	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(type!=  type,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  type,  scope);	  Preconditions.checkState(n.getType()!=    type,    scope);    	non-compiled	[CE]  ';'  expected	11	None	replace
270	[BUG]  [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  rawValueType;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  rawValueType;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.isUnknownType()?  scope  :  rawValueType;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
271	[BUG]  [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  valueType  :  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  valueType  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.isUnknownType()?  valueType  :  null;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
272	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getUnknownType()?  scope  :  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getUnknownType()?  scope  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getUnknownType()?  scope  :  null;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
273	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope  :  null;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope  :  null;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
274	[BUG]  [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  NULL;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  NULL;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.isUnknownType()?  scope  :  NULL;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
275	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  null  :  type.getNodeType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  null  :  type.getNodeType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  null  :  type.getNodeType();	  JSType    oldValueType    =    type.getNodeType();    	non-compiled	[CE]  ';'  expected	55	None	replace
276	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  null  :  type.getNodeType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  null  :  type.getNodeType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  null  :  type.getNodeType();	  JSType    oldValueType    =    type.getNodeType();    	non-compiled	[CE]  ';'  expected	55	None	replace
277	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getNodeType()  :  null;  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getNodeType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.getNodeType()  :  null;	  JSType    oldValueType    =    type.getNodeType();    	non-compiled	[CE]  ';'  expected	55	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getJSType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getJSType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getJSType()  ==  Token.OBJECTLIT);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	36	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.EMPTY);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.EMPTY);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.EMPTY);	  Preconditions.checkArgument(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	36	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  null);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.getType()  ==  null);	  Preconditions.checkState(type.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	34	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType().hasChildren());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType().hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getJSType().hasChildren());	  Preconditions.checkState(type!=    null    &&    type.hasChildren());    	non-compiled	[CE]  ';'  expected	28	None	replace
282	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getOwnerScope(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getOwnerScope(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getOwnerScope(),  scope);	  Scope    scope    =    traverse(type.getScope(),    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(type.getJSType()!=  null);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getJSType()!=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getJSType()!=  null);	  Preconditions.checkState(type.getType()!=    null);    	non-compiled	[CE]  ';'  expected	35	None	replace
284	[BUG]  [BUGGY]  Node  n  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  scope.getLastChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  scope.getLastChild();	  Node    n    =    type.getFirstChild();    	non-compiled	[CE]  ';'  expected	18	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(type!=  scope.getType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  scope.getType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  scope.getType());	  Preconditions.checkState(scope.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	49	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  scope.getType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  scope.getType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  scope.getType());	  Preconditions.checkState(scope.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	49	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.isInterface());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.isInterface());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  &&  type.isInterface());	  Preconditions.checkArgument(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	62	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  type);	  Preconditions.checkArgument(n.getType()    ==    type,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  type,  scope);	  Preconditions.checkArgument(n.getType()    ==    type,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  type,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  type,  scope);	  Preconditions.checkArgument(n.getType()!=    type,    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type,  scope);	  Preconditions.checkArgument(n.getType()!=    type,    scope);    	non-compiled	[CE]  ';'  expected	7	None	replace
292	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  scope  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  scope  +  1);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getJSType(),  scope  +  1);	  Scope    scope    =    traverse(type.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  type);	  Preconditions.checkArgument(type!=    n);    	non-compiled	[CE]  ';'  expected	65	None	replace
294	[BUG]  [BUGGY]  Node  value  =  n.getfirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  value  =  n.getfirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  n.getfirstChild();	  Node    value    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
295	[BUG]  [BUGGY]  JSType  oldValueType  =  rawValueType.toString();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  rawValueType.toString();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  rawValueType.toString();	  JSType    oldValueType    =    type.toString();    	non-compiled	[CE]  ';'  expected	74	None	replace
296	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  type.toString();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  type.toString();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  type.toString();	  JSType    oldValueType    =    type.toString();    	non-compiled	[CE]  ';'  expected	74	None	replace
297	[BUG]  [BUGGY]  JSType  oldValueType  =  valueType.toString();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  valueType.toString();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  valueType.toString();	  JSType    oldValueType    =    type.toString();    	non-compiled	[CE]  ';'  expected	74	None	replace
298	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.toObjectType()  :  type.toString();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.toObjectType()  :  type.toString();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  scope.toObjectType()  :  type.toString();	  JSType    oldValueType    =    type.toString();    	non-compiled	[CE]  ';'  expected	74	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.isUnknownType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.isUnknownType());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	39	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.isInterface());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.isInterface());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.isInterface());	  Preconditions.checkState(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	46	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isConstructor());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isConstructor());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isConstructor());	  Preconditions.checkState(type!=    null    &&    type.isInterface());    	non-compiled	[CE]  ';'  expected	46	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null,  type);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null,  type);	  Preconditions.checkState(type!=    null,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
303	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  n.getLastChild());  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type,  n.getLastChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  n.getLastChild());	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	23	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null?  false  :  type.isUnknownType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null?  false  :  type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null?  false  :  type.isUnknownType());	  Preconditions.checkState(type!=    null?   "null   "    :    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	45	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.isObject());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.isObject());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.isObject());	  Preconditions.checkState(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	83	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType().hasChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType().hasChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getJSType().hasChild());	  Preconditions.checkState(type!=    null    &&    type.hasChild());    	non-compiled	[CE]  ';'  expected	61	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(type.hasChildren()  ||  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.hasChildren()  ||  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.hasChildren()  ||  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild()    ||    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	44	None	replace
308	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  null  :  type.toObjectType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  null  :  type.toObjectType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  null  :  type.toObjectType();	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
309	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  null  :  type.toObjectType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  null  :  type.toObjectType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  null  :  type.toObjectType();	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
310	[BUG]  [BUGGY]  JSType  oldValueType  =  rawValueType.toObjectType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  rawValueType.toObjectType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  rawValueType.toObjectType();	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
311	[BUG]  [BUGGY]  JSType  oldValueType  =  objectType.toObjectType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  objectType.toObjectType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  objectType.toObjectType();	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
312	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  rawValueType;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  rawValueType;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.toObjectType()  :  rawValueType;	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
313	[BUG]  [BUGGY]  JSType  oldValueType  =  valueType.toObjectType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  valueType.toObjectType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  valueType.toObjectType();	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType   "null "  :  type.equals(valueType));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType   "null "  :  type.equals(valueType));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  valueType   "null "  :  type.equals(valueType));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.equals(valueType));    	non-compiled	[CE]  	81	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkNotNull(type.hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkNotNull(type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkNotNull(type.hasChildren());	  Preconditions.checkArgument(type.hasChildren());    	non-compiled	[CE]  ';'  expected	24	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.FUNCTION);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	31	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()!=  Token.FUNCTION);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()!=  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getJSType()!=  Token.FUNCTION);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	31	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.equals(scope));  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.equals(scope));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.equals(scope));	  Preconditions.checkNotNull(valueType,    scope);    	non-compiled	[CE]  ';'  expected	67	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.equals(scope));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.equals(scope));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null? "null "  :  type.equals(scope));	  Preconditions.checkNotNull(valueType,    scope);    	non-compiled	[CE]  ';'  expected	67	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.hasOneChild());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.hasOneChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null? "null "  :  type.hasOneChild());	  Preconditions.checkState(type.hasOneChild());    	non-compiled	[CE]  ';'  expected	41	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.NAME);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.NAME,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.NAME,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.NAME,  scope);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  type);	  Preconditions.checkArgument(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  type);	  Preconditions.checkArgument(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
325	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  n);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type,  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  n);	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
326	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  scope,  null);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type,  scope,  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  scope,  null);	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getJSType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	30	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.EMPTY);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.EMPTY);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.EMPTY);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	30	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  ObjectType.UNKNOWN,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  ObjectType.UNKNOWN,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  ObjectType.UNKNOWN,  scope);	  Preconditions.checkState(n.getType()    ==    type,    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  hasLendsName);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  hasLendsName);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  n,  scope,  hasLendsName);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  n,  this,  scope);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  this);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  this);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  n,  scope,  this);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
333	[BUG]  [BUGGY]  JSType  oldValueType  =  type.evaluate(scope,  rawValueType);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.evaluate(scope,  rawValueType);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.evaluate(scope,  rawValueType);	  JSType    oldValueType    =    type.evaluate(scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
334	[BUG]  [BUGGY]  JSType  oldValueType  =  type.evaluate(scope,  value);  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.evaluate(scope,  value);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.evaluate(scope,  value);	  JSType    oldValueType    =    type.evaluate(scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  null);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(n.getType()!=  null);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()!=  null);	  Preconditions.checkArgument(n.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	71	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(TypeUtil.isGetProp(type));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(TypeUtil.isGetProp(type));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(TypeUtil.isGetProp(type));	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkArgument(TypeUtil.isFunctionObjectType(type));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(TypeUtil.isFunctionObjectType(type));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(TypeUtil.isFunctionObjectType(type));	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
338	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isFunctionObjectType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isFunctionObjectType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isFunctionObjectType());	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
339	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  n);	  Preconditions.checkArgument(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.getType()  ==  n);	  Preconditions.checkArgument(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  n);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.getType()  ==  n);	  Preconditions.checkArgument(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null? "null "  :  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null? "null "  :  type.getType()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null? "null "  :  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	29	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  Token.OBJECTLIT);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  Token.OBJECTLIT);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	14	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type  ==  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  scope);	  Preconditions.checkState(n.getType()    ==    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  ||  type.getType()  ==  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.getType()  ==  scope);	  Preconditions.checkState(n.getType()    ==    scope);    	non-compiled	[CE]  ';'  expected	13	None	replace
346	[BUG]  [BUGGY]  JSType  oldValueType  =  rawValueType.getRawType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  rawValueType.getRawType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  rawValueType.getRawType();	  JSType    oldValueType    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	76	None	replace
347	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getRawType()  :  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getRawType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.getRawType()  :  null;	  JSType    oldValueType    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	76	None	replace
348	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.getRawType()  :  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.getRawType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  scope.getRawType()  :  null;	  JSType    oldValueType    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	76	None	replace
349	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getNoType();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getNoType();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getNoType();	  JSType    oldValueType    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	76	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  type,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  type,  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  type,  scope);	  Preconditions.checkArgument(n.getType()    ==    type,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.getType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.getType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.getType());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.getType());    	non-compiled	[CE]  ';'  expected	77	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.getReturnType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.getReturnType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?   "null "  :  type.getReturnType());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.getType());    	non-compiled	[CE]  ';'  expected	77	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.getNativeType(UNKNOWN_TYPE));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.getNativeType(UNKNOWN_TYPE));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ';'  expected	66	None	replace
354	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.evaluate(type):  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.evaluate(type):  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.evaluate(type):  null;	  JSType    oldValueType    =    type.evaluate(scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
355	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.evaluate(type):  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.evaluate(type):  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  scope.evaluate(type):  null;	  JSType    oldValueType    =    type.evaluate(scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
356	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.evaluate(scope):  null;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.evaluate(scope):  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.evaluate(scope):  null;	  JSType    oldValueType    =    type.evaluate(scope);    	non-compiled	[CE]  ';'  expected	54	None	replace
357	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  scope,  n.getJSType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type,  scope,  n.getJSType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  scope,  n.getJSType());	  Scope    scope    =    traverse(type,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
358	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getLastChild()  :  null;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getLastChild()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.getLastChild()  :  null;	  JSType    oldValueType    =    type.getLastChild();    	non-compiled	[CE]  ';'  expected	75	None	replace
359	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  type.getLastChild()  :  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  type.getLastChild()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  type.getLastChild()  :  null;	  JSType    oldValueType    =    type.getLastChild();    	non-compiled	[CE]  ';'  expected	75	None	replace
360	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getPrefix();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getPrefix();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getPrefix();	  JSType    oldValueType    =    type.getLastChild();    	non-compiled	[CE]  ';'  expected	75	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getClass()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getClass()  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getClass()  ==  Token.FUNCTION);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	31	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()!=  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()!=  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()!=  type);	  Preconditions.checkState(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	12	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()!=  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()!=  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()!=  type);	  Preconditions.checkArgument(type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.hasOneChild());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.hasOneChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.hasOneChild());	  Preconditions.checkState(type    ==    null    ||    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	59	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.hasOneChild());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  ||  type.hasOneChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  ||  type.hasOneChild());	  Preconditions.checkState(type    ==    null    ||    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	59	None	replace
366	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getPrototype(),  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type.getPrototype(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getPrototype(),  scope);	  Scope    scope    =    traverse(type.getScope(),    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
367	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getJSType()  :  null;  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  scope.getJSType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  scope.getJSType()  :  null;	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
368	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.getJSType()  :  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope.getJSType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  scope.getJSType()  :  null;	  JSType    oldValueType    =    type.getJSType();    	non-compiled	[CE]  ';'  expected	50	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	16	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null;  type.hasOneChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null;  type.hasOneChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null;  type.hasOneChild());	  Preconditions.checkState(type!=    null    ||    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	43	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isInstanceType());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isInstanceType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isInstanceType());	  Preconditions.checkArgument(type!=    null    &&    type.hasChildren());    	non-compiled	[CE]  ';'  expected	27	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isUnknownType()  ||  type.isInterface());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isUnknownType()  ||  type.isInterface());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isUnknownType()  ||  type.isInterface());	  Preconditions.checkArgument(type!=    null    &&    type.isUnknownType());    	non-compiled	[CE]  ';'  expected	38	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type);	  Preconditions.checkArgument(type!=    n);    	non-compiled	[CE]  ';'  expected	65	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  ObjectType.NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  ObjectType.NOT_OBJECT_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  ObjectType.NOT_OBJECT_TYPE);	  Preconditions.checkArgument(type!=    n);    	non-compiled	[CE]  ';'  expected	65	None	replace
375	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.toObjectType()  :  objectType;  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.toObjectType()  :  objectType;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.toObjectType()  :  objectType;	  JSType    oldValueType    =    type.toObjectType();    	non-compiled	[CE]  ';'  expected	51	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getObject()  ==  type);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getObject()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getObject()  ==  type);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	80	None	replace
377	[BUG]  [BUGGY]  Node  n  =  type!=  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  type!=  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getFirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type!=  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getFirstChild();	  Node    n    =    type.getFirstChild();    	non-compiled	[CE]  ';'  expected	18	None	replace
378	[BUG]  [BUGGY]  Node  n  =  type  ==  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  n  =  type  ==  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getFirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type  ==  null?  scope.getNativeType(UNKNOWN_TYPE):  type.getFirstChild();	  Node    n    =    type.getFirstChild();    	non-compiled	[CE]  ';'  expected	18	None	replace
379	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getNodeType()  :  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getNodeType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.getNodeType()  :  null;	  JSType    oldValueType    =    type.getNodeType();    	non-compiled	[CE]  ';'  expected	55	None	replace
380	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getNodeType()  :  DEFAULT_OBJECT_TYPE;  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getNodeType()  :  DEFAULT_OBJECT_TYPE;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.getNodeType()  :  DEFAULT_OBJECT_TYPE;	  JSType    oldValueType    =    type.getNodeType();    	non-compiled	[CE]  ';'  expected	55	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isNone());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isNone());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isNone());	  Preconditions.checkArgument(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	79	None	replace
382	[BUG]  [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getRawType()  :  null;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type!=  null?  type.getRawType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type!=  null?  type.getRawType()  :  null;	  JSType    oldValueType    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	76	None	replace
383	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getRawType()!=  null?  type.getRawType()  :  null;  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.getRawType()!=  null?  type.getRawType()  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getRawType()!=  null?  type.getRawType()  :  null;	  JSType    oldValueType    =    type.getRawType();    	non-compiled	[CE]  ';'  expected	76	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null? "null "  :  type.getType()  ==  type);	  Preconditions.checkState(n.getType()!=    type,    scope);    	non-compiled	[CE]  ';'  expected	11	None	replace
385	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope,  type);  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope,  type);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getLastChild(),  scope,  type);	  Scope    scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ';'  expected	23	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  ObjectType.FUNCTION);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  ObjectType.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  ObjectType.FUNCTION);	  Preconditions.checkArgument(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  ObjectType.BOOLEAN);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.getType()  ==  ObjectType.BOOLEAN);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  ObjectType.BOOLEAN);	  Preconditions.checkArgument(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
388	[BUG]  [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  getNativeType(UNKNOWN_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.isUnknownType()?  scope  :  getNativeType(UNKNOWN_TYPE);	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
389	[BUG]  [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(UNKNOWN_TYPE);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.isUnknownType()?  scope  :  NodeUtil.getNativeType(UNKNOWN_TYPE);	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
390	[BUG]  [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope  :  null;  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type  ==  null?  scope  :  null;  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type  ==  null?  scope  :  null;	  JSType    oldValueType    =    type.isUnknownType()?    scope    :    null;    	non-compiled	[CE]  ';'  expected	53	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.getRawClass());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.getRawClass());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?   "null "  :  type.getRawClass());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.hasChildren());    	non-compiled	[CE]  ';'  expected	57	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.getQualifiedName());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.getQualifiedName());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?   "null "  :  type.getQualifiedName());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.hasChildren());    	non-compiled	[CE]  ';'  expected	57	None	replace
393	[BUG]  [BUGGY]  JSType  oldValueType  =  type.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  JSType  oldValueType  =  type.restrictByNotNullOrUndefined();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.restrictByNotNullOrUndefined();	  JSType    oldValueType    =    type.toString();    	non-compiled	[CE]  ';'  expected	74	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(type.hasOneChild()  ||  type.hasOneChild());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.hasOneChild()  ||  type.hasOneChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.hasOneChild()  ||  type.hasOneChild());	  Preconditions.checkState(type.hasOneChild());    	non-compiled	[CE]  ';'  expected	41	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkArgument(type.hasOneChild());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.hasOneChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.hasOneChild());	  Preconditions.checkState(type.hasOneChild());    	non-compiled	[CE]  ';'  expected	41	None	replace
396	[BUG]  [BUGGY]  Scope  scope  =  traverse(type  ==  null? "null "  :  type.getJSType(),  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Scope  scope  =  traverse(type  ==  null? "null "  :  type.getJSType(),  scope);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type  ==  null? "null "  :  type.getJSType(),  scope);	  Scope    scope    =    traverse(type.getJSType(),    scope);    	non-compiled	[CE]  ';'  expected	17	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getClass()  ==  Token.NAME);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getClass()  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getClass()  ==  Token.NAME);	  Preconditions.checkState(type!=    null    &&    type.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkArgument(type.isUnknownType());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.isUnknownType());	  Preconditions.checkArgument(type.hasChildren());    	non-compiled	[CE]  ';'  expected	24	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkArgument(type  >=  null  &&  type.hasChildren());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  >=  null  &&  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  >=  null  &&  type.hasChildren());	  Preconditions.checkArgument(type    ==    null    &&    type.hasChildren());    	non-compiled	[CE]  ';'  expected	58	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(TypeUtil.isUnknownType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(TypeUtil.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(TypeUtil.isUnknownType());	  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));    	non-compiled	[CE]  ';'  expected	69	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
402	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  value);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope,  value);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  n,  scope,  value);	  NodeTraversal.traverse(compiler,    n,    scope);    	non-compiled	[CE]  ';'  expected	68	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  type.toString()  :  type.toString());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  type.toString()  :  type.toString());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  type.toString()  :  type.toString());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.toString());    	non-compiled	[CE]  ';'  expected	63	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.toString());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.toString());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.toString());	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.toString());    	non-compiled	[CE]  ';'  expected	63	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType.equals(type):  type.equals(valueType));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType.equals(type):  type.equals(valueType));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  valueType.equals(type):  type.equals(valueType));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.equals(valueType));    	non-compiled	[CE]  ';'  expected	81	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType.isSubtype(type):  type.equals(valueType));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  valueType.isSubtype(type):  type.equals(valueType));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  valueType.isSubtype(type):  type.equals(valueType));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.equals(valueType));    	non-compiled	[CE]  ';'  expected	81	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.equals(objectType));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?   "null "  :  type.equals(objectType));  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?   "null "  :  type.equals(objectType));	  Preconditions.checkArgument(type!=    null?   "null   "    :    type.equals(valueType));    	non-compiled	[CE]  ';'  expected	81	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type  ==  Token.NAME);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type  ==  Token.NAME);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	14	None	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT  ||  type  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	14	None	replace
410	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.hasChild());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.hasChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.hasChild());	  Preconditions.checkState(type!=    null    &&    type.hasChild());    	non-compiled	[CE]  ';'  expected	61	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(type!=  ObjectType.UNDEFINED);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  ObjectType.UNDEFINED);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  ObjectType.UNDEFINED);	  Preconditions.checkState(type!=    n);    	non-compiled	[CE]  ';'  expected	47	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.hasChildren());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null?  type.isUnknownType()  :  type.hasChildren());	  Preconditions.checkArgument(type    ==    null?   "null   "    :    type.hasChildren());    	non-compiled	[CE]  ';'  expected	72	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||!type.isUnknownType());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||!type.isUnknownType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||!type.isUnknownType());	  Preconditions.checkArgument(type    ==    null);    	non-compiled	[CE]  ';'  expected	15	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isInstanceType());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.isInstanceType());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.isInstanceType());	  Preconditions.checkArgument(type    ==    null);    	non-compiled	[CE]  ';'  expected	15	None	replace
415	[BUG]  [BUGGY]  Node  value  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Node  value  =  n.removeFirstChild();  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  n.removeFirstChild();	  Node    value    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	73	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  type  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  type  ==  Token.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  type  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	82	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.hasOneChild());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.hasOneChild());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.hasOneChild());	  Preconditions.checkState(type    ==    null    &&    type.hasOneChild());    	non-compiled	[CE]  ';'  expected	60	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  ObjectType.BOOLEAN);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  ObjectType.BOOLEAN);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  ObjectType.BOOLEAN);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  ObjectType.FUNCTION);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type.getType()  ==  ObjectType.FUNCTION);  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  ObjectType.FUNCTION);	  Preconditions.checkState(type.getType()    ==    n);    	non-compiled	[CE]  ';'  expected	9	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isNone());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();      [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isNone());  [BUGGY]        for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isNone());	  Preconditions.checkState(type!=    null    &&    type.isObject());    	non-compiled	[CE]  ';'  expected	83	None	replace
