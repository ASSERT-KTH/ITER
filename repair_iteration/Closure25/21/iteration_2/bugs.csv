bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null,  scope);	  Preconditions.checkNotNull(type,    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkNotNull(n,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkNotNull(n,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkNotNull(n,  scope);	  Preconditions.checkNotNull(type,    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  n);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type.getType()  ==  n);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  n);	  Preconditions.checkArgument(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  type,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  type,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  type,  scope);	  Preconditions.checkArgument(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type.getType()  ==  type);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  type);	  Preconditions.checkArgument(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(n.getType()!=  type);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()!=  type);	  Preconditions.checkArgument(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(n.getType()!=  type,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()!=  type,  scope);	  Preconditions.checkArgument(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  type,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.getType()  ==  type,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  type,  scope);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  n);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type.getType()  ==  n);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  n);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  type);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.getType()!=  type);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()!=  type);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  type,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.getType()!=  type,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()!=  type,  scope);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type.getType()  ==  type);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  type);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.getType()  ==  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  scope);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type  ==  null);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
17	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Scope  scope  =  traverse(type.getJSType(),  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getJSType(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
18	[BUG]  [BUGGY]  Node  n  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Node  n  =  type.getFirstChild();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
19	[BUG]  [BUGGY]  Scope  scope  =  traverse(type,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Scope  scope  =  traverse(type,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type,  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
20	[BUG]  [BUGGY]  Scope  scope  =  traverse(type.getScope(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Scope  scope  =  traverse(type.getScope(),  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(type.getScope(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
21	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  type);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Scope  scope  =  traverse(n.getJSType(),  type);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getJSType(),  type);	      	non-compiled	[CE]  ';'  expected	7	None	replace
22	[BUG]  [BUGGY]  Node  n  =  type.getNext();  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Node  n  =  type.getNext();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  n  =  type.getNext();	      	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Scope  scope  =  traverse(n.getLastChild(),  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Scope  scope  =  traverse(n.getLastChild(),  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(type.hasChildren());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(type.hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.hasChildren());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasChildren());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkArgument(type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.OBJECTLIT);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  ';'  expected	4	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  ';'  expected	4	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isUnknownType());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isUnknownType());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isUnknownType());	  Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.getType()!=  null);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()!=  null);	  Preconditions.checkState(n.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()  ==  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type.getType()  ==  null);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()  ==  null);	  Preconditions.checkState(n.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(type.getType()!=  null);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type.getType()!=  null);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.getType()!=  null);	  Preconditions.checkState(n.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.OBJECTLIT);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.OBJECTLIT);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.OBJECTLIT);	  Preconditions.checkArgument(type!=    null);    	non-compiled	[CE]  ';'  expected	2	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(type!=    null);    	non-compiled	[CE]  ';'  expected	2	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isUnknownType());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isUnknownType());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isUnknownType());	  Preconditions.checkArgument(type!=    null);    	non-compiled	[CE]  ';'  expected	2	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.isUnknownType());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.isUnknownType());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.isUnknownType());	  Preconditions.checkArgument(type!=    null);    	non-compiled	[CE]  ';'  expected	2	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  Token.NAME);	  Preconditions.checkState(type!=    null);    	non-compiled	[CE]  ';'  expected	1	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(type.hasOneChild());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type.hasOneChild());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasOneChild());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasOneChild());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  ||  type.hasOneChild());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  ||  type.hasOneChild());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  ||  type.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  type.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  type.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasOneChild()  ||  type.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.isUnknownType());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null? "null "  :  type.isUnknownType());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null? "null "  :  type.isUnknownType());	  Preconditions.checkNotNull(valueType);    	non-compiled	[CE]  ';'  expected	10	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isInterface());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isInterface());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isInterface());	  Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  ';'  expected	4	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(type!=  n);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  n);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  n);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  n);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type  ==  n);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  n);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(scope.getType()  ==  type);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(scope.getType()  ==  type);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(scope.getType()  ==  type);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
50	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  JSType  oldValueType  =  type.getJSType();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getJSType();	      	non-compiled	[CE]  ';'  expected	7	None	replace
51	[BUG]  [BUGGY]  JSType  oldValueType  =  type.toObjectType();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  JSType  oldValueType  =  type.toObjectType();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.toObjectType();	      	non-compiled	[CE]  ';'  expected	7	None	replace
52	[BUG]  [BUGGY]  Node  value  =  n.getLastChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Node  value  =  n.getLastChild();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  n.getLastChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
53	[BUG]  [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  null;  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  JSType  oldValueType  =  type.isUnknownType()?  scope  :  null;  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.isUnknownType()?  scope  :  null;	      	non-compiled	[CE]  ';'  expected	7	None	replace
54	[BUG]  [BUGGY]  JSType  oldValueType  =  type.evaluate(scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  JSType  oldValueType  =  type.evaluate(scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.evaluate(scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
55	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getNodeType();  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  JSType  oldValueType  =  type.getNodeType();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getNodeType();	      	non-compiled	[CE]  ';'  expected	7	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.hasChildren());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type  ==  null  ||  type.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  ||  type.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.hasChildren());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.hasChildren());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type  ==  null  &&  type.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null  &&  type.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.hasOneChild());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type  ==  null  ||  type.hasOneChild());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  ||  type.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.hasOneChild());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type  ==  null  &&  type.hasOneChild());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null  &&  type.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasChild());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.hasChild());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.hasChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  ';'  expected	11	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isInterface());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isInterface());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isInterface());	  Preconditions.checkArgument(type!=    null);    	non-compiled	[CE]  ';'  expected	2	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.toString());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.toString());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.toString());	  Preconditions.checkArgument(type!=    null);    	non-compiled	[CE]  ';'  expected	2	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  n);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type  ==  n);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  n);	  Preconditions.checkArgument(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  n);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  n);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  n);	  Preconditions.checkArgument(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getNativeType(UNKNOWN_TYPE));  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.getNativeType(UNKNOWN_TYPE));	  Preconditions.checkNotNull(valueType);    	non-compiled	[CE]  ';'  expected	10	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkNotNull(valueType,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkNotNull(valueType,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkNotNull(valueType,  scope);	  Preconditions.checkNotNull(type,    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	NodeTraversal.traverse(compiler,  n,  scope);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(TypeUtil.isFunctionObjectType(type));  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(TypeUtil.isFunctionObjectType(type));	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(valueType  ==  null);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(valueType  ==  null);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(valueType  ==  null);	  Preconditions.checkState(type    ==    null);    	non-compiled	[CE]  ';'  expected	4	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  null);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  null);	  Preconditions.checkState(n.getType()    ==    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkArgument(type  ==  null? "null "  :  type.hasChildren());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type  ==  null? "null "  :  type.hasChildren());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type  ==  null? "null "  :  type.hasChildren());	  Preconditions.checkArgument(n.hasChildren());    	non-compiled	[CE]  ';'  expected	12	None	replace
73	[BUG]  [BUGGY]  Node  value  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Node  value  =  n.getFirstChild();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Node  value  =  n.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
74	[BUG]  [BUGGY]  JSType  oldValueType  =  type.toString();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  JSType  oldValueType  =  type.toString();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.toString();	      	non-compiled	[CE]  ';'  expected	7	None	replace
75	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getLastChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  JSType  oldValueType  =  type.getLastChild();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getLastChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
76	[BUG]  [BUGGY]  JSType  oldValueType  =  type.getRawType();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  JSType  oldValueType  =  type.getRawType();  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	JSType  oldValueType  =  type.getRawType();	      	non-compiled	[CE]  ';'  expected	7	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.getType());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.getType());	  Preconditions.checkArgument(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	5	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null,  scope);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null,  scope);	  Preconditions.checkArgument(type!=    null);    	non-compiled	[CE]  ';'  expected	2	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isObject());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null  &&  type.isObject());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null  &&  type.isObject());	  Preconditions.checkArgument(type!=    null);    	non-compiled	[CE]  ';'  expected	2	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  type);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.getType()  ==  type);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.getType()  ==  type);	  Preconditions.checkState(n.getType()    ==    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.equals(valueType));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(type!=  null? "null "  :  type.equals(valueType));  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null? "null "  :  type.equals(valueType));	  Preconditions.checkNotNull(valueType);    	non-compiled	[CE]  ';'  expected	10	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkNotNull(n);    	non-compiled	[CE]  ';'  expected	9	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isObject());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();    [BUGGY]  Preconditions.checkState(type!=  null  &&  type.isObject());  [BUGGY]      for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null  &&  type.isObject());	  Preconditions.checkState(type!=    null);    	non-compiled	[CE]  ';'  expected	1	None	replace
