bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(type!=  null);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkState(type!=  null);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type!=  null);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkArgument(type!=  null);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkArgument(type!=  null);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(type!=  null);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  type);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkState(n.getType()  ==  type);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  type);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(type  ==  null);  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkState(type  ==  null);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(type  ==  null);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  type);  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  type);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.getType()  ==  type);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  null);  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkState(n.getType()  ==  null);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.getType()  ==  null);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
7	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]    [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	  	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkNotNull(type,  scope);  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkNotNull(type,  scope);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkNotNull(type,  scope);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkNotNull(n);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkNotNull(valueType);  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkNotNull(valueType);  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkNotNull(valueType);	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkState(n.hasOneChild());	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseObjectLiteral(Node  n,  FlowScope  scope)  {  JSType  type  =  n.getJSType();  [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [BUGGY]    for  (Node  name  =  n.getFirstChild();  name  !=  null;  name  =  name.getNext())  {  scope  =  traverse(name.getFirstChild(),  scope);  }        [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseObjectLiteral  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  JSType  oldType  rawValueType  type  valueType  Var  var  Node  n  name  value  BooleanLiteralSet  booleanValues  toBooleanOutcomes  String  memberName  qKeyName  qObjName  ObjectType  objectType  AbstractCompiler  compiler  JSTypeRegistry  registry  boolean  hasLendsName  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	650	650	1	replace	Preconditions.checkArgument(n.hasChildren());	Preconditions.checkNotNull(type);  	non-compiled	[CE]  ';'  expected	41	None	replace
