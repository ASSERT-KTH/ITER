bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]  if(constructorType!=  null  &&  constructorType.isUnknownType())  {  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	if(constructorType!=  null  &&  constructorType.isUnknownType())  {	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
2	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]      ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isUnknownType())  {  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	if(constructorType  ==  null  &&  constructorType.isUnknownType())  {	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
3	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]        ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]  if(constructorType!=  null  ||  constructorType.isUnknownType())  {  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	if(constructorType!=  null  ||  constructorType.isUnknownType())  {	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
4	[BUG]  [BUGGY]  if(constructorType.isUnknownType()  ||  constructorType.isFunctionType())  {  [CE]  ';'  expected  [FE]          ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]  if(constructorType.isUnknownType()  ||  constructorType.isFunctionType())  {  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	if(constructorType.isUnknownType()  ||  constructorType.isFunctionType())  {	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
5	[BUG]  [BUGGY]  if(constructorType.isUnknownType()  ||  constructorType.isSubtype(UNKNOWN_TYPE))  {  [CE]  ';'  expected  [FE]            ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]  if(constructorType.isUnknownType()  ||  constructorType.isSubtype(UNKNOWN_TYPE))  {  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	if(constructorType.isUnknownType()  ||  constructorType.isSubtype(UNKNOWN_TYPE))  {	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
6	[BUG]  [BUGGY]  if(constructorType.isUnknownType()  ||  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]  if(constructorType.isUnknownType()  ||  constructorType.isUnknownType())  {  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	if(constructorType.isUnknownType()  ||  constructorType.isUnknownType())  {	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
7	[BUG]  [BUGGY]    [CE]  ';'  expected  [FE]                ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]    [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	  	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
8	[BUG]  [BUGGY]  if(constructorType  ==  null  ||  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]  if(constructorType  ==  null  ||  constructorType.isUnknownType())  {  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	if(constructorType  ==  null  ||  constructorType.isUnknownType())  {	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
9	[BUG]  [BUGGY]  if(constructorType.isUnknownType()  ||  constructorType.isInterface())  {  [CE]  ';'  expected  [FE]    ComparisonFailure  [CONTEXT]  private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]  if(constructorType.isUnknownType()  ||  constructorType.isInterface())  {  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1043	1043	1	replace	if(constructorType.isUnknownType()  ||  constructorType.isInterface())  {	if  (constructorType.isUnknownType())  {  	non-compiled	[CE]  ';'  expected	19	None	replace
