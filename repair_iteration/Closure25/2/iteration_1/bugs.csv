bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope));  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope));	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
2	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree());  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree());  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.cloneTree());	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNEW(n,  scope);  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope);	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNegative(n,  scope);  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope);	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
5	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNext(n,  scope);  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope);	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
6	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope());  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope());	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  [FE]                ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]    [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	  	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
8	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope  -  1);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNew(n,  scope  -  1);  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope  -  1);	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
9	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()));  [CE]  cannot  find  symbol  [FE]      ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()));  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()));	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
10	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure  [CONTEXT]  case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()));  [BUGGY]  break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()));	scope  =  traverseNew(n,  scope);  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
