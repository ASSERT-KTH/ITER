bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
2	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()),  scope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType()));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getParent()));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getParent()));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getParent()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
5	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
6	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.cloneTree());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n,  scope.cloneTree());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.cloneTree());	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
7	[BUG]  [BUGGY]  scope  =  traverseNEW(n.getFirstChild(),  scope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n.getFirstChild(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n.getFirstChild(),  scope);	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
8	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getType());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n,  scope.getType());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getType());	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
9	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getParent());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n,  scope.getParent());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getParent());	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
10	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  scope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegate(n,  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n,  scope);	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
11	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  scope);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  scope);	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
12	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  scope));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  scope));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  scope));	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
13	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(syntacticScope));	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
14	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  this);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  this);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  this);	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getType()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getType()));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
16	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  castType);	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
17	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.cloneTree());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNext(n,  scope.cloneTree());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.cloneTree());	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
18	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getType());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNext(n,  scope.getType());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getType());	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
19	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getParent());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNext(n,  scope.getParent());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getParent());	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope);	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().scope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().scope);	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
22	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()).scope;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()).scope;  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope()).scope;	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
23	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(0));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(0));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(0));	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
24	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
25	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()),  scope);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
26	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
27	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild()));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild()));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild()));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
28	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope);  [CE]  ')'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()));    	non-compiled	[CE]  ')'  expected	9	None	replace
29	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  scope);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.cloneTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
30	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.cloneTree());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  n.cloneTree());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.cloneTree());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
31	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getParent());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getParent());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getParent());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
32	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getScope());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getScope());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getScope());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
33	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getFunctionScope());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getFunctionScope());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getFunctionScope());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
34	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getTree());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getTree());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getTree());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
35	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.cloneTree());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n,  scope.cloneTree());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.cloneTree());	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
36	[BUG]  [BUGGY]  scope  =  traverseNegative(n.getFirstChild(),  scope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n.getFirstChild(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n.getFirstChild(),  scope);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
37	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getParent());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n,  scope.getParent());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getParent());	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
38	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n,  scope.getType());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getType());	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEgative(n,  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
40	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n,  scope.scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.scope);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
41	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverse(n.getLastChild(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n.getLastChild(),  scope);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
42	[BUG]  [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n.getFirstChild(),  scope);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
43	[BUG]  [BUGGY]  scope  =  traverseNEW(n.getLastChild(),  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n.getLastChild(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n.getLastChild(),  scope);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getFirstChild());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getFirstChild());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getFirstChild());	  scope    =    traverseNew(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
45	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getLastChild());	  scope    =    traverseNew(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
46	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getType());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getType());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getType());	  scope    =    traverseNew(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
47	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild()  -  1);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild()  -  1);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getLastChild()  -  1);	  scope    =    traverseNew(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
48	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(scope));	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
49	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  null);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n,  null);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  null);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
50	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope  -  1);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n,  scope  -  1);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope  -  1);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
51	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope  +  1);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope  +  1);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope  +  1);	  scope    =    traverseNew(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
52	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(1));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(1));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(1));	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
53	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(3));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(3));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(3));	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
54	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getLastChild());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n,  scope.getLastChild());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getLastChild());	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
55	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  -  1);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n,  scope  -  1);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  -  1);	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
56	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFFF);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFFF);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  0xFFFF);	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
57	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(scope));	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
58	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getLastChild());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNext(n,  scope.getLastChild());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getLastChild());	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
59	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEw(n,  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
60	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  functionScope);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  functionScope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  functionScope);	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
61	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(functionScope));	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
62	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
63	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLastChild()));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLastChild()));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
64	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  scope.cloneTree());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope,  scope.cloneTree());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  scope.cloneTree());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
65	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()  +  1));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()  +  1));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()  +  1));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
66	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()).createChildFlowScope();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()).createChildFlowScope();  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope()).createChildFlowScope();	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
67	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE));	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
68	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE));	  scope    =    traverseNew(n,    new    FlowScope());    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
69	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(global));  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(global));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(global));	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
70	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry));  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(registry));	  scope    =    traverseNew(n,    new    FlowScope(scope));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
71	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope);  [CE]  ')'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()));    	non-compiled	[CE]  ')'  expected	10	None	replace
72	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE);	  scope    =    traverseNEW(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
73	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getChildCount());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n,  scope.getChildCount());  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getChildCount());	  scope    =    traverseNew(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
74	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  NEW);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNegative(n,  NEW);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  NEW);	  scope    =    traverseNegative(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
75	[BUG]  [BUGGY]  scope  =  traverseNew(n);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNew(n);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
76	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	n  =  n.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
77	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n,  scope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:    [BUGGY]  scope  =  traverseNeighbor(n,  scope);  [BUGGY]    break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n,  scope);	  scope    =    traverseNext(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
