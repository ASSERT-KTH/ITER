bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getType()  -  1);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getType()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getType()  -  1);	  scope    =    traverseNegative(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
2	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getFirstChild());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getFirstChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getFirstChild());	  scope    =    traverseNegative(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getParent()  -  1);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getParent()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getParent()  -  1);	  scope    =    traverseNegative(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseNew(registry,  new  FlowScope(n));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(registry,  new  FlowScope(n));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(registry,  new  FlowScope(n));	  scope    =    traverseNew(n,    new    FlowScope(registry));    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
5	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry,  scope));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry,  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(registry,  scope));	  scope    =    traverseNew(n,    new    FlowScope(registry));    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
6	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  registry);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  registry);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  registry);	  scope    =    traverseNew(n,    new    FlowScope(registry));    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
7	[BUG]  [BUGGY]  scope  =  traverseNew(scope,  new  FlowScope(n));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(scope,  new  FlowScope(n));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(scope,  new  FlowScope(n));	  scope    =    traverseNew(n,    new    FlowScope(registry));    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
8	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getParent()));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getParent()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getParent()));	  scope    =    traverseNew(n,    new    FlowScope(registry));    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
9	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getParent(),  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getParent(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getParent(),  scope);	  scope    =    traverseNext(n,    scope.getParent());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
10	[BUG]  [BUGGY]  scope  =  traverseNext(n,  n.getParent());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  n.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  n.getParent());	  scope    =    traverseNext(n,    scope.getParent());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
11	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getFirstChild());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getFirstChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getFirstChild());	  scope    =    traverseNext(n,    scope.getParent());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
12	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getParent(),  null);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getParent(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getParent(),  null);	  scope    =    traverseNext(n,    scope.getParent());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
13	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.getLastChild(),  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n,  scope.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n,  scope.getLastChild(),  scope);	  scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
14	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.getLastChild());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n,  scope.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n,  scope.getLastChild());	  scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
15	[BUG]  [BUGGY]  scope  =  traverse(n,  n.getLastChild(),  scope);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n,  n.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n,  n.getLastChild(),  scope);	  scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
16	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  scope;  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n.getLastChild(),  scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n.getLastChild(),  scope;	  scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  ')'  expected	41	None	replace
17	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree()  +  1);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree()  +  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.cloneTree()  +  1);	  scope    =    traverseNew(n,    scope    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
18	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope  +  2);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope  +  2);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope  +  2);	  scope    =    traverseNew(n,    scope    +    1);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
19	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n,  scope.cloneTree());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNeighbor(n,  scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n,  scope.cloneTree());	  scope    =    traverseNeighbor(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n.getFirstChild(),  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNeighbor(n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n.getFirstChild(),  scope);	  scope    =    traverseNeighbor(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseNEighbor(n,  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEighbor(n,  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEighbor(n,  scope);	  scope    =    traverseNeighbor(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
22	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n,  scope.getParent());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNeighbor(n,  scope.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n,  scope.getParent());	  scope    =    traverseNeighbor(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
23	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n,  scope.getType());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNeighbor(n,  scope.getType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n,  scope.getType());	  scope    =    traverseNeighbor(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
24	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n,  NEW);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNeighbor(n,  NEW);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n,  NEW);	  scope    =    traverseNeighbor(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
25	[BUG]  [BUGGY]  scope  =  traverseNew(n.getLastChild(),  new  FlowScope(n.getLastChild()),  scope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getLastChild(),  new  FlowScope(n.getLastChild()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getLastChild(),  new  FlowScope(n.getLastChild()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()),    scope);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
26	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1),  scope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()),    scope);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
27	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getFirstChild());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getFirstChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getFirstChild());	  scope    =    traverseNEW(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
28	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  +  1);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  +  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  +  1);	  scope    =    traverseNEW(n,    scope    -    1);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
29	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.cloneTree(),  scope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.cloneTree(),  scope);	  scope    =    traverseNext(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
30	[BUG]  [BUGGY]  scope  =  traverseNext(n,  n.cloneTree());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  n.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  n.cloneTree());	  scope    =    traverseNext(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
31	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getScope());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getScope());	  scope    =    traverseNext(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
32	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getTree());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getTree());	  scope    =    traverseNext(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
33	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getFunctionScope());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getFunctionScope());	  scope    =    traverseNext(n,    scope.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
34	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getType(),  scope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getType(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getType(),  scope);	  scope    =    traverseNew(n,    scope.getType());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
35	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getType(),  castType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getType(),  castType);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getType(),  castType);	  scope    =    traverseNew(n,    scope.getType());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
36	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getScopeType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getScopeType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getScopeType());	  scope    =    traverseNew(n,    scope.getType());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
37	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getType(),  registry);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getType(),  registry);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getType(),  registry);	  scope    =    traverseNew(n,    scope.getType());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
38	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope.cloneTree());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope.cloneTree());	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseNEw(n.getFirstChild(),  scope);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n.getFirstChild(),  scope);	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
40	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope.getType());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope.getType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope.getType());	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
41	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope.getParent());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope.getParent());	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
42	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope.getScope());  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope.getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope.getScope());	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
43	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.cloneTree(),  scope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.cloneTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  scope.cloneTree(),  scope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  scope.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getFirstChild(),  scope.cloneTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
45	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.copyCurrentScope(),  scope);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.copyCurrentScope(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.copyCurrentScope(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
46	[BUG]  [BUGGY]  scope  =  traverseNew(n.cloneTree(),  scope);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.cloneTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
47	[BUG]  [BUGGY]  scope  =  traverseNew(n,  type.cloneTree(),  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  type.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  type.cloneTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
48	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  this);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.cloneTree(),  this);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
49	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()).scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()).scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope()).scope);	  scope    =    traverseNew(n,    new    FlowScope().scope);    	non-compiled	[CE]  ';'  expected	21	None	replace
50	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope();  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope();	  scope    =    traverseNew(n,    new    FlowScope().scope);    	non-compiled	[CE]  ')'  expected	21	None	replace
51	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getNext(),  scope);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getNext(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getNext(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope);    	non-compiled	[CE]  ')'  expected	28	None	replace
52	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope),  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
53	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getType(),  scope);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getType(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getType(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope);    	non-compiled	[CE]  ')'  expected	28	None	replace
54	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getChildCount(),  scope);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getChildCount(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getChildCount(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope);    	non-compiled	[CE]  ')'  expected	28	None	replace
55	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  scope.getType()));  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  scope.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  scope.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
56	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getType(),  scope));  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getType(),  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getType(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
57	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getType(),  castType));  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getType(),  castType));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getType(),  castType));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
58	[BUG]  [BUGGY]  scope  =  traverseNew(scope,  new  FlowScope(n.getType()));  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(scope,  new  FlowScope(n.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(scope,  new  FlowScope(n.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
59	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  registry.getType()));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  registry.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  registry.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
60	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getType()),  scope);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getType()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getType()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
61	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getFunctionScope(),  syntacticScope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getFunctionScope(),  syntacticScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getFunctionScope(),  syntacticScope);	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
62	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getFunctionScope(),  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getFunctionScope(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getFunctionScope(),  scope);	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
63	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getFunctionScope());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getFunctionScope());	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
64	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getSyntacticScope());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getSyntacticScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getSyntacticScope());	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
65	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getFunctionScope(),  operationScope);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getFunctionScope(),  operationScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getFunctionScope(),  operationScope);	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
66	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getFirstChild(),  scope);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getFirstChild(),  scope);	  scope    =    traverseNew(n,    scope.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
67	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getFirstChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getFirstChild());	  scope    =    traverseNew(n,    scope.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
68	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getFirstChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getFirstChild());	  scope    =    traverseNew(n,    scope.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
69	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getFirstChild(),  null);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getFirstChild(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getFirstChild(),  null);	  scope    =    traverseNew(n,    scope.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
70	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope,  scope));  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope,  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(functionScope,  scope));	  scope    =    traverseNew(n,    new    FlowScope(functionScope));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
71	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope),  scope);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(functionScope),  scope);	  scope    =    traverseNew(n,    new    FlowScope(functionScope));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
72	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scriptScope));  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scriptScope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scriptScope));	  scope    =    traverseNew(n,    new    FlowScope(functionScope));    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
73	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(global,  scope));  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(global,  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(global,  scope));	  scope    =    traverseNew(n,    new    FlowScope(global));    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
74	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(global),  scope);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(global),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(global),  scope);	  scope    =    traverseNew(n,    new    FlowScope(global));    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
75	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(compiler));  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(compiler));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(compiler));	  scope    =    traverseNew(n,    new    FlowScope(global));    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
76	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  scope);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  scope);	  scope    =    traverseNew(n,    new    FlowScope(scope),    castType);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
77	[BUG]  [BUGGY]  scope  =  traverseNew(scope,  new  FlowScope(n),  castType);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(scope,  new  FlowScope(n),  castType);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(scope,  new  FlowScope(n),  castType);	  scope    =    traverseNew(n,    new    FlowScope(scope),    castType);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
78	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  true);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  true);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  true);	  scope    =    traverseNew(n,    new    FlowScope(scope),    castType);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
79	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  false);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  false);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  false);	  scope    =    traverseNew(n,    new    FlowScope(scope),    castType);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
80	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  type);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  type);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  type);	  scope    =    traverseNew(n,    new    FlowScope(scope),    castType);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
81	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  type);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  type);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  type);	  scope    =    traverseNew(n,    new    FlowScope(scope),    castType);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
82	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getType(),  scope);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getType(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getType(),  scope);	  scope    =    traverseNegative(n,    scope.getType());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
83	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getScopeType());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getScopeType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getScopeType());	  scope    =    traverseNegative(n,    scope.getType());    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
84	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getType(),  castType);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getType(),  castType);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getType(),  castType);	  scope    =    traverseNegative(n,    scope.getType());    	non-compiled	[CE]  ')'  expected	38	None	replace
85	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getJSType());  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getJSType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getJSType());	  scope    =    traverseNegative(n,    scope.getType());    	non-compiled	[CE]  ')'  expected	38	None	replace
86	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getThreshold());  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getThreshold());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getThreshold());	  scope    =    traverseNegative(n,    scope.getType());    	non-compiled	[CE]  ')'  expected	38	None	replace
87	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getType()));  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getType()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getType()));    	non-compiled	[CE]  ')'  expected	3	None	replace
88	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getType()));  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getType()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getType()));    	non-compiled	[CE]  ')'  expected	3	None	replace
89	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType()),  scope);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getType()));    	non-compiled	[CE]  ')'  expected	3	None	replace
90	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType(),  castType));  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType(),  castType));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getType(),  castType));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getType()));    	non-compiled	[CE]  ')'  expected	3	None	replace
91	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getReturnType()));  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getReturnType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getReturnType()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getType()));    	non-compiled	[CE]  ')'  expected	3	None	replace
92	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope).createChildFlowScope();  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope).createChildFlowScope();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope).createChildFlowScope();	  scope    =    traverseNew(n,    new    FlowScope()).createChildFlowScope();    	non-compiled	[CE]  ')'  expected	66	None	replace
93	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope).createChildFlowScope();  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope).createChildFlowScope();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope).createChildFlowScope();	  scope    =    traverseNew(n,    new    FlowScope()).createChildFlowScope();    	non-compiled	[CE]  ')'  expected	66	None	replace
94	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.createChildFlowScope());  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.createChildFlowScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope.createChildFlowScope());	  scope    =    traverseNew(n,    new    FlowScope()).createChildFlowScope();    	non-compiled	[CE]  ')'  expected	66	None	replace
95	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.createChildFlowScope();  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.createChildFlowScope();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope.createChildFlowScope();	  scope    =    traverseNew(n,    new    FlowScope()).createChildFlowScope();    	non-compiled	[CE]  ')'  expected	66	None	replace
96	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().cloneTree()).createChildFlowScope();  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().cloneTree()).createChildFlowScope();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().cloneTree()).createChildFlowScope();	  scope    =    traverseNew(n,    new    FlowScope()).createChildFlowScope();    	non-compiled	[CE]  ')'  expected	66	None	replace
97	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope),  createChildFlowScope();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope),  createChildFlowScope();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope),  createChildFlowScope();	  scope    =    traverseNew(n,    new    FlowScope()).createChildFlowScope();    	non-compiled	[CE]  ';'  expected	66	None	replace
98	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()),  n);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()),  n);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()),  n);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()),    scope);    	non-compiled	[CE]  ')'  expected	25	None	replace
99	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(n.getFirstChild()),  scope);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(n.getFirstChild()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(n.getFirstChild()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()),    scope);    	non-compiled	[CE]  ')'  expected	25	None	replace
100	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.cloneTree(),  scope);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.cloneTree(),  scope);	  scope    =    traverseNEW(n,    scope.cloneTree());    	non-compiled	[CE]  ')'  expected	6	None	replace
101	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  n.cloneTree());  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  n.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  n.cloneTree());	  scope    =    traverseNEW(n,    scope.cloneTree());    	non-compiled	[CE]  ')'  expected	6	None	replace
102	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getScope());  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getScope());	  scope    =    traverseNEW(n,    scope.cloneTree());    	non-compiled	[CE]  ')'  expected	6	None	replace
103	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getTree());  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getTree());	  scope    =    traverseNEW(n,    scope.cloneTree());    	non-compiled	[CE]  ')'  expected	6	None	replace
104	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getFunctionScope());  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getFunctionScope());	  scope    =    traverseNEW(n,    scope.cloneTree());    	non-compiled	[CE]  ')'  expected	6	None	replace
105	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  this,  scope);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  this,  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  this,  scope);	  scope    =    traverseNew(n,    new    FlowScope(scope),    this);    	non-compiled	[CE]  ')'  expected	14	None	replace
106	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  scope,  this);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  scope,  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  scope,  this);	  scope    =    traverseNew(n,    new    FlowScope(scope),    this);    	non-compiled	[CE]  ')'  expected	14	None	replace
107	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  status);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  status);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  status);	  scope    =    traverseNew(n,    new    FlowScope(scope),    this);    	non-compiled	[CE]  ')'  expected	14	None	replace
108	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  false);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  false);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  false);	  scope    =    traverseNew(n,    new    FlowScope(scope),    this);    	non-compiled	[CE]  ')'  expected	14	None	replace
109	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE),  scope);  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE),  scope);	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	68	None	replace
110	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.getNativeType(UNKNOWN_TYPE));  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope.getNativeType(UNKNOWN_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	68	None	replace
111	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(NOT_OBJECT_TYPE));  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(NOT_OBJECT_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(NOT_OBJECT_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	68	None	replace
112	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(TEMPLATE_TYPE_NOT_OBJECT_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	68	None	replace
113	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE,  castType));  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE,  castType));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(UNKNOWN_TYPE,  castType));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	68	None	replace
114	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(CONSTRUCTOR_TYPE));  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(CONSTRUCTOR_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(CONSTRUCTOR_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  ')'  expected	68	None	replace
115	[BUG]  [BUGGY]  scope  =  traverseNegative(n.getFirstChild(),  NEW);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n.getFirstChild(),  NEW);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n.getFirstChild(),  NEW);	  scope    =    traverseNegative(n,    NEW);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
116	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  false);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  false);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  false);	  scope    =    traverseNegative(n,    NEW);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
117	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  registry.cloneTree());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  registry.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  registry.cloneTree());	  scope    =    traverseNew(n,    scope,    scope.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
118	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  n.cloneTree());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  n.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  n.cloneTree());	  scope    =    traverseNew(n,    scope,    scope.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
119	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  registry.scope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  registry.scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  registry.scope.cloneTree());	  scope    =    traverseNew(n,    scope,    scope.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
120	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  map.scope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  map.scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  map.scope.cloneTree());	  scope    =    traverseNew(n,    scope,    scope.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
121	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  map.cloneTree());  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  map.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  map.cloneTree());	  scope    =    traverseNew(n,    scope,    scope.cloneTree());    	non-compiled	[CE]  not  a  statement	64	None	replace
122	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getLastChild()  +  1));  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getLastChild()  +  1));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getLastChild()  +  1));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()    +    1));    	non-compiled	[CE]  not  a  statement	5	None	replace
123	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getFirstChild()  +  1));  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getFirstChild()  +  1));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getFirstChild()  +  1));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()    +    1));    	non-compiled	[CE]  not  a  statement	5	None	replace
124	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1);  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild()  +  1);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()    +    1));    	non-compiled	[CE]  ')'  expected	5	None	replace
125	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_LITERAL_UNDEFINED_THIS);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_LITERAL_UNDEFINED_THIS);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  FUNCTION_LITERAL_UNDEFINED_THIS);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  not  a  statement	72	None	replace
126	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_NOT_OBJECT_TYPE);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  not  a  statement	72	None	replace
127	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE_NOT_OBJECT_TYPE);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE_NOT_OBJECT_TYPE);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  not  a  statement	72	None	replace
128	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_OF_THIS);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_OF_THIS);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_OF_THIS);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  not  a  statement	72	None	replace
129	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_OF_THIS_EXPECTED);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_OF_THIS_EXPECTED);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  TEMPLATE_TYPE_OF_THIS_EXPECTED);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  not  a  statement	72	None	replace
130	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  scope);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope));    	non-compiled	[CE]  not  a  statement	1	None	replace
131	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n));  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope));    	non-compiled	[CE]  not  a  statement	1	None	replace
132	[BUG]  [BUGGY]  scope  =  traverseNew(n.getLastChild(),  new  FlowScope(n.getLastChild(),  scope));  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getLastChild(),  new  FlowScope(n.getLastChild(),  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getLastChild(),  new  FlowScope(n.getLastChild(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope));    	non-compiled	[CE]  not  a  statement	1	None	replace
133	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope).scope);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope).scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope).scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope));    	non-compiled	[CE]  not  a  statement	1	None	replace
134	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  scope));  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(scope.getFirstChild()));    	non-compiled	[CE]  not  a  statement	26	None	replace
135	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()),  scope);  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(scope.getFirstChild()));    	non-compiled	[CE]  not  a  statement	26	None	replace
136	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  n.getFirstChild()));  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  n.getFirstChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  n.getFirstChild()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getFirstChild()));    	non-compiled	[CE]  not  a  statement	26	None	replace
137	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry.getFirstChild()));  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry.getFirstChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(registry.getFirstChild()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getFirstChild()));    	non-compiled	[CE]  not  a  statement	26	None	replace
138	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  syntacticScope);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  syntacticScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  syntacticScope);	  scope    =    traverseNew(n,    new    FlowScope(scope),    functionScope);    	non-compiled	[CE]  not  a  statement	60	None	replace
139	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  functionScope,  scope);  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  functionScope,  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  functionScope,  scope);	  scope    =    traverseNew(n,    new    FlowScope(scope),    functionScope);    	non-compiled	[CE]  not  a  statement	60	None	replace
140	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  operationScope);  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  operationScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  operationScope);	  scope    =    traverseNew(n,    new    FlowScope(scope),    functionScope);    	non-compiled	[CE]  not  a  statement	60	None	replace
141	[BUG]  [BUGGY]  scope  =  traverseNEgative(n.getFirstChild(),  scope);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n.getFirstChild(),  scope);	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  not  a  statement	39	None	replace
142	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope.cloneTree());  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope.cloneTree());	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  not  a  statement	39	None	replace
143	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope.getParent());  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope.getParent());	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  not  a  statement	39	None	replace
144	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope.getType());  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope.getType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope.getType());	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  not  a  statement	39	None	replace
145	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope.getScope());  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope.getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope.getScope());	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  not  a  statement	39	None	replace
146	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getFirstChild().cloneTree());  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getFirstChild().cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getFirstChild().cloneTree());	  scope    =    traverseNew(n,    n.cloneTree());    	non-compiled	[CE]  not  a  statement	30	None	replace
147	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getLastChild().cloneTree());  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getLastChild().cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getLastChild().cloneTree());	  scope    =    traverseNew(n,    n.cloneTree());    	non-compiled	[CE]  not  a  statement	30	None	replace
148	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getLastChild());  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getLastChild());	  scope    =    traverseNew(n,    n.cloneTree());    	non-compiled	[CE]  not  a  statement	30	None	replace
149	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getType());  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getType());	  scope    =    traverseNew(n,    n.cloneTree());    	non-compiled	[CE]  not  a  statement	30	None	replace
150	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  n  =  n.getLastChild();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	n  =  n.getLastChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	76	None	replace
151	[BUG]  [BUGGY]  n  =  scope.getFirstChild();  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  n  =  scope.getFirstChild();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	n  =  scope.getFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	76	None	replace
152	[BUG]  [BUGGY]  scope  =  traverse(n.getFirstChild());  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n.getFirstChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n.getFirstChild());	  n    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	76	None	replace
153	[BUG]  [BUGGY]  nce  n  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  nce  n  =  n.getFirstChild();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	nce  n  =  n.getFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	76	None	replace
154	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	Node  n  =  n.getFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	76	None	replace
155	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  script);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  script);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  script);	  scope    =    traverseNew(n,    new    FlowScope(scope),    scope);    	non-compiled	[CE]  not  a  statement	11	None	replace
156	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(2));  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(2));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(2));	  scope    =    traverseNew(n,    new    FlowScope(3));    	non-compiled	[CE]  not  a  statement	53	None	replace
157	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(3),  scope);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(3),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(3),  scope);	  scope    =    traverseNew(n,    new    FlowScope(3));    	non-compiled	[CE]  not  a  statement	53	None	replace
158	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(4));  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(4));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(4));	  scope    =    traverseNew(n,    new    FlowScope(3));    	non-compiled	[CE]  not  a  statement	53	None	replace
159	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  scope.cloneTree());  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegate(n,  scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n,  scope.cloneTree());	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  not  a  statement	10	None	replace
160	[BUG]  [BUGGY]  scope  =  traverseNEgate(n,  scope);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgate(n,  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgate(n,  scope);	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  not  a  statement	10	None	replace
161	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  new  FlowScope(scope));  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegate(n,  new  FlowScope(scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n,  new  FlowScope(scope));	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  not  a  statement	10	None	replace
162	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  scope.getType());  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegate(n,  scope.getType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n,  scope.getType());	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  not  a  statement	10	None	replace
163	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  scope.getParent());  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegate(n,  scope.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n,  scope.getParent());	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  not  a  statement	10	None	replace
164	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getParent(),  scope);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getParent(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getParent(),  scope);	  scope    =    traverseNEW(n,    scope.getParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
165	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getNext());  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getNext());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getNext());	  scope    =    traverseNEW(n,    scope.getParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
166	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  n.getParent());  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  n.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  n.getParent());	  scope    =    traverseNEW(n,    scope.getParent());    	non-compiled	[CE]  not  a  statement	9	None	replace
167	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getParent(),  scope);  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getParent(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getParent(),  scope);	  scope    =    traverseNegative(n,    scope.getParent());    	non-compiled	[CE]  not  a  statement	37	None	replace
168	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getNext());  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getNext());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getNext());	  scope    =    traverseNegative(n,    scope.getParent());    	non-compiled	[CE]  not  a  statement	37	None	replace
169	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getLastChild());  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getLastChild());	  scope    =    traverseNegative(n,    scope.getParent());    	non-compiled	[CE]  not  a  statement	37	None	replace
170	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  n.getParent());  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  n.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  n.getParent());	  scope    =    traverseNegative(n,    scope.getParent());    	non-compiled	[CE]  not  a  statement	37	None	replace
171	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.cloneTree(),  scope);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.cloneTree(),  scope);	  scope    =    traverseNegative(n,    scope.cloneTree());    	non-compiled	[CE]  not  a  statement	35	None	replace
172	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getFunctionScope());  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getFunctionScope());	  scope    =    traverseNegative(n,    scope.cloneTree());    	non-compiled	[CE]  not  a  statement	35	None	replace
173	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getTree());  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getTree());	  scope    =    traverseNegative(n,    scope.cloneTree());    	non-compiled	[CE]  not  a  statement	35	None	replace
174	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  n.cloneTree());  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  n.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  n.cloneTree());	  scope    =    traverseNegative(n,    scope.cloneTree());    	non-compiled	[CE]  not  a  statement	35	None	replace
175	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getScope());  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getScope());	  scope    =    traverseNegative(n,    scope.cloneTree());    	non-compiled	[CE]  not  a  statement	35	None	replace
176	[BUG]  [BUGGY]  scope  =  traverseNext(n,  n.getLastChild());  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  n.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  n.getLastChild());	  scope    =    traverseNext(n,    scope.getLastChild());    	non-compiled	[CE]  not  a  statement	58	None	replace
177	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getLastChild(),  scope);  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getLastChild(),  scope);	  scope    =    traverseNext(n,    scope.getLastChild());    	non-compiled	[CE]  not  a  statement	58	None	replace
178	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getLastChild(),  null);  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getLastChild(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getLastChild(),  null);	  scope    =    traverseNext(n,    scope.getLastChild());    	non-compiled	[CE]  not  a  statement	58	None	replace
179	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getLastChild(),  this);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getLastChild(),  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getLastChild(),  this);	  scope    =    traverseNext(n,    scope.getLastChild());    	non-compiled	[CE]  not  a  statement	58	None	replace
180	[BUG]  [BUGGY]  scope  =  traverseNext(n.getLastChild());  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n.getLastChild());	  scope    =    traverseNext(n,    scope.getLastChild());    	non-compiled	[CE]  not  a  statement	58	None	replace
181	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scopeScope);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scopeScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scopeScope);	  scope    =    traverseNegative(n,    scope.scope);    	non-compiled	[CE]  not  a  statement	40	None	replace
182	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scopeFunctionScope.scope);  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scopeFunctionScope.scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scopeFunctionScope.scope);	  scope    =    traverseNegative(n,    scope.scope);    	non-compiled	[CE]  not  a  statement	40	None	replace
183	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scopeFactory.scope);  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scopeFactory.scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scopeFactory.scope);	  scope    =    traverseNegative(n,    scope.scope);    	non-compiled	[CE]  not  a  statement	40	None	replace
184	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope,  scope));  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope,  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(syntacticScope,  scope));	  scope    =    traverseNew(n,    new    FlowScope(syntacticScope));    	non-compiled	[CE]  not  a  statement	13	None	replace
185	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope),  scope);  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(syntacticScope),  scope);	  scope    =    traverseNew(n,    new    FlowScope(syntacticScope));    	non-compiled	[CE]  not  a  statement	13	None	replace
186	[BUG]  [BUGGY]  scope  =  traverseNew(syntacticScope,  new  FlowScope(scope));  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(syntacticScope,  new  FlowScope(scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(syntacticScope,  new  FlowScope(scope));	  scope    =    traverseNew(n,    new    FlowScope(syntacticScope));    	non-compiled	[CE]  not  a  statement	13	None	replace
187	[BUG]  [BUGGY]  scope  =  traverseNew(scope,  new  FlowScope(syntacticScope));  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(scope,  new  FlowScope(syntacticScope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(scope,  new  FlowScope(syntacticScope));	  scope    =    traverseNew(n,    new    FlowScope(syntacticScope));    	non-compiled	[CE]  not  a  statement	13	None	replace
188	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(0),  scope);  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(0),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(0),  scope);	  scope    =    traverseNew(n,    new    FlowScope(0));    	non-compiled	[CE]  not  a  statement	23	None	replace
189	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  n.getNext()));  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  n.getNext()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  n.getNext()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  not  a  statement	4	None	replace
190	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getNext()));  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getNext()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getNext()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  not  a  statement	4	None	replace
191	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getParent()));  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getParent()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getParent()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  not  a  statement	4	None	replace
192	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getParent()));  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getParent()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getParent()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  not  a  statement	4	None	replace
193	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  n.getParent()));  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  n.getParent()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  n.getParent()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  not  a  statement	4	None	replace
194	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getNext()));  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getNext()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  n.getNext()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  not  a  statement	4	None	replace
195	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(n.getFirstChild(),  scope);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n,  new  FlowScope(n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n,  new  FlowScope(n.getFirstChild(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope);    	non-compiled	[CE]  ')'  expected	71	None	replace
196	[BUG]  [BUGGY]  Scope  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  Scope  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	Scope  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope);    	non-compiled	[CE]  ')'  expected	71	None	replace
197	[BUG]  [BUGGY]  scope  =  traverseNegative(n.getFirstChild(),  null);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n.getFirstChild(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n.getFirstChild(),  null);	  scope    =    traverseNegative(n,    null);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
198	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  null,  scope);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  null,  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  null,  scope);	  scope    =    traverseNegative(n,    null);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
199	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  typeFunctionScope);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  typeFunctionScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  typeFunctionScope);	  scope    =    traverseNegative(n,    null);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
200	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope;  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope;	  scope    =    traverseNegative(n,    null);    	non-compiled	[CE]  ')'  expected	49	None	replace
201	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getTree(),  scope);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getTree(),  scope);	  scope    =    traverseNew(n,    scope.getTree());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
202	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getTree());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getTree());	  scope    =    traverseNew(n,    scope.getTree());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
203	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getTree(),  null);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getTree(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getTree(),  null);	  scope    =    traverseNew(n,    scope.getTree());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
204	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  functionScope));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  functionScope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  functionScope));	  scope    =    traverseNew(n,    new    FlowScope(scope,    scope));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
205	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  castType));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  castType));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  castType));	  scope    =    traverseNew(n,    new    FlowScope(scope,    scope));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
206	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  scope),  scope);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  scope),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  scope),  scope);	  scope    =    traverseNew(n,    new    FlowScope(scope,    scope));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
207	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  script));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  script));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  script));	  scope    =    traverseNew(n,    new    FlowScope(scope,    scope));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
208	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  status));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  status));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  status));	  scope    =    traverseNew(n,    new    FlowScope(scope,    scope));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
209	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  +  0xFFFF);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  +  0xFFFF);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  +  0xFFFF);	  scope    =    traverseNEW(n,    scope    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
210	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  1xFFFF);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  1xFFFF);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  1xFFFF);	  scope    =    traverseNEW(n,    scope    &    0xFFFF);    	non-compiled	[CE]  ')'  expected	56	None	replace
211	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFFFL);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFFFL);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  0xFFFFL);	  scope    =    traverseNEW(n,    scope    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
212	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFFFF);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFFFF);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  0xFFFFF);	  scope    =    traverseNEW(n,    scope    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
213	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE),  scope);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE),  scope);	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
214	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE,  castType));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE,  castType));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NEW_TYPE,  castType));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
215	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.getNativeType(JSTypeNative.NEW_TYPE));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.getNativeType(JSTypeNative.NEW_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope.getNativeType(JSTypeNative.NEW_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
216	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getNativeType(JSTypeNative.NEW_TYPE));  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getNativeType(JSTypeNative.NEW_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getNativeType(JSTypeNative.NEW_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
217	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NOT_OBJECT_TYPE));  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NOT_OBJECT_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NOT_OBJECT_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
218	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  JSTypeNative().getNativeType(JSTypeNative.NEW_TYPE));  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  JSTypeNative().getNativeType(JSTypeNative.NEW_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  JSTypeNative().getNativeType(JSTypeNative.NEW_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
219	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  scope);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getLastChild(),  scope);	  scope    =    traverseNew(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
220	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getLastChild(),  null);	  scope    =    traverseNew(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
221	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  this);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getLastChild(),  this);	  scope    =    traverseNew(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
222	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  true);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  true);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getLastChild(),  true);	  scope    =    traverseNew(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
223	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getParent(),  scope);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getParent(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getParent(),  scope);	  scope    =    traverseNew(n,    scope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
224	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getNext());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getNext());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getNext());	  scope    =    traverseNew(n,    scope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
225	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getParent());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getParent());	  scope    =    traverseNew(n,    scope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
226	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getScope(),  scope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getScope(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getScope(),  scope);	  scope    =    traverseNew(n,    scope.getScope());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
227	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getScope());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getScope());	  scope    =    traverseNew(n,    scope.getScope());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
228	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getScope(),  syntacticScope);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getScope(),  syntacticScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getScope(),  syntacticScope);	  scope    =    traverseNew(n,    scope.getScope());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
229	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getScope(),  null);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getScope(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getScope(),  null);	  scope    =    traverseNew(n,    scope.getScope());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
230	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getScope(),  true);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getScope(),  true);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getScope(),  true);	  scope    =    traverseNew(n,    scope.getScope());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
231	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getFirstChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getFirstChild(),  scope);	  scope    =    traverseNEW(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
232	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  n.getFirstChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  n.getFirstChild(),  scope);	  scope    =    traverseNEW(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
233	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getLastChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getLastChild(),  scope);	  scope    =    traverseNEW(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
234	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  new  FlowScope()).scope;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  new  FlowScope()).scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getFirstChild(),  new  FlowScope()).scope;	  scope    =    traverseNew(n,    new    FlowScope()).scope;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
235	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()),  scope;  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()),  scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope()),  scope;	  scope    =    traverseNew(n,    new    FlowScope()).scope;    	non-compiled	[CE]  ';'  expected	22	None	replace
236	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope),  scope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(scope),  scope);	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
237	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope,  scope));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope,  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(scope,  scope));	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
238	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(syntacticScope));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(syntacticScope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(syntacticScope));	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
239	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope.getType()));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(scope.getType()));	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
240	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope),  this);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope),  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(scope),  this);	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
241	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope),  castType);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope),  castType);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(scope),  castType);	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
242	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getFirstChild(),  scope);	  scope    =    traverseNew(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
243	[BUG]  [BUGGY]  scope  =  traverseNew(n.getLastChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getLastChild(),  scope);	  scope    =    traverseNew(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
244	[BUG]  [BUGGY]  scope  =  traverseNew(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getLastChild());	  scope    =    traverseNew(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
245	[BUG]  [BUGGY]  scope  =  traverseNew(n.getNext(),  scope);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getNext(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getNext(),  scope);	  scope    =    traverseNew(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
246	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  n.getLastChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  n.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  n.getLastChild(),  scope);	  scope    =    traverseNEW(n.getLastChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
247	[BUG]  [BUGGY]  scope  =  traverseNegative(n.getLastChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n.getLastChild(),  scope);	  scope    =    traverseNEW(n.getLastChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
248	[BUG]  [BUGGY]  scope  =  traverseNegate(n.getLastChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegate(n.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n.getLastChild(),  scope);	  scope    =    traverseNEW(n.getLastChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
249	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()),  scope);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
250	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  scope));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
251	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(registry.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
252	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n,  scope.getFirstChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n,  scope.getFirstChild());	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
253	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.getFirstChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n,  scope.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n,  scope.getFirstChild(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
254	[BUG]  [BUGGY]  scope  =  traverse(scope.getFirstChild(),  n);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(scope.getFirstChild(),  n);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(scope.getFirstChild(),  n);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
255	[BUG]  [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope;  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n.getFirstChild(),  scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n.getFirstChild(),  scope;	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  ')'  expected	42	None	replace
256	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(1),  scope);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(1),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(1),  scope);	  scope    =    traverseNew(n,    new    FlowScope(1));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
257	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getFirstChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getFirstChild(),  scope);	  scope    =    traverseNegative(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
258	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  n.getFirstChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  n.getFirstChild(),  scope);	  scope    =    traverseNegative(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
259	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getFirstChild(),  null);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getFirstChild(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getFirstChild(),  null);	  scope    =    traverseNegative(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
260	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  n));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  n));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  n));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
261	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope),  syntacticScope);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope),  syntacticScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope),  syntacticScope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
262	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getFirstChild(),  scope));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getFirstChild(),  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getFirstChild(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
263	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  n.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  n.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  n.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
264	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  n.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  n.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  n.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
265	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLastChild()),  scope);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLastChild()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLastChild()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
266	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getFirstChild()  +  1));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getFirstChild()  +  1));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getFirstChild()  +  1));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
267	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getLastChild()  +  1));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getLastChild()  +  1));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getLastChild()  +  1));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
268	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()).scope);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()).scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild()).scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
269	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild()),  scope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
270	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getNext()));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getNext()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getNext()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
271	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getType()));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getType()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
272	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLeastChild()));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLeastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getLeastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
273	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  n.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  n.getLastChild());	  scope    =    traverseNEW(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
274	[BUG]  [BUGGY]  scope  =  traverseNEW(n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n.getLastChild());	  scope    =    traverseNEW(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
275	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getLastChild(),  null);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getLastChild(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getLastChild(),  null);	  scope    =    traverseNEW(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
276	[BUG]  [BUGGY]  scope  =  traverseNEW(n.getFirstChild(),  scope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n.getFirstChild(),  scope.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n.getFirstChild(),  scope.getLastChild());	  scope    =    traverseNEW(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
277	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  scope);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(scope),  scope);	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
278	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope,  scope));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope,  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(scope,  scope));	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
279	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(syntacticScope));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(syntacticScope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(syntacticScope));	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
280	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  castType);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  castType);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(scope),  castType);	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
281	[BUG]  [BUGGY]  scope  =  traverseNegative(scope,  new  FlowScope(n));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(scope,  new  FlowScope(n));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(scope,  new  FlowScope(n));	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
282	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope.getType()));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(scope.getType()));	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
283	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getType(),  scope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getType(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getType(),  scope);	  scope    =    traverseNEW(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
284	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getScopeType());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getScopeType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getScopeType());	  scope    =    traverseNEW(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
285	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getType(),  castType);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getType(),  castType);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getType(),  castType);	  scope    =    traverseNEW(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
286	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getChildCount());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getChildCount());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getChildCount());	  scope    =    traverseNEW(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
287	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getChildCount()  -  1);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getChildCount()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getChildCount()  -  1);	  scope    =    traverseNew(n,    scope.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
288	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getChildCount());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getChildCount());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getChildCount());	  scope    =    traverseNew(n,    scope.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
289	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getChildCount()  -  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getChildCount()  -  2);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getChildCount()  -  2);	  scope    =    traverseNew(n,    scope.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
290	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  scope.getChildCount());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  scope.getChildCount());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getFirstChild(),  scope.getChildCount());	  scope    =    traverseNew(n,    scope.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
291	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getChildCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getChildCount()  +  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getChildCount()  +  1);	  scope    =    traverseNew(n,    scope.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
292	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getType(),  scope);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getType(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getType(),  scope);	  scope    =    traverseNext(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
293	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getType(),  castType);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getType(),  castType);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getType(),  castType);	  scope    =    traverseNext(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
294	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getScopeType());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getScopeType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getScopeType());	  scope    =    traverseNext(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
295	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getChildCount());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getChildCount());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getChildCount());	  scope    =    traverseNext(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
296	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getLastChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getLastChild()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getLastChild()  -  1);	  scope    =    traverseNew(n,    scope.getLastChild()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
297	[BUG]  [BUGGY]  scope  =  traverseNew(n.getLastChild(),  scope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getLastChild(),  scope.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getLastChild(),  scope.getLastChild());	  scope    =    traverseNew(n,    scope.getLastChild()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
298	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getFirstChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getFirstChild()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getFirstChild()  -  1);	  scope    =    traverseNew(n,    scope.getLastChild()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
299	[BUG]  [BUGGY]  scope  =  traverseNew(n.getLastChild(),  scope.getLastChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getLastChild(),  scope.getLastChild()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getLastChild(),  scope.getLastChild()  -  1);	  scope    =    traverseNew(n,    scope.getLastChild()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
300	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(),  scope);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
301	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope.cloneTree());	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
302	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope,  syntacticScope);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope,  syntacticScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope,  syntacticScope);	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
303	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.scope);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope.scope);	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
304	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.getParent());  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope.getParent());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope.getParent());	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
305	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope));  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
306	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  syntacticScope);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  syntacticScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(scope),  syntacticScope);	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
307	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  functionScope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  functionScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(scope),  functionScope);	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
308	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope  +  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope  +  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope  +  1);	  scope    =    traverseNegative(n,    scope    -    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
309	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope  -  1);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope  -  1);	  scope    =    traverseNegative(n,    scope    -    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
310	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild(),  scope));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild(),  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getFirstChild(),  scope));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope));    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
311	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getParent(),  null);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getParent(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getParent(),  null);	  scope    =    traverseNegative(n,    scope.getParent());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
312	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getJSType());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getJSType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getJSType());	  scope    =    traverseNew(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
313	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  -  2);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  -  2);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  -  2);	  scope    =    traverseNEW(n,    scope    -    1);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
314	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n,  scope  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNeighbor(n,  scope  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n,  scope  -  1);	  scope    =    traverseNeighbor(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
315	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n,  null);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNeighbor(n,  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n,  null);	  scope    =    traverseNeighbor(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
316	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope  <  Node>());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope  <  Node>());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope  <  Node>());	  scope    =    traverseNegative(n,    NEW);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
317	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope());	  scope    =    traverseNegative(n,    NEW);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
318	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  type);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  type);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  type);	  scope    =    traverseNegative(n,    NEW);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
319	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
320	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  this.scope.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  this.scope.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  this.scope.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
321	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(this,  syntacticScope));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(this,  syntacticScope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(this,  syntacticScope));	  scope    =    traverseNew(n,    new    FlowScope(syntacticScope));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
322	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getFirstChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getFirstChild()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
323	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getChildCount()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  scope.getChildCount()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  scope.getChildCount()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getFirstChild()));    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
324	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  n.cloneTree()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  n.cloneTree()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  n.cloneTree()));	  scope    =    traverseNew(n,    n.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
325	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.cloneTree()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.cloneTree()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.cloneTree()));	  scope    =    traverseNew(n,    n.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
326	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  null);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  null);	  scope    =    traverseNew(n,    new    FlowScope(scope),    castType);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
327	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFF);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFF);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  0xFFF);	  scope    =    traverseNEW(n,    scope    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
328	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  -  0xFFFF);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  -  0xFFFF);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  -  0xFFFF);	  scope    =    traverseNEW(n,    scope    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
329	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope  +  1));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope  +  1));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope  +  1));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
330	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  null);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  null);	  scope    =    traverseNew(n,    new    FlowScope(scope),    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
331	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  registry.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  registry.getNativeType(UNKNOWN_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  registry.getNativeType(UNKNOWN_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
332	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  functionScope.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  functionScope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  functionScope.getNativeType(UNKNOWN_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
333	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope),  syntacticScope);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope),  syntacticScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(functionScope),  syntacticScope);	  scope    =    traverseNew(n,    new    FlowScope(functionScope));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
334	[BUG]  [BUGGY]  scope  =  traverseNext(n,  typeFunctionScope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  typeFunctionScope.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  typeFunctionScope.getLastChild());	  scope    =    traverseNext(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
335	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  syntacticScope);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  syntacticScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  syntacticScope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
336	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  this));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  this));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  this));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
337	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.cloneTree(),  scope);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.cloneTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  ')'  expected	29	None	replace
338	[BUG]  [BUGGY]  scope  =  traverseNew(n,  typeFunctionScope.cloneTree(),  scope);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  typeFunctionScope.cloneTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  typeFunctionScope.cloneTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
339	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  null);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.cloneTree(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.cloneTree(),  null);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
340	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  type);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getLastChild(),  type);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getLastChild(),  type);	  scope    =    traverseNew(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
341	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  typeFunctionScope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  typeFunctionScope.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  typeFunctionScope.getLastChild());	  scope    =    traverseNEW(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
342	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getFirstChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getFirstChild()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
343	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getParent()),  scope);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getParent()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getParent()),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
344	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope.getJSType());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope.getJSType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope.getJSType());	  scope    =    traverseNext(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
345	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.get1));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.get1));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.get1));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
346	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  null  &&  scope.getType()  ==  Token.NEW);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  null  &&  scope.getType()  ==  Token.NEW);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  null  &&  scope.getType()  ==  Token.NEW);	  scope    =    traverseNegative(n,    null);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
347	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  n);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  n);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getFirstChild(),  n);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope);    	non-compiled	[CE]  ')'  expected	28	None	replace
348	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(false));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(false));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(false));	  scope    =    traverseNew(n,    new    FlowScope(0));    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
349	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  type);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n.getLastChild(),  type);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n.getLastChild(),  type);	  scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
350	[BUG]  [BUGGY]  scope  =  traverse(n.getLastChild(),  this);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n.getLastChild(),  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n.getLastChild(),  this);	  scope    =    traverse(n.getLastChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
351	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  typeFunctionScope.scope);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  typeFunctionScope.scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  typeFunctionScope.scope);	  scope    =    traverseNegative(n,    scope.scope);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
352	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scopeFunctionsMap.scope);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scopeFunctionsMap.scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scopeFunctionsMap.scope);	  scope    =    traverseNegative(n,    scope.scope);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
353	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope),  functionScope);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(functionScope),  functionScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(functionScope),  functionScope);	  scope    =    traverseNew(n,    new    FlowScope(scope),    functionScope);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
354	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope),  functionScope);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope),  functionScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(syntacticScope),  functionScope);	  scope    =    traverseNew(n,    new    FlowScope(scope),    functionScope);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
355	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  null);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegate(n,  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n,  null);	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
356	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  NEW);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegate(n,  NEW);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n,  NEW);	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
357	[BUG]  [BUGGY]  scope  =  traverseNegate(n,  new  FlowScope());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegate(n,  new  FlowScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegate(n,  new  FlowScope());	  scope    =    traverseNegate(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
358	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(this,  scope));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(this,  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(this,  scope));	  scope    =    traverseNew(n,    new    FlowScope(global));    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
359	[BUG]  [BUGGY]  scope  =  traverseNew(n,  type.getLastChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  type.getLastChild()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  type.getLastChild()  -  1);	  scope    =    traverseNew(n,    scope.getLastChild()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
360	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_OF_THIS);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_OF_THIS);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_OF_THIS);	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
361	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_NOT_NEW);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_NOT_NEW);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_NOT_NEW);	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
362	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_OF_NEW);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_OF_NEW);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope  &  TEMPLATE_TYPE_OF_NEW);	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
363	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope  -  1);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope  -  1);	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
364	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(8));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(8));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(8));	  scope    =    traverseNew(n,    new    FlowScope(3));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
365	[BUG]  [BUGGY]  scope  =  traverseNEW(n.getLastChild(),  type);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n.getLastChild(),  type);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n.getLastChild(),  type);	  scope    =    traverseNEW(n.getLastChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
366	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_NOT_NEW);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_NOT_NEW);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_NOT_NEW);	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
367	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_OF_THIS);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_OF_THIS);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_OF_THIS);	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
368	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_OF_NEW);  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_OF_NEW);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope  &  TEMPLATE_TYPE_OF_NEW);	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
369	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()),  n);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()),  n);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getLastChild()),  n);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()),    scope);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
370	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope),  functionScope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope),  functionScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(scope),  functionScope);	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
371	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(functionScope));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(functionScope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(functionScope));	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
372	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
373	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_LITERAL);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_LITERAL);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  FUNCTION_LITERAL);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
374	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_NOT_OBJECT_TYPE);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_NOT_OBJECT_TYPE);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  FUNCTION_NOT_OBJECT_TYPE);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
375	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE_OF_THIS);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE_OF_THIS);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  FUNCTION_TYPE_OF_THIS);	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
376	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  typeFunctionScope);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  typeFunctionScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  typeFunctionScope);	  scope    =    traverseNew(n,    new    FlowScope().scope);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
377	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  null);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  null);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  null);	  scope    =    traverseNew(n,    new    FlowScope().scope);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
378	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  this.scope);  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  this.scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  this.scope);	  scope    =    traverseNew(n,    new    FlowScope().scope);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
379	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  registry.getNativeType(JSTypeNative.NEW_TYPE));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  registry.getNativeType(JSTypeNative.NEW_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  registry.getNativeType(JSTypeNative.NEW_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
380	[BUG]  [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(n.getLastChild(),  scope);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(n.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n.getFirstChild(),  new  FlowScope(n.getLastChild(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope);    	non-compiled	[CE]  ')'  expected	71	None	replace
381	[BUG]  [BUGGY]  scope  =  traversenew(n,  new  FlowScope(n.getFirstChild(),  scope);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traversenew(n,  new  FlowScope(n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traversenew(n,  new  FlowScope(n.getFirstChild(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope);    	non-compiled	[CE]  ')'  expected	71	None	replace
382	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope  +  3);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope  +  3);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope  +  3);	  scope    =    traverseNew(n,    scope    +    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
383	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(cloneTree(n,  scope));  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(cloneTree(n,  scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(cloneTree(n,  scope));	  scope    =    traverseNew(n,    new    FlowScope(registry));    	non-compiled	[CE]  ')'  expected	70	None	replace
384	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  taskScope.cloneTree());  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  taskScope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  taskScope.cloneTree());	  scope    =    traverseNew(n,    scope,    scope.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
385	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  output));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  output));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  output));	  scope    =    traverseNew(n,    new    FlowScope(scope,    scope));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
386	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  this));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  this));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  this));	  scope    =    traverseNew(n,    new    FlowScope(scope,    scope));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
387	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  functionScope);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  functionScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  functionScope);	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
388	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  this);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  this);	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
389	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.getJSType());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.getJSType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.getJSType());	  scope    =    traverseNEW(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
390	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  syntacticScope.getFunctionScope());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  syntacticScope.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  syntacticScope.getFunctionScope());	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
391	[BUG]  [BUGGY]  scope  =  traverseNew(n,  functionScope.getFunctionScope());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  functionScope.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  functionScope.getFunctionScope());	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
392	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getChildCount());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getChildCount());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getChildCount());	  scope    =    traverseNegative(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
393	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope,  scope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope,  scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope,  scope.cloneTree());	  scope    =    traverseNext(n,    scope.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
394	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(syntacticScope.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
395	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scopeFactory.getScope());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scopeFactory.getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scopeFactory.getScope());	  scope    =    traverseNew(n,    scope.getScope());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
396	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.scope.cloneTree());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.scope.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.scope.cloneTree());	  scope    =    traverseNegative(n,    scope.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
397	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope,  scope.getType()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope,  scope.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope,  scope.getType()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getType()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
398	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope).scope;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope).scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope).scope;	  scope    =    traverseNew(n,    new    FlowScope()).scope;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
399	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  this).scope;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  this).scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  this).scope;	  scope    =    traverseNew(n,    new    FlowScope()).scope;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
400	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  functionScope.getType()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  functionScope.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  functionScope.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
401	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry.getType()));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(registry.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(registry.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
402	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  name.getType()));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  name.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  name.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
403	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  status.getType()));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  status.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  status.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
404	[BUG]  [BUGGY]  scope  =  traverseNEW(n);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n);	  scope    =    traverseNew(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
405	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope  *  1);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope  *  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope  *  1);	  scope    =    traverseNew(n,    scope    +    1);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
406	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  typeFactory.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n,  typeFactory.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n,  typeFactory.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n,    scope.getLastChild()));    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
407	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  new  FlowScope(scope.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  new  FlowScope(scope.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  new  FlowScope(scope.getLastChild()));	  scope    =    traverseNEW(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
408	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  this.scope.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  this.scope.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  this.scope.getLastChild());	  scope    =    traverseNEW(n,    scope.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
409	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.createScope());  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.createScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.createScope());	  scope    =    traverseNegative(n,    scope.scope);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
410	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  n.getScope());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  n.getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  n.getScope());	  scope    =    traverseNew(n,    scope.getScope());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
411	[BUG]  [BUGGY]  scope  =  traverseNode(n.getFirstChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNode(n.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNode(n.getFirstChild(),  scope);	  scope    =    traverse(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
412	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  true);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  true);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope),  true);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope));    	non-compiled	[CE]  ';'  expected	1	None	replace
413	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().createChildFlowScope());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().createChildFlowScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().createChildFlowScope());	  scope    =    traverseNew(n,    new    FlowScope()).createChildFlowScope();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
414	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope)&  TEMPLATE_TYPE_OF_THIS_EXPECTED;  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope)&  TEMPLATE_TYPE_OF_THIS_EXPECTED;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope)&  TEMPLATE_TYPE_OF_THIS_EXPECTED;	  scope    =    traverseNEW(n,    scope    &    TEMPLATE_TYPE);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
415	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  operationScope.getNativeType(UNKNOWN_TYPE));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  operationScope.getNativeType(UNKNOWN_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  operationScope.getNativeType(UNKNOWN_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
416	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(NOT_TYPE));  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(NOT_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(NOT_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(UNKNOWN_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
417	[BUG]  [BUGGY]  scope  =  traversenew(n,  new  FlowScope(n.getLastChild(),  scope);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traversenew(n,  new  FlowScope(n.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traversenew(n,  new  FlowScope(n.getLastChild(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild(),    scope);    	non-compiled	[CE]  ')'  expected	28	None	replace
418	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.restrictByNotNullOrUndefined());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.restrictByNotNullOrUndefined());	  scope    =    traverseNew(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
419	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getFirstChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getFirstChild(),  scope.getFirstChild()));	  scope    =    traverseNew(n,    new    FlowScope(n.getFirstChild()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
420	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope.restrictByNotNullOrUndefined());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope.restrictByNotNullOrUndefined());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope.restrictByNotNullOrUndefined());	  scope    =    traverseNEW(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
421	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  this);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  castType,  this);	  scope    =    traverseNew(n,    new    FlowScope(scope),    castType);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
422	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(register.getType()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(register.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(register.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
423	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  n.getType()));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope,  n.getType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope,  n.getType()));	  scope    =    traverseNew(n,    new    FlowScope(scope.getType()));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
424	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  this.scope.getParent()));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  this.scope.getParent()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  this.scope.getParent()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getParent()));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
425	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(6));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(6));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(6));	  scope    =    traverseNew(n,    new    FlowScope(3));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
426	[BUG]  [BUGGY]  scope  =  traverseNew(n,  this.scope.getLastChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  this.scope.getLastChild()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  this.scope.getLastChild()  -  1);	  scope    =    traverseNew(n,    scope.getLastChild()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
427	[BUG]  [BUGGY]  scope  =  traverseNew(n,  n.getFirstChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  n.getFirstChild()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  n.getFirstChild()  -  1);	  scope    =    traverseNew(n,    scope.getLastChild()    -    1);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
428	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope)&&  n.getFirstChild()  ==  n;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope)&&  n.getFirstChild()  ==  n;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope)&&  n.getFirstChild()  ==  n;	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
429	[BUG]  [BUGGY]  scope  =  traverseNEgative(n,  scope)&&  n.getFirstChild()!=  n;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEgative(n,  scope)&&  n.getFirstChild()!=  n;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEgative(n,  scope)&&  n.getFirstChild()!=  n;	  scope    =    traverseNEgative(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
430	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getJSType()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getJSType()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getJSType()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope.getType()));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
431	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  new  FlowScope(scope));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  new  FlowScope(scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  new  FlowScope(scope));	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
432	[BUG]  [BUGGY]  scope  =  traverseNeighbor(n,  new  FlowScope(scope));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNeighbor(n,  new  FlowScope(scope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNeighbor(n,  new  FlowScope(scope));	  scope    =    traverseNext(n,    new    FlowScope(scope));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
433	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getScope());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getScope());	  scope    =    traverseNew(n,    new    FlowScope().scope);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
434	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getChildCount()));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope.getChildCount()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope.getChildCount()));	  scope    =    traverseNew(n,    scope.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
435	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  this,  castType);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  this,  castType);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  this,  castType);	  scope    =    traverseNew(n,    new    FlowScope(scope),    this);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
436	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope;  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(),  scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(),  scope;	  scope    =    traverseNew(n,    new    FlowScope(),    scope);    	non-compiled	[CE]  ')'  expected	20	None	replace
437	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  *  1);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  *  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  *  1);	  scope    =    traverseNEW(n,    scope    -    1);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
438	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  currentScope);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(scope),  currentScope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(scope),  currentScope);	  scope    =    traverseNew(n,    new    FlowScope(scope),    scope);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
439	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(this.functionScope));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(this.functionScope));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(this.functionScope));	  scope    =    traverseNew(n,    new    FlowScope(functionScope));    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
440	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.removeFirstChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.removeFirstChild());	  scope    =    traverseNew(n,    scope.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
441	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(global));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(global));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(global));	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	48	None	replace
442	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  this);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(scope),  this);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(scope),  this);	  scope    =    traverseNegative(n,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	48	None	replace
443	[BUG]  [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope.getLastChild()));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  new  FlowScope(scope.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  new  FlowScope(scope.getLastChild()));	  scope    =    traverseNext(n,    scope.getLastChild());    	non-compiled	[CE]  ';'  expected	58	None	replace
444	[BUG]  [BUGGY]  scope  =  traverseNext(n,  this.scope.getLastChild());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  this.scope.getLastChild());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  this.scope.getLastChild());	  scope    =    traverseNext(n,    scope.getLastChild());    	non-compiled	[CE]  ';'  expected	58	None	replace
445	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  registry.getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  registry.getNativeType(UNKNOWN_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  registry.getNativeType(UNKNOWN_TYPE));	  scope    =    traverseNew(n,    scope,    scope.cloneTree());    	non-compiled	[CE]  ';'  expected	64	None	replace
446	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getValue()  -  1);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getValue()  -  1);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getValue()  -  1);	  scope    =    traverseNegative(n,    scope    -    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
447	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getValue());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getValue());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getValue());	  scope    =    traverseNegative(n,    scope    -    1);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
448	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(clone));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(clone));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(clone));	  scope    =    traverseNew(n,    new    FlowScope(registry));    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
449	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(n.getLastChild(),  scope);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverse(n,  new  FlowScope(n.getLastChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverse(n,  new  FlowScope(n.getLastChild(),  scope);	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild(),    scope);    	non-compiled	[CE]  ')'  expected	71	None	replace
450	[BUG]  [BUGGY]  scope  =  traverseNext(n,  scope,  registry.cloneTree());  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNext(n,  scope,  registry.cloneTree());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNext(n,  scope,  registry.cloneTree());	  scope    =    traverseNext(n,    scope.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
451	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NOT_NEW_TYPE));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NOT_NEW_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NOT_NEW_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
452	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NO_TYPE));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NO_TYPE));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope().getNativeType(JSTypeNative.NO_TYPE));	  scope    =    traverseNew(n,    new    FlowScope().getNativeType(JSTypeNative.NEW_TYPE));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
453	[BUG]  [BUGGY]  n  =  n,  scope.getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  n  =  n,  scope.getFirstChild();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	n  =  n,  scope.getFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	76	None	replace
454	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	n  =  n.removeFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
455	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope()),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope()),  scope);	  scope    =    traverseNew(n,    new    FlowScope()).scope;    	non-compiled	[CE]  ';'  expected	22	None	replace
456	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope())/.scope;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope())/.scope;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope())/.scope;	  scope    =    traverseNew(n,    new    FlowScope()).scope;    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
457	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope)&&  n.getFirstChild().getType()  ==  Token.NEW;  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope)&&  n.getFirstChild().getType()  ==  Token.NEW;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope)&&  n.getFirstChild().getType()  ==  Token.NEW;	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
458	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope)&&  n.getFirstChild().getType()!=  Token.NEW;  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope)&&  n.getFirstChild().getType()!=  Token.NEW;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope)&&  n.getFirstChild().getType()!=  Token.NEW;	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
459	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope)&&  n.getFirstChild()!=  n;  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope)&&  n.getFirstChild()!=  n;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope)&&  n.getFirstChild()!=  n;	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
460	[BUG]  [BUGGY]  scope  =  traverseNEw(n,  scope)&&  n.getFirstChild()  ==  n;  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEw(n,  scope)&&  n.getFirstChild()  ==  n;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEw(n,  scope)&&  n.getFirstChild()  ==  n;	  scope    =    traverseNEw(n,    scope);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
461	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  Node(Token.NEW));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  Node(Token.NEW));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  Node(Token.NEW));	  scope    =    traverseNegative(n,    NEW);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
462	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(n.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  new  FlowScope(n.getFirstChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  new  FlowScope(n.getFirstChild()));	  scope    =    traverseNegative(n,    NEW);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
463	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope.getCurrentTree(),  scope);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope.getCurrentTree(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope.getCurrentTree(),  scope);	  scope    =    traverseNew(n,    scope.cloneTree(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
464	[BUG]  [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFFF)+  1;  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNEW(n,  scope  &  0xFFFF)+  1;  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNEW(n,  scope  &  0xFFFF)+  1;	  scope    =    traverseNEW(n,    scope    &    0xFFFF);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
465	[BUG]  [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getLastChild()));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getLastChild()));  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  new  FlowScope(n.getLastChild(),  scope.getLastChild()));	  scope    =    traverseNew(n,    new    FlowScope(n.getLastChild()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
466	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getInstanceType());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getInstanceType());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getInstanceType());	  scope    =    traverseNegative(n,    scope.getType());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
467	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  type.getFirstChild(),  scope);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  type.getFirstChild(),  scope);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  type.getFirstChild(),  scope);	  scope    =    traverseNegative(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
468	[BUG]  [BUGGY]  scope  =  traverseNegative(n,  scope.getFirstChild(),  type);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNegative(n,  scope.getFirstChild(),  type);  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNegative(n,  scope.getFirstChild(),  type);	  scope    =    traverseNegative(n.getFirstChild(),    scope);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
469	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  taskScope.getFunctionScope());  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  taskScope.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  taskScope.getFunctionScope());	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
470	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  registry.getFunctionScope());  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  registry.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  registry.getFunctionScope());	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
471	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope,  n.getFunctionScope());  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OBJECTLIT:  scope  =  traverseObjectLiteral(n,  scope);  break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:      [BUGGY]  scope  =  traverseNew(n,  scope,  n.getFunctionScope());  [BUGGY]      break;  case  Token.ASSIGN_ADD:  case  Token.ADD:  scope  =  traverseAdd(n,  scope);  break;  case  Token.POS:  case  Token.NEG:  scope  =  traverse(n.getFirstChild(),  scope);//  Find  types.  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	288	288	1	replace	scope  =  traverseNew(n,  scope,  n.getFunctionScope());	  scope    =    traverseNew(n,    scope.getFunctionScope());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
