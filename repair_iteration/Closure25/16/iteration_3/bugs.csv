bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverse(n,  arg.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(n,  arg.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n,  arg.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  ';'  expected	21	None	replace
2	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  type);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(arg,  n.getJSType(),  type);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(arg,  n.getJSType(),  type);	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  ';'  expected	21	None	replace
3	[BUG]  [BUGGY]  scope  =  traverse(ct,  n.getJSType());  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(ct,  n.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(ct,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  ';'  expected	21	None	replace
4	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.getJSType());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(constructor,  n.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(constructor,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  ';'  expected	21	None	replace
5	[BUG]  [BUGGY]  scope  =  traverse(structor,  n.getJSType());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(structor,  n.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(structor,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  ';'  expected	21	None	replace
6	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getType());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(arg,  n.getType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(arg,  n.getType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  ';'  expected	21	None	replace
7	[BUG]  [BUGGY]  Node  arg  =  n.getNext();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  n.getNext();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  n.getNext();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
8	[BUG]  [BUGGY]  Node  arg  =  ct.getNext();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  ct.getNext();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  ct.getNext();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
9	[BUG]  [BUGGY]  Node  arg  =  constructor.getParent();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructor.getParent();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.getParent();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
10	[BUG]  [BUGGY]  Node  arg  =  constructor.getArgumentFunction();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructor.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.getArgumentFunction();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
11	[BUG]  [BUGGY]  Node  arg  =  type.getNext();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  type.getNext();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  type.getNext();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
12	[BUG]  [BUGGY]  Node  arg  =  constructor.getArgumentFunctions();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructor.getArgumentFunctions();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.getArgumentFunctions();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
13	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  constructor.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
14	[BUG]  [BUGGY]  For(Node  arg  =  n.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  n.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  n.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
15	[BUG]  [BUGGY]  For(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getLastChild())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getLastChild())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getLastChild())  {	  For(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
16	[BUG]  [BUGGY]  For(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
17	[BUG]  [BUGGY]  For(Node  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
18	[BUG]  [BUGGY]  For(Node  arg  =  n.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  n.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  n.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
19	[BUG]  [BUGGY]  Constructor  <?>  arg  =  n.getArgumentFunction();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  n.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  n.getArgumentFunction();	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
20	[BUG]  [BUGGY]  Constructor  <?>  arg  =  ct.getArgumentFunction();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  ct.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  ct.getArgumentFunction();	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
21	[BUG]  [BUGGY]  Constructor  <?>  arg  =  scope.getArgumentFunction();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  scope.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  scope.getArgumentFunction();	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
22	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructor.getConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructor.getConstructor();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructor.getConstructor();	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
23	[BUG]  [BUGGY]  Constructor  <?>  arg  =  type.getArgumentFunction();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  type.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  type.getArgumentFunction();	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
24	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructor.getArgumentFunction(n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructor.getArgumentFunction(n);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructor.getArgumentFunction(n);	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
25	[BUG]  [BUGGY]  for(Node  arg  =  constructorType.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructorType.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructorType.getParent();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getParent();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	17	None	replace
26	[BUG]  [BUGGY]  n.setConstructor(ct.getConstructor());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setConstructor(ct.getConstructor());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setConstructor(ct.getConstructor());	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	18	None	replace
27	[BUG]  [BUGGY]  n.setConstructor(constructorType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setConstructor(constructorType);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setConstructor(constructorType);	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	18	None	replace
28	[BUG]  [BUGGY]  n.setConstructorType(constructorType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setConstructorType(constructorType);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setConstructorType(constructorType);	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	18	None	replace
29	[BUG]  [BUGGY]  n.setType(constructorType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setType(constructorType);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setType(constructorType);	  n.setType(type);    	non-compiled	[CE]  ';'  expected	38	None	replace
30	[BUG]  [BUGGY]  for(Node  arg  =  scope.getName();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getName();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getName();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getPrefix();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
31	[BUG]  [BUGGY]  for(Node  arg  =  scope.getImplicitPrototype();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getImplicitPrototype();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getImplicitPrototype();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getPrefix();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
32	[BUG]  [BUGGY]  for(Node  arg  =  scope.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getPrefix();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
33	[BUG]  [BUGGY]  for(Node  arg  =  scope.getAssignedValues();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getAssignedValues();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getAssignedValues();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getPrefix();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
34	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  type);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  n.getJSType(),  type);	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
35	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.getJSType());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(n,  scope.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n,  scope.getJSType());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
36	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getParent());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  n.getParent());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  n.getParent());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
37	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getFirstChild());  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  n.getFirstChild());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  n.getFirstChild());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
38	[BUG]  [BUGGY]  scope  =  traverse(registry,  n.getJSType());  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(registry,  n.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(registry,  n.getJSType());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
39	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getType());  [CE]  ';'  expected  [FE]                                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  n.getType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  n.getType());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
40	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getInstanceType());  [CE]  ';'  expected  [FE]                                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  n.getInstanceType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  n.getInstanceType());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
41	[BUG]  [BUGGY]  for(Node  arg  =  constructorType.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructorType.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructorType.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructorType.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
42	[BUG]  [BUGGY]  for(Node  arg  =  builder.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  builder.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  builder.getParent();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    builder.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	40	None	replace
43	[BUG]  [BUGGY]  for(Node  arg  =  constructor.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructor.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getChildCount();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
44	[BUG]  [BUGGY]  for(Node  arg  =  n.getChildCount()  -  1;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getChildCount()  -  1;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getChildCount()  -  1;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getChildCount();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
45	[BUG]  [BUGGY]  for(Node  arg  =  scope.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getChildCount();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
46	[BUG]  [BUGGY]  For(Node  arg  =  n.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  n.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  n.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getChildCount();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
47	[BUG]  [BUGGY]  Node  arg  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  n.getFirstChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  n.getFirstChild();	  Node    arg    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
48	[BUG]  [BUGGY]  Node  arg  =  ct.getFirstChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  ct.getFirstChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  ct.getFirstChild();	  Node    arg    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
49	[BUG]  [BUGGY]  Node  arg  =  constructor.getLastChild();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructor.getLastChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.getLastChild();	  Node    arg    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
50	[BUG]  [BUGGY]  Node  arg  =  n.getLastChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  n.getLastChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  n.getLastChild();	  Node    arg    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
51	[BUG]  [BUGGY]  Node  arg  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  type.getFirstChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  type.getFirstChild();	  Node    arg    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
52	[BUG]  [BUGGY]  Node  arg  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  scope.getFirstChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  scope.getFirstChild();	  Node    arg    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	23	None	replace
53	[BUG]  [BUGGY]  for(Node  arg  =  n;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor;    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
54	[BUG]  [BUGGY]  for(Node  arg  =  type;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor;    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
55	[BUG]  [BUGGY]  for(Node  arg  =  scope;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor;    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
56	[BUG]  [BUGGY]  for(Node  arg  =  null;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  null;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  null;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor;    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
57	[BUG]  [BUGGY]  for(Node  arg  =  constructor.n;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructor.n;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.n;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor;    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
58	[BUG]  [BUGGY]  for(Node  arg  =  constructorType;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructorType;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructorType;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor;    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
59	[BUG]  [BUGGY]  for(Node  arg  =  type.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
60	[BUG]  [BUGGY]  for(JSType  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(JSType  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(JSType  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	11	None	replace
61	[BUG]  [BUGGY]  for(Node  arg  =  scope.getSyntacticScope();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getSyntacticScope();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getSyntacticScope();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
62	[BUG]  [BUGGY]  for(Node  arg  =  type.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
63	[BUG]  [BUGGY]  for(Node  arg  =  scope.getArgumentType();  arg!=  null;  arg  =  arg.next())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getArgumentType();  arg!=  null;  arg  =  arg.next())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getArgumentType();  arg!=  null;  arg  =  arg.next())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
64	[BUG]  [BUGGY]  for(Node  arg  =  scope.getScopeType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getScopeType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getScopeType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
65	[BUG]  [BUGGY]  n.setConstructorType(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setConstructorType(type);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setConstructorType(type);	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	27	None	replace
66	[BUG]  [BUGGY]  n.setJSType(ct.getInstanceType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setJSType(ct.getInstanceType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setJSType(ct.getInstanceType());	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	27	None	replace
67	[BUG]  [BUGGY]  n.setInstanceType(constructorType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setInstanceType(constructorType);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setInstanceType(constructorType);	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	27	None	replace
68	[BUG]  [BUGGY]  for(Node  arg  =  scope.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getParent();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
69	[BUG]  [BUGGY]  for(Node  arg  =  scope.getAncestor(1);  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getAncestor(1);  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getAncestor(1);  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getParent();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
70	[BUG]  [BUGGY]  for(Node  arg  =  scope.getType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getParent();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
71	[BUG]  [BUGGY]  scope  =  traverse(scope,  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  n);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  n);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
72	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(n,  scope,  type);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n,  scope,  type);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
73	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  ct);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(n,  scope,  ct);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n,  scope,  ct);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
74	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  arg);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(n,  scope,  arg);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n,  scope,  arg);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
75	[BUG]  [BUGGY]  scope  =  traverse(constructor,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(constructor,  scope);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(constructor,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
76	[BUG]  [BUGGY]  for(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.next())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.next())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.next())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
77	[BUG]  [BUGGY]  For(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
78	[BUG]  [BUGGY]  for(Node  arg  =  scope.getScope();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getScope();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getScope();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
79	[BUG]  [BUGGY]  for(Node  arg  =  constructor.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructor.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
80	[BUG]  [BUGGY]  for(Node  arg  =  n.getScope();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getScope();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getScope();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
81	[BUG]  [BUGGY]  For(Node  arg  =  n.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  n.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  n.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
82	[BUG]  [BUGGY]  Node  arg  =  ct.getParent();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  ct.getParent();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  ct.getParent();	  Node    arg    =    constructorType.getParent();    	non-compiled	[CE]  ';'  expected	30	None	replace
83	[BUG]  [BUGGY]  Node  arg  =  n.getParent();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  n.getParent();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  n.getParent();	  Node    arg    =    constructorType.getParent();    	non-compiled	[CE]  ';'  expected	30	None	replace
84	[BUG]  [BUGGY]  Node  arg  =  constructorType.getNext();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructorType.getNext();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.getNext();	  Node    arg    =    constructorType.getParent();    	non-compiled	[CE]  ';'  expected	30	None	replace
85	[BUG]  [BUGGY]  for(Node  arg  =  scope.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
86	[BUG]  [BUGGY]  For(Node  arg  =  n.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  n.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  n.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    constructor.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
87	[BUG]  [BUGGY]  For(Node  arg  =  scope.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  scope.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  scope.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    constructor.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
88	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  constructor.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  constructor.getParent();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    constructor.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
89	[BUG]  [BUGGY]  For(Node  arg  =  type.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  type.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  type.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    constructor.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
90	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  constructor.getType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  constructor.getType();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    constructor.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
91	[BUG]  [BUGGY]  for(Node  arg  =  scope.getCurrentName();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getCurrentName();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getCurrentName();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getCurrentToken();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
92	[BUG]  [BUGGY]  for(Node  arg  =  type.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getCurrentToken();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
93	[BUG]  [BUGGY]  For(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getCurrentToken();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
94	[BUG]  [BUGGY]  for(Node  arg  =  scope.nextToken();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.nextToken();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.nextToken();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getCurrentToken();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
95	[BUG]  [BUGGY]  for(Node  arg  =  n.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getCurrentToken();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
96	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructor.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructor.getJSType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructor.getJSType();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
97	[BUG]  [BUGGY]  Constructor  <?>  arg  =  type.getJSType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  type.getJSType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  type.getJSType();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
98	[BUG]  [BUGGY]  Constructor  <?>  arg  =  scope.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  scope.getJSType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  scope.getJSType();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
99	[BUG]  [BUGGY]  Constructor  <?>  arg  =  n.getParent();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  n.getParent();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  n.getParent();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
100	[BUG]  [BUGGY]  Constructor  <?>  arg  =  n.getConstructor();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  n.getConstructor();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  n.getConstructor();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
101	[BUG]  [BUGGY]  Constructor  <?>  arg  =  n.getJSType(type);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  n.getJSType(type);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  n.getJSType(type);	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
102	[BUG]  [BUGGY]  Node  arg  =  n.getArgumentFunction();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  n.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  n.getArgumentFunction();	  Node    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	29	None	replace
103	[BUG]  [BUGGY]  Node  arg  =  ct.getArgumentFunction();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  ct.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  ct.getArgumentFunction();	  Node    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	29	None	replace
104	[BUG]  [BUGGY]  Node  arg  =  type.getArgumentFunction();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  type.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  type.getArgumentFunction();	  Node    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	29	None	replace
105	[BUG]  [BUGGY]  Node  arg  =  scope.getArgumentFunction();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  scope.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  scope.getArgumentFunction();	  Node    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	29	None	replace
106	[BUG]  [BUGGY]  Node  arg  =  constructorType.getArgumentFunction(n);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructorType.getArgumentFunction(n);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.getArgumentFunction(n);	  Node    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	29	None	replace
107	[BUG]  [BUGGY]  for(Node  arg  =  builder.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  builder.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  builder.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    builder.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
108	[BUG]  [BUGGY]  for(Node  arg  =  getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    builder.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	13	None	replace
109	[BUG]  [BUGGY]  for(Node  arg  =  constructors.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructors.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructors.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructors.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
110	[BUG]  [BUGGY]  for(Node  arg  =  constructors.get(0);  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructors.get(0);  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructors.get(0);  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructors.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
111	[BUG]  [BUGGY]  scope  =  traverse(ct,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(ct,  scope);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(ct,  scope);	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
112	[BUG]  [BUGGY]  scope  =  traverse(scope,  ct);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  ct);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  ct);	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
113	[BUG]  [BUGGY]  scope  =  traverse(scope,  arg);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  arg);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  arg);	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
114	[BUG]  [BUGGY]  scope  =  traverse(n.getJSType(),  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(n.getJSType(),  scope);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n.getJSType(),  scope);	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
115	[BUG]  [BUGGY]  for(Node  arg  =  n.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
116	[BUG]  [BUGGY]  for(Node  arg  =  n.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getFirstChild();  arg  ==  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	7	None	replace
117	[BUG]  [BUGGY]  FunctionType  arg  =  ct.getArgumentType();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  FunctionType  arg  =  ct.getArgumentType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  ct.getArgumentType();	  FunctionType    arg    =    constructorType.getArgumentType();    	non-compiled	[CE]  ';'  expected	26	None	replace
118	[BUG]  [BUGGY]  FunctionType  arg  =  type.getArgumentType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  FunctionType  arg  =  type.getArgumentType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  type.getArgumentType();	  FunctionType    arg    =    constructorType.getArgumentType();    	non-compiled	[CE]  ';'  expected	26	None	replace
119	[BUG]  [BUGGY]  FunctionType  arg  =  n.getArgumentType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  FunctionType  arg  =  n.getArgumentType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  n.getArgumentType();	  FunctionType    arg    =    constructorType.getArgumentType();    	non-compiled	[CE]  ';'  expected	26	None	replace
120	[BUG]  [BUGGY]  FunctionType  arg  =  functionScope.getArgumentType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  FunctionType  arg  =  functionScope.getArgumentType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  functionScope.getArgumentType();	  FunctionType    arg    =    constructorType.getArgumentType();    	non-compiled	[CE]  ';'  expected	26	None	replace
121	[BUG]  [BUGGY]  FunctionType  arg  =  scope.getArgumentType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  FunctionType  arg  =  scope.getArgumentType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  scope.getArgumentType();	  FunctionType    arg    =    constructorType.getArgumentType();    	non-compiled	[CE]  ';'  expected	26	None	replace
122	[BUG]  [BUGGY]  FunctionType  arg  =  context.getArgumentType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  FunctionType  arg  =  context.getArgumentType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  context.getArgumentType();	  FunctionType    arg    =    constructorType.getArgumentType();    	non-compiled	[CE]  ';'  expected	26	None	replace
123	[BUG]  [BUGGY]  for(Node  arg  =  context.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  context.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  context.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    context.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	25	None	replace
124	[BUG]  [BUGGY]  for(Node  arg  =  n.next();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.next();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.next();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.next();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
125	[BUG]  [BUGGY]  for(Node  arg  =  scope.next();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.next();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.next();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.next();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
126	[BUG]  [BUGGY]  for(Node  arg  =  type.next();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.next();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.next();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.next();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
127	[BUG]  [BUGGY]  for(Node  arg  =  constructorType.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructorType.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructorType.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	16	None	replace
128	[BUG]  [BUGGY]  for(Node  arg  =  type.getInstanceType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getInstanceType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getInstanceType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	16	None	replace
129	[BUG]  [BUGGY]  For(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getCurrentNode();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
130	[BUG]  [BUGGY]  for(Node  arg  =  type.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getCurrentNode();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
131	[BUG]  [BUGGY]  Node  arg  =  constructorType.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructorType.getLastChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.getLastChild();	  Node    arg    =    constructorType.getFirstChild();    	non-compiled	[CE]  ';'  expected	28	None	replace
132	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructorType.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructorType.getConstructor();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructorType.getConstructor();	  Constructor    <?>    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	35	None	replace
133	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructorType.getRawClass();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructorType.getRawClass();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructorType.getRawClass();	  Constructor    <?>    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	35	None	replace
134	[BUG]  [BUGGY]  FunctionType  arg  =  constructorType.getParameterType(0);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  FunctionType  arg  =  constructorType.getParameterType(0);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  constructorType.getParameterType(0);	  FunctionType    arg    =    constructorType.getArgumentType();    	non-compiled	[CE]  ';'  expected	26	None	replace
135	[BUG]  [BUGGY]  for(Node  arg  =  n.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
136	[BUG]  [BUGGY]  for(Node  arg  =  n.getOwner();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getOwner();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getOwner();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
137	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructorType.getRawArgumentFunction();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructorType.getRawArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructorType.getRawArgumentFunction();	  Constructor    <?>    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	35	None	replace
138	[BUG]  [BUGGY]  for(Node  arg  =  getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  getConstructor();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor;    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
139	[BUG]  [BUGGY]  For(Node  arg  =  n;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  n;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  n;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor;    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
140	[BUG]  [BUGGY]  Node  arg  =  constructorType.getArg1();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructorType.getArg1();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.getArg1();	  Node    arg    =    constructorType.getParent();    	non-compiled	[CE]  ';'  expected	30	None	replace
141	[BUG]  [BUGGY]  Node  arg  =  constructorType.getArgumentFactory();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructorType.getArgumentFactory();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.getArgumentFactory();	  Node    arg    =    constructorType.getParent();    	non-compiled	[CE]  ';'  expected	30	None	replace
142	[BUG]  [BUGGY]  for(Node  arg  =  functionScope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  functionScope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  functionScope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
143	[BUG]  [BUGGY]  for(Node  arg  =  type.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getPrefix();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
144	[BUG]  [BUGGY]  for(Node  arg  =  scope.getPrefix();  arg!=  null;  arg  =  arg.next())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getPrefix();  arg!=  null;  arg  =  arg.next())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getPrefix();  arg!=  null;  arg  =  arg.next())  {	  for(Node    arg    =    scope.getPrefix();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
145	[BUG]  [BUGGY]  for(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.next())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.next())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.next())  {	  for(Node    arg    =    scope.getCurrentNode();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	33	None	replace
146	[BUG]  [BUGGY]  For(Node  arg  =  context.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  context.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  context.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    constructor.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
147	[BUG]  [BUGGY]  for(Node  arg  =  constructors.getNext();  arg!=  null;  arg  =  arg.next())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructors.getNext();  arg!=  null;  arg  =  arg.next())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructors.getNext();  arg!=  null;  arg  =  arg.next())  {	  for(Node    arg    =    constructors.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
148	[BUG]  [BUGGY]  for(Node  arg  =  constructors.next();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructors.next();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructors.next();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructors.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
149	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(functionScope,  scope);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(functionScope,  scope);	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
150	[BUG]  [BUGGY]  scope  =  traverse(arg,  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(arg,  n);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(arg,  n);	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
151	[BUG]  [BUGGY]  for(Node  arg  =  type.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
152	[BUG]  [BUGGY]  for(Node  arg  =  functionScope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  functionScope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  functionScope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
153	[BUG]  [BUGGY]  Constructor  <?>  arg  =  context.getArgumentFunction();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  context.getArgumentFunction();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  context.getArgumentFunction();	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
154	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n.getJSType());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(functionScope,  n.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(functionScope,  n.getJSType());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
155	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  constructorType);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  n.getJSType(),  constructorType);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  n.getJSType(),  constructorType);	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
156	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructorType.getJSType());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(scope,  constructorType.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  constructorType.getJSType());	  scope    =    traverse(scope,    n.getJSType());    	non-compiled	[CE]  ';'  expected	24	None	replace
157	[BUG]  [BUGGY]  scope  =  traverse(constructorType,  n.getJSType());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(constructorType,  n.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(constructorType,  n.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  ';'  expected	21	None	replace
158	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope.getJSType());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(arg,  scope.getJSType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(arg,  scope.getJSType());	  scope    =    traverse(arg,    n.getJSType());    	non-compiled	[CE]  ';'  expected	21	None	replace
159	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructorType.getJSType();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructorType.getJSType();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructorType.getJSType();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
160	[BUG]  [BUGGY]  Constructor  <?>  arg  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  n.getFirstChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  n.getFirstChild();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
161	[BUG]  [BUGGY]  Node  arg  =  constructor.getArgument();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructor.getArgument();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.getArgument();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
162	[BUG]  [BUGGY]  Node  arg  =  constructor.getArg1();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructor.getArg1();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.getArg1();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
163	[BUG]  [BUGGY]  for(Node  arg  =  constructor.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructor.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
164	[BUG]  [BUGGY]  for(Node  arg  =  functionScope.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  functionScope.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  functionScope.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
165	[BUG]  [BUGGY]  for(Node  arg  =  n.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
166	[BUG]  [BUGGY]  for(Node  arg  =  scope.getArgument();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getArgument();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getArgument();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
167	[BUG]  [BUGGY]  n.setCompiler(compiler);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setCompiler(compiler);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setCompiler(compiler);	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	27	None	replace
168	[BUG]  [BUGGY]  for(Node  arg  =  n.getPrevious();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getPrevious();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getPrevious();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getParent();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
169	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(functionScope,  n);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(functionScope,  n);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
170	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  functionScope);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(n,  scope,  functionScope);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n,  scope,  functionScope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
171	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  constructorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  scope  =  traverse(n,  scope,  constructorType);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n,  scope,  constructorType);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	20	None	replace
172	[BUG]  [BUGGY]  for(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.next())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.next())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.next())  {	  for(Node    arg    =    scope.getCurrentToken();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
173	[BUG]  [BUGGY]  for(Node  arg  =  n.getChildCount()  +  1;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getChildCount()  +  1;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getChildCount()  +  1;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getChildCount();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
174	[BUG]  [BUGGY]  for(Node  arg  =  type.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getChildCount();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
175	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  constructor.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  constructor.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    constructor.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
176	[BUG]  [BUGGY]  for(Node  arg  =  buildors.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  buildors.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  buildors.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructors.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
177	[BUG]  [BUGGY]  Node  arg  =  constructorType.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.restrictByNotNullOrUndefined();	  Node    arg    =    constructorType.getFirstChild();    	non-compiled	[CE]  ';'  expected	28	None	replace
178	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  throw  new  IllegalStateException( " ");  }	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
179	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
180	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
181	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  n.setJSType(type);  }  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  n.setJSType(type);  }  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  n.setJSType(type);  }	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
182	[BUG]  [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  System.out.println( "Unknown  type: "  +  type);  }  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  System.out.println( "Unknown  type: "  +  type);  }  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	if(scope!=  null)  {  scope  =  traverse(arg,  scope);  }  else  {  System.out.println( "Unknown  type: "  +  type);  }	  scope    =    traverse(arg,    scope);    	non-compiled	[CE]  ';'  expected	19	None	replace
183	[BUG]  [BUGGY]  n.setConstructor(ct.getInstanceType());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setConstructor(ct.getInstanceType());  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setConstructor(ct.getInstanceType());	  n.setJSType(type);    	non-compiled	[CE]  ';'  expected	18	None	replace
184	[BUG]  [BUGGY]  FunctionType  arg  =  constructorType.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  FunctionType  arg  =  constructorType.getConstructor();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  constructorType.getConstructor();	  FunctionType    arg    =    constructorType.getArgumentType();    	non-compiled	[CE]  ';'  expected	26	None	replace
185	[BUG]  [BUGGY]  for(Node  arg  =  n.getScopeRoot();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getScopeRoot();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getScopeRoot();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
186	[BUG]  [BUGGY]  for(Node  arg  =  n.getOwnerFunction();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getOwnerFunction();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getOwnerFunction();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	9	None	replace
187	[BUG]  [BUGGY]  for(Node  arg  =  constructor.getType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructor.getType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.getType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getParent();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	17	None	replace
188	[BUG]  [BUGGY]  for(Node  arg  =  builder.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  builder.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  builder.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getChildCount();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
189	[BUG]  [BUGGY]  Node  arg  =  constructorType.toString();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructorType.toString();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.toString();	  Node    arg    =    constructorType.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	29	None	replace
190	[BUG]  [BUGGY]  for(Node  arg  =  n.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
191	[BUG]  [BUGGY]  for(Node  arg  =  constructor.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructor.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
192	[BUG]  [BUGGY]  for(Node  arg  =  context.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  context.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  context.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
193	[BUG]  [BUGGY]  for(Node  arg  =  scope.getArg1();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getArg1();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getArg1();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentFunction();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
194	[BUG]  [BUGGY]  for(Node  arg  =  scope.getArgumentClass();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  scope.getArgumentClass();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getArgumentClass();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
195	[BUG]  [BUGGY]  for(Node  arg  =  context.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  context.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  context.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getArgumentType();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
196	[BUG]  [BUGGY]  n.setInstanceType(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  n.setInstanceType(type);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setInstanceType(type);	  n.setJSType(constructorType);    	non-compiled	[CE]  ';'  expected	27	None	replace
197	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructor.getParent();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructor.getParent();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructor.getParent();	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
198	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructor.getParameterType(0);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  constructor.getParameterType(0);  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructor.getParameterType(0);	  Constructor    <?>    arg    =    constructor.getArgumentFunction();    	non-compiled	[CE]  ';'  expected	37	None	replace
199	[BUG]  [BUGGY]  Node  arg  =  constructorType.cloneTree();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructorType.cloneTree();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.cloneTree();	  Node    arg    =    constructorType.getParent();    	non-compiled	[CE]  ';'  expected	30	None	replace
200	[BUG]  [BUGGY]  for(Node  arg  =  n.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  n.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getPrefix();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
201	[BUG]  [BUGGY]  for(Node  arg  =  constructor.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructor.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getPrefix();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
202	[BUG]  [BUGGY]  for(Node  arg  =  constructorType.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructorType.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructorType.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructorType.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	15	None	replace
203	[BUG]  [BUGGY]  for(Node  arg  =  type.getScopeRoot();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getScopeRoot();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getScopeRoot();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	16	None	replace
204	[BUG]  [BUGGY]  for(Node  arg  =  type.getScope();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  type.getScope();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getScope();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getConstructor();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	16	None	replace
205	[BUG]  [BUGGY]  Constructor  <?>  arg  =  n.getLastChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  n.getLastChild();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  n.getLastChild();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
206	[BUG]  [BUGGY]  Constructor  <?>  arg  =  n.getNext();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Constructor  <?>  arg  =  n.getNext();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  n.getNext();	  Constructor    <?>    arg    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	36	None	replace
207	[BUG]  [BUGGY]  for(Node  arg  =  buildor.next();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  buildor.next();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  buildor.next();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.next();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
208	[BUG]  [BUGGY]  For(Node  arg  =  constructor.next();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  constructor.next();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  constructor.next();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.next();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
209	[BUG]  [BUGGY]  for(Node  arg  =  constructor.nextToken();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  constructor.nextToken();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.nextToken();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.next();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	14	None	replace
210	[BUG]  [BUGGY]  For(Node  arg  =  builder.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  For(Node  arg  =  builder.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  builder.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  For(Node    arg    =    n.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	12	None	replace
211	[BUG]  [BUGGY]  for(Node  arg  =  this.n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  for(Node  arg  =  this.n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  this.n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
212	[BUG]  [BUGGY]  Node  arg  =  constructor.next();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]        ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);      [BUGGY]  Node  arg  =  constructor.next();  [BUGGY]      scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.next();	  Node    arg    =    constructor.getNext();    	non-compiled	[CE]  ';'  expected	22	None	replace
