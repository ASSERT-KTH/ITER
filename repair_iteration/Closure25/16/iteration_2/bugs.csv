bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
2	[BUG]  [BUGGY]  for(Node  arg  =  scope.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  scope.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getParent();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  for(Node  arg  =  scope.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  scope.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getPrefix();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
4	[BUG]  [BUGGY]  for(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getCurrentToken();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
5	[BUG]  [BUGGY]  for(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getArgumentFunction();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
6	[BUG]  [BUGGY]  for(Node  arg  =  scope.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  scope.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getArgumentType();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
7	[BUG]  [BUGGY]  for(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
8	[BUG]  [BUGGY]  for(Node  arg  =  n.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  n.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getParent();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
9	[BUG]  [BUGGY]  for(Node  arg  =  n.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  n.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.getLastChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
11	[BUG]  [BUGGY]  for(Node  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
12	[BUG]  [BUGGY]  For(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  For(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  n.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
13	[BUG]  [BUGGY]  for(Node  arg  =  builder.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  builder.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  builder.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
14	[BUG]  [BUGGY]  for(Node  arg  =  constructor.next();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  constructor.next();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor.next();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.getParent();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
15	[BUG]  [BUGGY]  for(Node  arg  =  constructorType.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  constructorType.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructorType.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
16	[BUG]  [BUGGY]  for(Node  arg  =  type.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  type.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getConstructor();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
17	[BUG]  [BUGGY]  for(Node  arg  =  type.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  type.getParent();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  type.getParent();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
18	[BUG]  [BUGGY]  n.setJSType(type);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  n.setJSType(type);  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setJSType(type);	      	non-compiled	[CE]  ';'  expected	4	None	replace
19	[BUG]  [BUGGY]  scope  =  traverse(arg,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  scope  =  traverse(arg,  scope);  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(arg,  scope);	      	non-compiled	[CE]  ';'  expected	4	None	replace
20	[BUG]  [BUGGY]  scope  =  traverse(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  scope  =  traverse(n,  scope);  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(n,  scope);	      	non-compiled	[CE]  ';'  expected	4	None	replace
21	[BUG]  [BUGGY]  scope  =  traverse(arg,  n.getJSType());  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  scope  =  traverse(arg,  n.getJSType());  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(arg,  n.getJSType());	      	non-compiled	[CE]  ';'  expected	4	None	replace
22	[BUG]  [BUGGY]  Node  arg  =  constructor.getNext();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  Node  arg  =  constructor.getNext();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.getNext();	      	non-compiled	[CE]  ';'  expected	4	None	replace
23	[BUG]  [BUGGY]  Node  arg  =  constructor.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  Node  arg  =  constructor.getFirstChild();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructor.getFirstChild();	      	non-compiled	[CE]  ';'  expected	4	None	replace
24	[BUG]  [BUGGY]  scope  =  traverse(scope,  n.getJSType());  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  scope  =  traverse(scope,  n.getJSType());  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	scope  =  traverse(scope,  n.getJSType());	      	non-compiled	[CE]  ';'  expected	4	None	replace
25	[BUG]  [BUGGY]  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  context.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
26	[BUG]  [BUGGY]  FunctionType  arg  =  constructorType.getArgumentType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  FunctionType  arg  =  constructorType.getArgumentType();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	FunctionType  arg  =  constructorType.getArgumentType();	      	non-compiled	[CE]  ';'  expected	4	None	replace
27	[BUG]  [BUGGY]  n.setJSType(constructorType);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  n.setJSType(constructorType);  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setJSType(constructorType);	      	non-compiled	[CE]  ';'  expected	4	None	replace
28	[BUG]  [BUGGY]  Node  arg  =  constructorType.getFirstChild();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  Node  arg  =  constructorType.getFirstChild();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.getFirstChild();	      	non-compiled	[CE]  ';'  expected	4	None	replace
29	[BUG]  [BUGGY]  Node  arg  =  constructorType.getArgumentFunction();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  Node  arg  =  constructorType.getArgumentFunction();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.getArgumentFunction();	      	non-compiled	[CE]  ';'  expected	4	None	replace
30	[BUG]  [BUGGY]  Node  arg  =  constructorType.getParent();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  Node  arg  =  constructorType.getParent();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Node  arg  =  constructorType.getParent();	      	non-compiled	[CE]  ';'  expected	4	None	replace
31	[BUG]  [BUGGY]  for(Node  arg  =  constructors.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  constructors.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructors.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
32	[BUG]  [BUGGY]  for(Node  arg  =  constructor;  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  constructor;  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  constructor;  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    type.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
33	[BUG]  [BUGGY]  for(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  scope.getCurrentNode();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    scope.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
34	[BUG]  [BUGGY]  for(Node  arg  =  n.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  n.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  n.getChildCount();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
35	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructorType.getArgumentFunction();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  Constructor  <?>  arg  =  constructorType.getArgumentFunction();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructorType.getArgumentFunction();	      	non-compiled	[CE]  ';'  expected	4	None	replace
36	[BUG]  [BUGGY]  Constructor  <?>  arg  =  n.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  Constructor  <?>  arg  =  n.getJSType();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  n.getJSType();	      	non-compiled	[CE]  ';'  expected	4	None	replace
37	[BUG]  [BUGGY]  Constructor  <?>  arg  =  constructor.getArgumentFunction();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  Constructor  <?>  arg  =  constructor.getArgumentFunction();  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	Constructor  <?>  arg  =  constructor.getArgumentFunction();	      	non-compiled	[CE]  ';'  expected	4	None	replace
38	[BUG]  [BUGGY]  n.setType(type);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  n.setType(type);  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	n.setType(type);	      	non-compiled	[CE]  ';'  expected	4	None	replace
39	[BUG]  [BUGGY]  For(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  For(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	For(Node  arg  =  constructor.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.getParent();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	6	None	replace
40	[BUG]  [BUGGY]  for(Node  arg  =  builder.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  builder.getNext();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  builder.getNext();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    n.getNext();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
41	[BUG]  [BUGGY]  for(Node  arg  =  buildor.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      ct  =  (FunctionType)  constructorType;  }  if  (ct  !=  null  &&  ct.isConstructor())  {  type  =  ct.getInstanceType();  }  }  }  n.setJSType(type);    [BUGGY]  for(Node  arg  =  buildor.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {  [BUGGY]    scope  =  traverse(arg,  scope);  }  return  scope;  }  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1059	1059	1	replace	for(Node  arg  =  buildor.getFirstChild();  arg!=  null;  arg  =  arg.getNext())  {	  for(Node    arg    =    constructor.getFirstChild();    arg!=    null;    arg    =    arg.getNext())    {    	non-compiled	[CE]  ';'  expected	2	None	replace
