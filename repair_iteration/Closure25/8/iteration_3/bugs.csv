bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType!=  null)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType!=  null)  {	  if(constructorType    ==    null    ||    constructorType!=    null)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
2	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.isNoType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.isNoType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.isNoType())  {	  if(constructorType!=    null    &&    constructorType.isNoType())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
3	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isNoType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.isNoType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.isNoType())  {	  if(constructorType!=    null    &&    constructorType.isNoType())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
4	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isConstructor())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.isConstructor())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.isConstructor())  {	  if(constructorType!=    null    &&    constructorType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
5	[BUG]  [BUGGY]  if(constructorType  ==  null  ||  constructorType.isConstructor())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  ||  constructorType.isConstructor())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  ||  constructorType.isConstructor())  {	  if(constructorType!=    null    &&    constructorType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isInterface())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.isInterface())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.isInterface())  {	  if(constructorType!=    null    &&    constructorType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	4	None	replace
7	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.isInterface())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.isInterface())  {	  if(constructorType!=    null    ||    constructorType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
8	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isFunctionType())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.isFunctionType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.isFunctionType())  {	  if(constructorType!=    null    &&    constructorType.isFunctionType())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
9	[BUG]  [BUGGY]  if(constructorType  ==  null  ||  constructorType.isFunctionType())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  ||  constructorType.isFunctionType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  ||  constructorType.isFunctionType())  {	  if(constructorType!=    null    &&    constructorType.isFunctionType())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
10	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isRestrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.isRestrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.isRestrictByNotNullOrUndefined())  {	  if(constructorType!=    null    &&    constructorType.isRestrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
11	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.isRestrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.isRestrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.isRestrictByNotNullOrUndefined())  {	  if(constructorType!=    null    &&    constructorType.isRestrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
12	[BUG]  [BUGGY]  if(constructorType  ==  null  ||  constructorType.isRestrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  ||  constructorType.isRestrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  ||  constructorType.isRestrictByNotNullOrUndefined())  {	  if(constructorType!=    null    &&    constructorType.isRestrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
13	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  constructorType);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
14	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType.restrictByNotNullOrUndefined());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType.restrictByNotNullOrUndefined());  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  constructorType.restrictByNotNullOrUndefined());	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
15	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  TEMPLATE_TYPE_NOT_OBJECT_TYPE);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
16	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  n);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
17	[BUG]  [BUGGY]  type  =  getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(NO_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(NO_TYPE);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
18	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  scope);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
19	[BUG]  [BUGGY]  Node  constructorType  =  n.getNext();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  n.getNext();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  n.getNext();	  Node    constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
20	[BUG]  [BUGGY]  Node  constructorType  =  scope.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  scope.getLastChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  scope.getLastChild();	  Node    constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
21	[BUG]  [BUGGY]  Node  constructorType  =  type.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  type.getFirstChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  type.getFirstChild();	  Node    constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
22	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.isNone())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.isNone())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.isNone())  {	  if(constructorType!=    null    &&    constructorType.isNone())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
23	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isNone())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.isNone())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.isNone())  {	  if(constructorType!=    null    &&    constructorType.isNone())    {    	non-compiled	[CE]  ';'  expected	35	None	replace
24	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType  ==  null)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType  ==  null)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType  ==  null)  {	  if(constructorType!=    null    ||    constructorType    ==    null)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
25	[BUG]  [BUGGY]  JSType  constructorType  =  n.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  n.toMaybeFunctionType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  n.toMaybeFunctionType();	  JSType    constructorType    =    constructor.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	37	None	replace
26	[BUG]  [BUGGY]  JSType  constructorType  =  scope.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  scope.toMaybeFunctionType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  scope.toMaybeFunctionType();	  JSType    constructorType    =    constructor.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	37	None	replace
27	[BUG]  [BUGGY]  Node  constructorType  =  node.getFirstChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  node.getFirstChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  node.getFirstChild();	  Node    constructorType    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	15	None	replace
28	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType    instanceof    UnknownType)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
29	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  constructorType  instanceof  UnknownType)  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  constructorType  instanceof  UnknownType)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  constructorType  instanceof  UnknownType)  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType    instanceof    UnknownType)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
30	[BUG]  [BUGGY]  if(constructorType  ==  null  ||  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  ||  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  ||  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType    instanceof    UnknownType)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
31	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  &&  constructorType  instanceof  UnknownType)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  &&  constructorType  instanceof  UnknownType)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  &&  constructorType  instanceof  UnknownType)  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType    instanceof    UnknownType)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
32	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  ||  constructorType  instanceof  UnknownType)  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType    instanceof    UnknownType)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
33	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  UnknownType)  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  UnknownType)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType  instanceof  UnknownType)  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType    instanceof    UnknownType)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
34	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isNativeType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.isNativeType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.isNativeType())  {	  if(constructorType!=    null    ||    constructorType.isNativeType())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
35	[BUG]  [BUGGY]  if(constructorType  ==  null  ||  constructorType.isNativeType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  ||  constructorType.isNativeType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  ||  constructorType.isNativeType())  {	  if(constructorType!=    null    ||    constructorType.isNativeType())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
36	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
37	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  getNativeType(NO_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  getNativeType(NO_TYPE);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
39	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
40	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
41	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType  instanceof  FunctionType  ||  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType  instanceof  FunctionType  ||  constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType  instanceof  FunctionType  ||  constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
42	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  &&  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  &&  constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType  instanceof  FunctionType  &&  constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
43	[BUG]  [BUGGY]  if(constructorType  ==  null  ||  constructorType  instanceof  FunctionType  ||  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  ||  constructorType  instanceof  FunctionType  ||  constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  ||  constructorType  instanceof  FunctionType  ||  constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
44	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  ||  constructorType.isFunctionType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  ||  constructorType.isFunctionType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  ||  constructorType.isFunctionType())  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
45	[BUG]  [BUGGY]  Node  constructor  =  n.getLastChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructor  =  n.getLastChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructor  =  n.getLastChild();	  Node    constructor    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	17	None	replace
46	[BUG]  [BUGGY]  Node  constructor  =  n.getNext();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructor  =  n.getNext();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructor  =  n.getNext();	  Node    constructor    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	17	None	replace
47	[BUG]  [BUGGY]  Node  constructor  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructor  =  scope.getFirstChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructor  =  scope.getFirstChild();	  Node    constructor    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	17	None	replace
48	[BUG]  [BUGGY]  Node  constructor  =  node.getFirstChild();  [CE]  ';'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructor  =  node.getFirstChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructor  =  node.getFirstChild();	  Node    constructor    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	17	None	replace
49	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isRestricted())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.isRestricted())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.isRestricted())  {	  if(constructorType!=    null    ||    constructorType.isRestricted())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
50	[BUG]  [BUGGY]  if(constructorType  ==  null  ||  constructorType.isRestricted())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  ||  constructorType.isRestricted())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  ||  constructorType.isRestricted())  {	  if(constructorType!=    null    ||    constructorType.isRestricted())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
51	[BUG]  [BUGGY]  JSType  constructorType  =  ct.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  ct.toMaybeFunctionType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  ct.toMaybeFunctionType();	  JSType    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	18	None	replace
52	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType!=  null  &&!constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType!=  null  &&!constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType!=  null  &&!constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&!constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
53	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType!=  null  &&!constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType!=  null  &&!constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType!=  null  &&!constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&!constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
54	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isNativeType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isNativeType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isNativeType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&!constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
55	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isFunctionType())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isFunctionType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isFunctionType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&!constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
56	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isConstructor())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isConstructor())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isConstructor())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&!constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
57	[BUG]  [BUGGY]  n.removeChild(type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  n.removeChild(type);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	n.removeChild(type);	  n.removeChild(constructor);    	non-compiled	[CE]  ';'  expected	38	None	replace
58	[BUG]  [BUGGY]  n.removeChild(scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  n.removeChild(scope);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	n.removeChild(scope);	  n.removeChild(constructor);    	non-compiled	[CE]  ';'  expected	38	None	replace
59	[BUG]  [BUGGY]  n.removeChild(constructorType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  n.removeChild(constructorType);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	n.removeChild(constructorType);	  n.removeChild(constructor);    	non-compiled	[CE]  ';'  expected	38	None	replace
60	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.isAll())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.isAll())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.isAll())  {	  if(constructorType!=    null    &&    constructorType.isAll())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
61	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.isAll())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.isAll())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.isAll())  {	  if(constructorType!=    null    &&    constructorType.isAll())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
62	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunction())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunction())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.isFunction())  {	  if(constructorType!=    null    &&    constructorType.isAll())    {    	non-compiled	[CE]  ';'  expected	34	None	replace
63	[BUG]  [BUGGY]  JSType  constructorType  =  n.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  n.restrictByNotNullOrUndefined();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  n.restrictByNotNullOrUndefined();	  JSType    constructorType    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	14	None	replace
64	[BUG]  [BUGGY]  JSType  constructorType  =  scope.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  scope.restrictByNotNullOrUndefined();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  scope.restrictByNotNullOrUndefined();	  JSType    constructorType    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	14	None	replace
65	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  type);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
66	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  n);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
67	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(NO_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(NO_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(NO_TYPE);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
68	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(CONSTRUCTOR_TYPE);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
69	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  scope);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
70	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE)+  1;	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
71	[BUG]  [BUGGY]  if(constructorType!=  null  ||  buildorType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  buildorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  buildorType.isUnknownType())  {	  if(constructorType!=    null    &&    buildorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
72	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  buildorType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  buildorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  buildorType.isUnknownType())  {	  if(constructorType!=    null    &&    buildorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
73	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType.isFunctionType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType.isFunctionType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType.isFunctionType())  {	  if(constructorType!=    null    &&    buildorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
74	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.equals(UNKNOWN_TYPE))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.equals(UNKNOWN_TYPE))  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.equals(UNKNOWN_TYPE))  {	  if(constructorType    ==    null    ||    constructorType.equals(UNKNOWN_TYPE))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
75	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType.equals(UNKNOWN_TYPE))  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType.equals(UNKNOWN_TYPE))  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType.equals(UNKNOWN_TYPE))  {	  if(constructorType    ==    null    ||    constructorType.equals(UNKNOWN_TYPE))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
76	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.equals(UNKNOWN_TYPE))  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.equals(UNKNOWN_TYPE))  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.equals(UNKNOWN_TYPE))  {	  if(constructorType    ==    null    ||    constructorType.equals(UNKNOWN_TYPE))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
77	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.equals(NO_TYPE))  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.equals(NO_TYPE))  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.equals(NO_TYPE))  {	  if(constructorType    ==    null    ||    constructorType.equals(UNKNOWN_TYPE))    {    	non-compiled	[CE]  ';'  expected	39	None	replace
78	[BUG]  [BUGGY]  JSType  constructorType  =  type.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  type.getJSType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  type.getJSType();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
79	[BUG]  [BUGGY]  JSType  constructorType  =  n.getJSType();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  n.getJSType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  n.getJSType();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
80	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getJSType();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  scope.getJSType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  scope.getJSType();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
81	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getConstructorType();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructor.getConstructorType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructor.getConstructorType();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
82	[BUG]  [BUGGY]  Node  constructorType  =  scope.getNext();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  scope.getNext();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  scope.getNext();	  Node    constructorType    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
83	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType!=  null  &&  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType!=  null  &&  constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType!=  null  &&  constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
84	[BUG]  [BUGGY]  if(constructorType  ==  null  &&  constructorType!=  null  &&  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType  ==  null  &&  constructorType!=  null  &&  constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType  ==  null  &&  constructorType!=  null  &&  constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
85	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
86	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isFunctionType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isFunctionType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isFunctionType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
87	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isNativeType())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isNativeType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isNativeType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
88	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isConstructor())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isConstructor())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isConstructor())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
89	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.canRestrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.canRestrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.canRestrictByNotNullOrUndefined())  {	  if(constructorType!=    null    ||    constructorType.isRestricted())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
90	[BUG]  [BUGGY]  if(constructorType!=  null  ||  constructorType.isFunction())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  ||  constructorType.isFunction())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  ||  constructorType.isFunction())  {	  if(constructorType!=    null    ||    constructorType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
91	[BUG]  [BUGGY]  if(constructorType!=  null  &&  type!=  null)  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  type!=  null)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  type!=  null)  {	  if(constructorType!=    null    &&    constructorType!=    null)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
92	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
93	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructor);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructor);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructor);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
94	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  getNativeType(TEMPLATE_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  getNativeType(TEMPLATE_TYPE);	  JSType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	13	None	replace
95	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.canRestrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.canRestrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.canRestrictByNotNullOrUndefined())  {	  if(constructorType!=    null    &&    constructorType.isRestricted())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
96	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.hasRestricted())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.hasRestricted())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.hasRestricted())  {	  if(constructorType!=    null    &&    constructorType.isRestricted())    {    	non-compiled	[CE]  ';'  expected	29	None	replace
97	[BUG]  [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType.toMaybeFunctionType());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(UNKNOWN_TYPE,  constructorType.toMaybeFunctionType());  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(UNKNOWN_TYPE,  constructorType.toMaybeFunctionType());	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
98	[BUG]  [BUGGY]  type  =  getNativeType(CONSTRUCTOR_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(CONSTRUCTOR_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(CONSTRUCTOR_TYPE);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
99	[BUG]  [BUGGY]  type  =  getNativeType(TEMPLATE_TYPE);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  type  =  getNativeType(TEMPLATE_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	type  =  getNativeType(TEMPLATE_TYPE);	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
100	[BUG]  [BUGGY]  Node  constructorType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  getNativeType(UNKNOWN_TYPE);	  Node    constructorType    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
101	[BUG]  [BUGGY]  Node  constructorType  =  constructor.getFirstChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  constructor.getFirstChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  constructor.getFirstChild();	  Node    constructorType    =    scope.getFirstChild();    	non-compiled	[CE]  ';'  expected	16	None	replace
102	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isInterface())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isInterface())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isInterface())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&!constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
103	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType  ==  null  &&  constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType  ==  null  &&  constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType  ==  null  &&  constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
104	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestrictedType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestrictedType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestrictedType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
105	[BUG]  [BUGGY]  Node  constructorType  =  type.getLastChild();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  type.getLastChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  type.getLastChild();	  Node    constructorType    =    n.getLastChild();    	non-compiled	[CE]  ';'  expected	15	None	replace
106	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined()  ||  constructorType.isRestrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined()  ||  constructorType.isRestrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined()  ||  constructorType.isRestrictByNotNullOrUndefined())  {	  if(constructorType!=    null    &&    constructorType.isRestrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
107	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined()  ||  getNativeType(UNKNOWN_TYPE)  ==  null)  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined()  ||  getNativeType(UNKNOWN_TYPE)  ==  null)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.isRestrictByNotNullOrUndefined()  ||  getNativeType(UNKNOWN_TYPE)  ==  null)  {	  if(constructorType!=    null    &&    constructorType.isRestrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
108	[BUG]  [BUGGY]  JSType  constructorType  =  context.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  context.restrictByNotNullOrUndefined();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  context.restrictByNotNullOrUndefined();	  JSType    constructorType    =    type.restrictByNotNullOrUndefined();    	non-compiled	[CE]  ';'  expected	14	None	replace
109	[BUG]  [BUGGY]  Node  constructor  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructor  =  n.removeFirstChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructor  =  n.removeFirstChild();	  Node    constructor    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	17	None	replace
110	[BUG]  [BUGGY]  JSType  constructorType  =  constructorType.toMaybeFunctionType();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructorType.toMaybeFunctionType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructorType.toMaybeFunctionType();	  JSType    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	18	None	replace
111	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toMainFunctionType();  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructor.toMainFunctionType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructor.toMainFunctionType();	  JSType    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	18	None	replace
112	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructorType);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
113	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructor);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructor);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE,  constructor);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
114	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(FUNCTION_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  FunctionType  constructorType  =  getNativeType(FUNCTION_TYPE);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	FunctionType  constructorType  =  getNativeType(FUNCTION_TYPE);	  FunctionType    constructorType    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	26	None	replace
115	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toRestrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructor.toRestrictByNotNullOrUndefined();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructor.toRestrictByNotNullOrUndefined();	  JSType    constructorType    =    constructor.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	37	None	replace
116	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toJavaType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructor.toJavaType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructor.toJavaType();	  JSType    constructorType    =    constructor.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	37	None	replace
117	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isAllType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.isAllType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.isAllType())  {	  if(constructorType!=    null    &&    constructorType.isNoType())    {    	non-compiled	[CE]  ';'  expected	30	None	replace
118	[BUG]  [BUGGY]  n.addChildToFront(type);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  n.addChildToFront(type);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	n.addChildToFront(type);	  n.removeChild(constructor);    	non-compiled	[CE]  ';'  expected	38	None	replace
119	[BUG]  [BUGGY]  n.removeChild(buildorType);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  n.removeChild(buildorType);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	n.removeChild(buildorType);	  n.removeChild(constructor);    	non-compiled	[CE]  ';'  expected	38	None	replace
120	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isUnionType())  {  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.isUnionType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.isUnionType())  {	  if(constructorType!=    null    &&    constructorType.isFunctionType())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
121	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isLocal())  {  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.isLocal())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.isLocal())  {	  if(constructorType!=    null    &&    constructorType.isFunctionType())    {    	non-compiled	[CE]  ';'  expected	5	None	replace
122	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isAll())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isAll())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isAll())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
123	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestricted())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestricted())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  constructorType.isRestricted())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	41	None	replace
124	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toLowerCase();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructor.toLowerCase();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructor.toLowerCase();	  JSType    constructorType    =    constructor.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	37	None	replace
125	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.toConstructorType();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructor.toConstructorType();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructor.toConstructorType();	  JSType    constructorType    =    constructor.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	37	None	replace
126	[BUG]  [BUGGY]  if(constructorType!=  null)  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null)  {  type  =  getNativeType(UNKNOWN_TYPE);  }  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null)  {  type  =  getNativeType(UNKNOWN_TYPE);  }	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
127	[BUG]  [BUGGY]  if(constructorType!=  null)  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  traverseNew(n,  scope);  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null)  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  traverseNew(n,  scope);  }  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null)  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  traverseNew(n,  scope);  }	  type    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	27	None	replace
128	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType  instanceof  FunctionType)  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType  instanceof  FunctionType)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType  instanceof  FunctionType)  {	  if(constructorType    ==    null    &&    constructorType    instanceof    FunctionType)    {    	non-compiled	[CE]  ';'  expected	9	None	replace
129	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType.isRestricted())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType.isRestricted())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType.isRestricted())  {	  if(constructorType!=    null    ||    constructorType.isRestricted())    {    	non-compiled	[CE]  ';'  expected	31	None	replace
130	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunctionPrototype())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType.isFunctionPrototype())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType.isFunctionPrototype())  {	  if(constructorType!=    null    &&    constructorType.isRestrictByNotNullOrUndefined())    {    	non-compiled	[CE]  ';'  expected	3	None	replace
131	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType.isUnknownType()  &&  constructorType.restrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType.isUnknownType()  &&  constructorType.restrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType.isUnknownType()  &&  constructorType.restrictByNotNullOrUndefined())  {	  if(constructorType!=    null    &&    buildorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
132	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType.isUnknownType()  ||  constructorType.restrictByNotNullOrUndefined())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType.isUnknownType()  ||  constructorType.restrictByNotNullOrUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType.isUnknownType()  ||  constructorType.restrictByNotNullOrUndefined())  {	  if(constructorType!=    null    &&    buildorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	43	None	replace
133	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  buildorType.isUnknownType())  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  buildorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  buildorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	32	None	replace
134	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  buildorType  instanceof  UnknownType)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  buildorType  instanceof  UnknownType)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType  instanceof  FunctionType  &&  buildorType  instanceof  UnknownType)  {	  if(constructorType!=    null    &&    constructorType    instanceof    FunctionType    ||    constructorType    instanceof    UnknownType)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
135	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType.isUndefined())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType.isUndefined())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType.isUndefined())  {	  if(constructorType!=    null    ||    constructorType.isUndefined())    {    	non-compiled	[CE]  ';'  expected	1	None	replace
136	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType!=  null)  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType!=  null)  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType!=  null)  {	  if(constructorType    ==    null    &&    constructorType!=    null)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
137	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  type.isUnknownType())  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  type.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  type.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType!=    null)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
138	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  buildorType.isUnknownType())  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&  buildorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&  buildorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType!=    null)    {    	non-compiled	[CE]  ';'  expected	24	None	replace
139	[BUG]  [BUGGY]  JSType  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructorType.restrictByNotNullOrUndefined();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructorType.restrictByNotNullOrUndefined();	  JSType    constructorType    =    type.toMaybeFunctionType();    	non-compiled	[CE]  ';'  expected	18	None	replace
140	[BUG]  [BUGGY]  n.removeChild(clazz);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  n.removeChild(clazz);  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	n.removeChild(clazz);	  n.removeChild(constructor);    	non-compiled	[CE]  ';'  expected	38	None	replace
141	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType.isNativeType())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType.isNativeType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType.isNativeType())  {	  if(constructorType!=    null    ||    constructorType.isNativeType())    {    	non-compiled	[CE]  ';'  expected	8	None	replace
142	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getParent();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  JSType  constructorType  =  constructor.getParent();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	JSType  constructorType  =  constructor.getParent();	  JSType    constructorType    =    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	28	None	replace
143	[BUG]  [BUGGY]  Node  constructorType  =  n.removeFirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  Node  constructorType  =  n.removeFirstChild();  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	Node  constructorType  =  n.removeFirstChild();	  Node    constructorType    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	12	None	replace
144	[BUG]  [BUGGY]  if(constructorType!=  null  &&  buildorType.isConstructor())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  buildorType.isConstructor())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  buildorType.isConstructor())  {	  if(constructorType!=    null    ||    constructorType.isConstructor())    {    	non-compiled	[CE]  ';'  expected	20	None	replace
145	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType  ==  null  &&!constructorType.isUnknownType())  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType  ==  null  &&!constructorType.isUnknownType())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType  ==  null  &&!constructorType.isUnknownType())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&!constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
146	[BUG]  [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isAll())  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);  JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;      [BUGGY]  if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isAll())  {  [BUGGY]      constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    ct  =  (FunctionType)  constructorType;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1041	1041	1	replace	if(constructorType!=  null  &&  constructorType!=  null  &&!constructorType.isAll())  {	  if(constructorType!=    null    &&    constructorType!=    null    &&!constructorType.isUnknownType())    {    	non-compiled	[CE]  ';'  expected	42	None	replace
