bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createTypeScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	22	None	replace
2	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTypeScope(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTypeScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTypeScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	22	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitTypeScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	22	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseBoolean(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBoolean(n,  scope).getJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBoolean(n,  scope).getJoinedFlowScope();	  scope    =    traverseBoolean(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
5	[BUG]  [BUGGY]  scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseBoolean(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
6	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
7	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getOwnerScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getOwnerScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getOwnerScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
8	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getFunctionScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getFunctionScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
9	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getBooleanLiteralSet();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getBooleanLiteralSet();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getBooleanLiteralSet();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
10	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildLitFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	60	None	replace
11	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildArrayScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildArrayScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildArrayScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	60	None	replace
12	[BUG]  [BUGGY]  scope  =  traverseObjECTLit(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjECTLit(n,  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjECTLit(n,  scope);	  scope    =    traverseObjECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	62	None	replace
13	[BUG]  [BUGGY]  scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope();	  scope    =    traverseObjECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	62	None	replace
14	[BUG]  [BUGGY]  scope  =  traverseObjECTLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjECTLit(n,  scope).getJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjECTLit(n,  scope).getJoinedFlowScope();	  scope    =    traverseObjECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	62	None	replace
15	[BUG]  [BUGGY]  scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	62	None	replace
16	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createJoinedFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createJoinedFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
17	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildBooleanScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
18	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildLitScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
19	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createEndFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createEndFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createEndFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	28	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createJoinedFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	28	None	replace
22	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildLitFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	54	None	replace
23	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTransientScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTransientScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTransientScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	54	None	replace
24	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildBitFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildBitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildBitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	54	None	replace
25	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildBooleanScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getFunctionScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getFunctionScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
28	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildTypeScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildTypeScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
29	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildObjectScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
30	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBooleanScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBooleanScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
31	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedExpressionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedExpressionScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedExpressionScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
32	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	18	None	replace
33	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	18	None	replace
34	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getFunctionScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getFunctionScope().createChildFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	18	None	replace
35	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByTypeScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
36	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeByLitScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeByLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeByLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
37	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildStringScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildStringScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildStringScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
38	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildIntScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildIntScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildIntScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByTypeScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
40	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildIntScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildIntScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildIntScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
41	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitScope(0);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitScope(0);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitScope(0);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
42	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
43	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  castType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getSyntacticScope(),  castType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getSyntacticScope(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getSyntacticScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
45	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getFunctionScope(),  castType);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getFunctionScope(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getFunctionScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
46	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  false);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  false);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  false);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
47	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getTypeFunctionScope(),  castType);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getTypeFunctionScope(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getTypeFunctionScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
48	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildLitScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
49	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
50	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildBooleanScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
51	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildTypeScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
52	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildFunctionScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildFunctionScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
53	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildArrayScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildArrayScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildArrayScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
54	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseLit(n,  scope).getJoinedFlowScope();	  scope    =    traverseLit(n,    scope);    	non-compiled	[CE]  ';'  expected	27	None	replace
55	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByteScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByteScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByteScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildEmbeddedScope();    	non-compiled	[CE]  ';'  expected	44	None	replace
56	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).createChildFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	17	None	replace
57	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).createJoinedFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).createJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).createJoinedFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	17	None	replace
58	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getFunctionScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getFunctionScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	17	None	replace
59	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	43	None	replace
60	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	43	None	replace
61	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildArrayScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildArrayScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildArrayScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	43	None	replace
62	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createObjectScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	43	None	replace
63	[BUG]  [BUGGY]  scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	43	None	replace
64	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	43	None	replace
65	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildLitFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedLitFlowScope();    	non-compiled	[CE]  ';'  expected	40	None	replace
66	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildLitFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedLitFlowScope();    	non-compiled	[CE]  ';'  expected	40	None	replace
67	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedLitFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createJoinedLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedLitFlowScope();    	non-compiled	[CE]  ';'  expected	40	None	replace
68	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOBJECTLIT());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOBJECTLIT());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOBJECTLIT());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
69	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectValues());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectValues());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObjectValues());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
70	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  true);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  true);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  true);	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
71	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  false);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  false);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  false);	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
72	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerLiteralSet());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerLiteralSet());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerLiteralSet());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
73	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiterals());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiterals());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanLiterals());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
74	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildBooleanScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFloatScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
75	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFlowScope());    	non-compiled	[CE]  ';'  expected	59	None	replace
76	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getSyntacticScope());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getSyntacticScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getSyntacticScope());	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFlowScope());    	non-compiled	[CE]  ';'  expected	59	None	replace
77	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getExpressionScope());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getExpressionScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getExpressionScope());	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFlowScope());    	non-compiled	[CE]  ';'  expected	59	None	replace
78	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
79	[BUG]  [BUGGY]  scope  =  traverseOther(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOther(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOther(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
80	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBind().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBind().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedBind().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedBase().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	57	None	replace
81	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedParameterTypes().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedParameterTypes().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedParameterTypes().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedBase().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	57	None	replace
82	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildBooleanScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedBase().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	57	None	replace
83	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
84	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
85	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getSyntacticScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getSyntacticScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope).getSyntacticScope();	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
86	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
87	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getScope();  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).getScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope).getScope();	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
88	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedFlowScope();	  scope    =    traverseObjLit(n,    scope);    	non-compiled	[CE]  ';'  expected	41	None	replace
89	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjLit(n,    scope);    	non-compiled	[CE]  ';'  expected	41	None	replace
90	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).createJoinedFunctionScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).createJoinedFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).createJoinedFunctionScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	19	None	replace
91	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	19	None	replace
92	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedObjectScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedObjectScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	19	None	replace
93	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	19	None	replace
94	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	46	None	replace
95	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(0);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(0);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(0);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	46	None	replace
96	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createObjectScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createObjectScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	38	None	replace
97	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildArrayScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildArrayScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildArrayScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	38	None	replace
98	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseLitLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope),    scope.getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
99	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createJoinedFlowScope());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createJoinedFlowScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createJoinedFlowScope());	  scope    =    traverseObjectLiteral(n,    scope.createChildFlowScope());    	non-compiled	[CE]  ';'  expected	49	None	replace
100	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getFunctionScope());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getFunctionScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getFunctionScope());	  scope    =    traverseObjectLiteral(n,    scope.createChildFlowScope());    	non-compiled	[CE]  ';'  expected	49	None	replace
101	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.createChildFlowScope());    	non-compiled	[CE]  ';'  expected	49	None	replace
102	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope  -  1);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope  -  1);	  scope    =    traverseOBJECTLIT(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	42	None	replace
103	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  +  1);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope  +  1);	  scope    =    traverseOBJECTLIT(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	42	None	replace
104	[BUG]  [BUGGY]  scope  =  traverseOBJECTLit(n,  scope  -  1);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLit(n,  scope  -  1);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLit(n,  scope  -  1);	  scope    =    traverseOBJECTLIT(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	42	None	replace
105	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  -  2);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  -  2);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope  -  2);	  scope    =    traverseOBJECTLIT(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	42	None	replace
106	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFunctionScope());    	non-compiled	[CE]  ';'  expected	12	None	replace
107	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getReturnScope());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getReturnScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getReturnScope());	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFunctionScope());    	non-compiled	[CE]  ';'  expected	12	None	replace
108	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLeastSuperclassScope());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLeastSuperclassScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getLeastSuperclassScope());	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFunctionScope());    	non-compiled	[CE]  ';'  expected	12	None	replace
109	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createTypeScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	34	None	replace
110	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedTypeScope().createChildTypeScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedTypeScope().createChildTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedTypeScope().createChildTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	34	None	replace
111	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeScope(scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	34	None	replace
112	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createJSTypeScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createJSTypeScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createJSTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	34	None	replace
113	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	47	None	replace
114	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseLit(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	47	None	replace
115	[BUG]  [BUGGY]  scope  =  traverseOther(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOther(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOther(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	47	None	replace
116	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildBooleanScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildBooleanScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	47	None	replace
117	[BUG]  [BUGGY]  scope  =  traverseOBJECTLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLit(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseOBJECTLit(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
118	[BUG]  [BUGGY]  scope  =  traverseOBJECTLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLit(n,  scope).getJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLit(n,  scope).getJoinedFlowScope();	  scope    =    traverseOBJECTLit(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
119	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBinaryFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBinaryFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBinaryFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBinaryFlowScope();    	non-compiled	[CE]  ';'  expected	61	None	replace
120	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBinaryFlowScope();    	non-compiled	[CE]  ';'  expected	61	None	replace
121	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBinaryFlowScope();    	non-compiled	[CE]  ';'  expected	61	None	replace
122	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryLitScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBinaryFlowScope();    	non-compiled	[CE]  ';'  expected	61	None	replace
123	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildArrayFlowScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildArrayFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildArrayFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBinaryFlowScope();    	non-compiled	[CE]  ';'  expected	61	None	replace
124	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObject(n,  scope).getJoinedFlowScope();	  scope    =    traverseObject(n,    scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
125	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObject(n,    scope);    	non-compiled	[CE]  ';'  expected	25	None	replace
126	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitOrientationScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitOrientationScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitOrientationScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildOrientationScope();    	non-compiled	[CE]  ';'  expected	21	None	replace
127	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildOrientationScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildOrientationScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildOrientationScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildOrientationScope();    	non-compiled	[CE]  ';'  expected	21	None	replace
128	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  scope.getJoinedFlowScope().createChildOrientationScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  scope.getJoinedFlowScope().createChildOrientationScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope),  scope.getJoinedFlowScope().createChildOrientationScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildOrientationScope();    	non-compiled	[CE]  ';'  expected	21	None	replace
129	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFunctionScope());    	non-compiled	[CE]  ';'  expected	51	None	replace
130	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getTypeFunctionScope());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getTypeFunctionScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getTypeFunctionScope());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFunctionScope());    	non-compiled	[CE]  ';'  expected	51	None	replace
131	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFunctionScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFunctionScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildArrayScope();    	non-compiled	[CE]  ';'  expected	20	None	replace
132	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getType());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getType());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getType());	  scope    =    traverseObjectLiteral(n,    scope.getObjectLit());    	non-compiled	[CE]  ';'  expected	58	None	replace
133	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getDeclaringClass());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getDeclaringClass());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getDeclaringClass());	  scope    =    traverseObjectLiteral(n,    scope.getObjectLit());    	non-compiled	[CE]  ';'  expected	58	None	replace
134	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwner());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwner());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwner());	  scope    =    traverseObjectLiteral(n,    scope.getObjectLit());    	non-compiled	[CE]  ';'  expected	58	None	replace
135	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLit());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLit());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getLit());	  scope    =    traverseObjectLiteral(n,    scope.getObjectLit());    	non-compiled	[CE]  ';'  expected	58	None	replace
136	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildOrientationScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildOrientationScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildOrientationScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	39	None	replace
137	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getScope());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getScope());	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
138	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
139	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedScope());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedScope());	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
140	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createTypeScope());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createTypeScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createTypeScope());	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
141	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedScope();	  scope    =    traverseObjectLit(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
142	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getOwnerScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getOwnerScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getOwnerScope();	  scope    =    traverseObjectLit(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
143	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getOBJECTLIT();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getOBJECTLIT();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getOBJECTLIT();	  scope    =    traverseObjectLit(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
144	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getExpressionScope();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getExpressionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getExpressionScope();	  scope    =    traverseObjectLit(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
145	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntacticScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntacticScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getSyntacticScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	29	None	replace
146	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJSDocInfo().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJSDocInfo().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJSDocInfo().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	29	None	replace
147	[BUG]  [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseLitLiteral(n,  scope).createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseLitLiteral(n,  scope).createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).createChildFlowScope();    	non-compiled	[CE]  ';'  expected	13	None	replace
148	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJoinedFunctionScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJoinedFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createJoinedFunctionScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	31	None	replace
149	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedFunctionScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createJoinedFunctionScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	15	None	replace
150	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope(),  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope(),  scope);	  scope    =    traverseObjectLit(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	53	None	replace
151	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.getBooleanValues());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope.getBooleanValues());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.getBooleanValues());	  scope    =    traverseObjectLit(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	53	None	replace
152	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.getOwnerScope());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope.getOwnerScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.getOwnerScope());	  scope    =    traverseObjectLit(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	53	None	replace
153	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.createObjectLitScope());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope.createObjectLitScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.createObjectLitScope());	  scope    =    traverseObjectLit(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	53	None	replace
154	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerValue());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerValue());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerValue());	  scope    =    traverseObjectLiteral(n,    scope.getLitValue());    	non-compiled	[CE]  ';'  expected	10	None	replace
155	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  BooleanLiteralSet.NONE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  BooleanLiteralSet.NONE);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  BooleanLiteralSet.NONE);	  scope    =    traverseObjectLiteral(n,    scope.getLitValue());    	non-compiled	[CE]  ';'  expected	10	None	replace
156	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValue());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValue());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanValue());	  scope    =    traverseObjectLiteral(n,    scope.getLitValue());    	non-compiled	[CE]  ';'  expected	10	None	replace
157	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue()  +  1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue()  +  1);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getLitValue()  +  1);	  scope    =    traverseObjectLiteral(n,    scope.getLitValue());    	non-compiled	[CE]  ';'  expected	10	None	replace
158	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOBJECTLitScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOBJECTLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOBJECTLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	33	None	replace
159	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOperatorScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOperatorScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOperatorScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	33	None	replace
160	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOwnScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOwnScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createOwnScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	33	None	replace
161	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  toBooleanOutcomes);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  toBooleanOutcomes);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  toBooleanOutcomes);	  scope    =    traverseObjectLiteral(n,    scope.getBooleanValues());    	non-compiled	[CE]  ';'  expected	11	None	replace
162	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  true);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  true);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  true);	  scope    =    traverseObjectLiteral(n,    scope.getBooleanValues());    	non-compiled	[CE]  ';'  expected	11	None	replace
163	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  false);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  false);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  false);	  scope    =    traverseObjectLiteral(n,    scope.getBooleanValues());    	non-compiled	[CE]  ';'  expected	11	None	replace
164	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getDoubleValues());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getDoubleValues());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getDoubleValues());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanValues());    	non-compiled	[CE]  ';'  expected	11	None	replace
165	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerValues());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerValues());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerValues());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanValues());    	non-compiled	[CE]  ';'  expected	11	None	replace
166	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope(0);    	non-compiled	[CE]  ';'  expected	24	None	replace
167	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(1);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(1);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(1);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope(0);    	non-compiled	[CE]  ';'  expected	24	None	replace
168	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(2);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(2);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(2);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope(0);    	non-compiled	[CE]  ';'  expected	24	None	replace
169	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(3);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(3);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(3);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope(0);    	non-compiled	[CE]  ';'  expected	24	None	replace
170	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeBooleanScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBooleanScope();    	non-compiled	[CE]  ';'  expected	35	None	replace
171	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createBooleanScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBooleanScope();    	non-compiled	[CE]  ';'  expected	35	None	replace
172	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBooleanScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBooleanScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBooleanScope();    	non-compiled	[CE]  ';'  expected	35	None	replace
173	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope(),  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
174	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
175	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
176	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanValues(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
177	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedExpressionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedExpressionScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedExpressionScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedInputScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	56	None	replace
178	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedOutputScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedOutputScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedOutputScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedInputScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	56	None	replace
179	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedOutcome().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedOutcome().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedOutcome().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedInputScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	56	None	replace
180	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).createChildFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
181	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createObjectScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).createObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
182	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createObjectFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createObjectFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).createObjectFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
183	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getOwnerFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getOwnerFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getOwnerFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
184	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  true);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  true);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  true);	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
185	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope.createObjectScope());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope.createObjectScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope.createObjectScope());	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
186	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  castType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
187	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectLitScope());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectLitScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createObjectLitScope());	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
188	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  this);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  this);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  this);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
189	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJSDocInfo(),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJSDocInfo(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJSDocInfo(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
190	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  true);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  true);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  true);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
191	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjLit(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseObjLit(n,    scope);    	non-compiled	[CE]  ';'  expected	41	None	replace
192	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).createObjectLit();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope).createObjectLit();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope).createObjectLit();	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
193	[BUG]  [BUGGY]  Scope  scope  =  traverseOBJECTLIT(n,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseOBJECTLIT(n,  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseOBJECTLIT(n,  scope);	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
194	[BUG]  [BUGGY]  Scope  scope  =  traverseOBJECTLit(n,  scope);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseOBJECTLit(n,  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseOBJECTLit(n,  scope);	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
195	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  castType);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.createChildFlowScope());    	non-compiled	[CE]  ';'  expected	49	None	replace
196	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  false);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  false);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  false);	  scope    =    traverseObjectLiteral(n,    scope.createChildFlowScope());    	non-compiled	[CE]  ';'  expected	49	None	replace
197	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildThroughScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildThroughScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildThroughScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	22	None	replace
198	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildDeclarationScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildDeclarationScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildDeclarationScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	22	None	replace
199	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  castType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFunctionScope());    	non-compiled	[CE]  ';'  expected	12	None	replace
200	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  syntacticScope);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  syntacticScope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  syntacticScope);	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFunctionScope());    	non-compiled	[CE]  ';'  expected	12	None	replace
201	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObject());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObject());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObject());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanValues());    	non-compiled	[CE]  ';'  expected	11	None	replace
202	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLitValues());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLitValues());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObjectLitValues());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanValues());    	non-compiled	[CE]  ';'  expected	11	None	replace
203	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOBJECTLITValues());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOBJECTLITValues());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOBJECTLITValues());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanValues());    	non-compiled	[CE]  ';'  expected	11	None	replace
204	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjLitScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
205	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByOwnerScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByOwnerScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByOwnerScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
206	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildWithLitScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildWithLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildWithLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
207	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  syntacticScope.getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  syntacticScope.getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope),  syntacticScope.getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope),    scope.getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
208	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  functionScope.getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  functionScope.getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope),  functionScope.getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope),    scope.getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	5	None	replace
209	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createObjectScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
210	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getOBJECTLIT();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getOBJECTLIT();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getOBJECTLIT();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
211	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
212	[BUG]  [BUGGY]  scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	47	None	replace
213	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObject(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	47	None	replace
214	[BUG]  [BUGGY]  scope  =  traverseObjectJECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectJECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectJECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	47	None	replace
215	[BUG]  [BUGGY]  scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	47	None	replace
216	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectLitFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	60	None	replace
217	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBinaryScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBinaryScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitBinaryScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	60	None	replace
218	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedScope().createChildFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
219	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTLIT();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTLIT();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTLIT();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildBinaryFlowScope();    	non-compiled	[CE]  ';'  expected	61	None	replace
220	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLiteral());  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLiteral());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObjectLiteral());	  scope    =    traverseObjectLiteral(n,    scope.getObjectLit());    	non-compiled	[CE]  ';'  expected	58	None	replace
221	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLit(),  castType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLit(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObjectLit(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getObjectLit());    	non-compiled	[CE]  ';'  expected	58	None	replace
222	[BUG]  [BUGGY]  scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	43	None	replace
223	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createChildObjectScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).createChildObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
224	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createOptScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createOptScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).createOptScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
225	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(0);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(0);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(0);	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	38	None	replace
226	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createOBJECTLIT();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createOBJECTLIT();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createOBJECTLIT();	  scope    =    traverseObjectLiteral(n,    scope).createJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
227	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	54	None	replace
228	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.createChildFlowScope());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope.createChildFlowScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.createChildFlowScope());	  scope    =    traverseObjectLit(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	53	None	replace
229	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.createObjectScope());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope.createObjectScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.createObjectScope());	  scope    =    traverseObjectLit(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	53	None	replace
230	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjLitScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
231	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjectScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
232	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjectLitScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjectLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByObjectLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
233	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByOwnerScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByOwnerScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByOwnerScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
234	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildWithLitScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildWithLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildWithLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
235	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLiteralSet());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLiteralSet());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObjectLiteralSet());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
236	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedLit());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedLit());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedLit());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
237	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildEmbeddedScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildEmbeddedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildEmbeddedScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
238	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildByteScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildByteScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildByteScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
239	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createObjectFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createObjectFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createObjectFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	28	None	replace
240	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createObjectScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createObjectScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	28	None	replace
241	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildObjectScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createChildObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	15	None	replace
242	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByteScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByteScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByteScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildArrayScope();    	non-compiled	[CE]  ';'  expected	20	None	replace
243	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildEmbeddedScope();    	non-compiled	[CE]  ';'  expected	44	None	replace
244	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildExpsScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildExpsScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildExpsScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildEmbeddedScope();    	non-compiled	[CE]  ';'  expected	44	None	replace
245	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope(),  castType);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFlowScope());    	non-compiled	[CE]  ';'  expected	59	None	replace
246	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildLitScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	33	None	replace
247	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope(0);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope(0);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope(0);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedLitFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	55	None	replace
248	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJSDocInfo().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJSDocInfo().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJSDocInfo().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
249	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildEmbeddedScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildEmbeddedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildEmbeddedScope();	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
250	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildEmbeddedScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildEmbeddedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildEmbeddedScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
251	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBinaryScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBinaryScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBinaryScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
252	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	19	None	replace
253	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).createChildObjectScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).createChildObjectScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	19	None	replace
254	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildLitFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
255	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildEmbeddedScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildEmbeddedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildEmbeddedScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
256	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(functionScope);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(functionScope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(functionScope);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope(0);    	non-compiled	[CE]  ';'  expected	24	None	replace
257	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(false);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(false);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(false);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope(0);    	non-compiled	[CE]  ';'  expected	24	None	replace
258	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	17	None	replace
259	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getOBJECTLIT();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getOBJECTLIT();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getOBJECTLIT();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	17	None	replace
260	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getInitialValue());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getInitialValue());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getInitialValue());	  scope    =    traverseObjectLiteral(n,    scope.getLitValue());    	non-compiled	[CE]  ';'  expected	10	None	replace
261	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildLitScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedBase().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	57	None	replace
262	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildEmbeddedScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildEmbeddedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildEmbeddedScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedBase().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	57	None	replace
263	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  syntacticScope.getJoinedFlowScope().createChildFloatScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  syntacticScope.getJoinedFlowScope().createChildFloatScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope),  syntacticScope.getJoinedFlowScope().createChildFloatScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFloatScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
264	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildFloatScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildFloatScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildFloatScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFloatScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
265	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedScope().createChildFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	18	None	replace
266	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildEmbeddedScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildEmbeddedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildEmbeddedScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	18	None	replace
267	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedOutcomeScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedOutcomeScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedOutcomeScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedInputScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	56	None	replace
268	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildLitScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedInputScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	56	None	replace
269	[BUG]  [BUGGY]  scope  =  traverseObjECTLIT(n,  scope  -  1);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjECTLIT(n,  scope  -  1);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjECTLIT(n,  scope  -  1);	  scope    =    traverseOBJECTLIT(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	42	None	replace
270	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  -  1  +  1);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  -  1  +  1);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope  -  1  +  1);	  scope    =    traverseOBJECTLIT(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	42	None	replace
271	[BUG]  [BUGGY]  scope  =  traverseObjectLIT(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLIT(n,  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLIT(n,  scope);	  scope    =    traverseObjECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	62	None	replace
272	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildValueScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildValueScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildValueScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	34	None	replace
273	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFunctionScope().createChildObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	36	None	replace
274	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  true);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  true);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType,  true);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
275	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJSType(),  castType);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJSType(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJSType(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
276	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getTypeOfThis(),  castType);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getTypeOfThis(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getTypeOfThis(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
277	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType  +  1);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType  +  1);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType  +  1);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
278	[BUG]  [BUGGY]  scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseBoolean(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
279	[BUG]  [BUGGY]  scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBoolean(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseBoolean(n,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
280	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  castType);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFunctionScope());    	non-compiled	[CE]  ';'  expected	51	None	replace
281	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  syntacticScope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  syntacticScope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  syntacticScope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFunctionScope());    	non-compiled	[CE]  ';'  expected	51	None	replace
282	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedLitScope());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedLitScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedLitScope());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFunctionScope());    	non-compiled	[CE]  ';'  expected	51	None	replace
283	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope.cloneTree());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope.cloneTree());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope.cloneTree());	  scope    =    traverseOBJECTLIT(n,    scope    -    1);    	non-compiled	[CE]  ';'  expected	42	None	replace
284	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(scope);	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	38	None	replace
285	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	39	None	replace
286	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitMapScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitMapScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitMapScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildTypeScope();    	non-compiled	[CE]  ';'  expected	34	None	replace
287	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLiterals());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLiterals());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObjectLiterals());	  scope    =    traverseObjectLiteral(n,    scope.getBooleanLiteralSet());    	non-compiled	[CE]  ';'  expected	9	None	replace
288	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	46	None	replace
289	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildObjectScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	46	None	replace
290	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getNativeType(OBJECTLIT_TYPE));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getNativeType(OBJECTLIT_TYPE));  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getNativeType(OBJECTLIT_TYPE));	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFunctionScope());    	non-compiled	[CE]  ';'  expected	51	None	replace
291	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  true);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  true);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope(),  true);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFunctionScope());    	non-compiled	[CE]  ';'  expected	51	None	replace
292	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createSyntacticScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createSyntacticScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createSyntacticScope();	  scope    =    traverseObjectLit(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
293	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getOwnSyntacticScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getOwnSyntacticScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getOwnSyntacticScope();	  scope    =    traverseObjectLit(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
294	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntheticScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntheticScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getSyntheticScope();	  scope    =    traverseObjectLit(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	30	None	replace
295	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTLITFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTLITFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildOBJECTLITFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	60	None	replace
296	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjectScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
297	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjectLitScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjectLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByObjectLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
298	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildbyLitScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildbyLitScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildbyLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
299	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByOperatorScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByOperatorScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByOperatorScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	48	None	replace
300	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildLitFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildLitFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	18	None	replace
301	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	18	None	replace
302	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	18	None	replace
303	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildOBJECTLIT();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildOBJECTLIT();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildOBJECTLIT();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildOrientationScope();    	non-compiled	[CE]  ';'  expected	21	None	replace
304	[BUG]  [BUGGY]  scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
305	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getActualValue());  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getActualValue());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getActualValue());	  scope    =    traverseObjectLiteral(n,    scope.getLitValue());    	non-compiled	[CE]  ';'  expected	10	None	replace
306	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  BooleanLiteralSet.DEFAULT);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  BooleanLiteralSet.DEFAULT);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getLitValue(),  BooleanLiteralSet.DEFAULT);	  scope    =    traverseObjectLiteral(n,    scope.getLitValue());    	non-compiled	[CE]  ';'  expected	10	None	replace
307	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFunctionScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFunctionScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedLitFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	55	None	replace
308	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFloatScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFloatScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFloatScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedLitFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	55	None	replace
309	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFlowScope(scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFlowScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFlowScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
310	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFloatScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFloatScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFloatScope();	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
311	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo();	  scope    =    traverseObjectLiteral(n,    scope).getJSDocInfo().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
312	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLit(),  BooleanLiteralSet.NONE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLit(),  BooleanLiteralSet.NONE);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObjectLit(),  BooleanLiteralSet.NONE);	  scope    =    traverseObjectLiteral(n,    scope.getObjectLit());    	non-compiled	[CE]  ';'  expected	58	None	replace
313	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.toObjectLit());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.toObjectLit());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.toObjectLit());	  scope    =    traverseObjectLiteral(n,    scope.getObjectLit());    	non-compiled	[CE]  ';'  expected	58	None	replace
314	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  BooleanLiteralSet.NONE);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  BooleanLiteralSet.NONE);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  BooleanLiteralSet.NONE);	  scope    =    traverseObjectLiteral(n,    scope.createChildFlowScope());    	non-compiled	[CE]  ';'  expected	49	None	replace
315	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  BooleanLiteralSet.EMPTY);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  BooleanLiteralSet.EMPTY);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope(),  BooleanLiteralSet.EMPTY);	  scope    =    traverseObjectLiteral(n,    scope.createChildFlowScope());    	non-compiled	[CE]  ';'  expected	49	None	replace
316	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedByteFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedByteFlowScope().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedByteFlowScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	29	None	replace
317	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedBase().createChildFlowScope();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedBase().createChildFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedBase().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	29	None	replace
318	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.getOwnerFlowScope());  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope.getOwnerFlowScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.getOwnerFlowScope());	  scope    =    traverseObjectLit(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	53	None	replace
319	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.getObjectLit());  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope.getObjectLit());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.getObjectLit());	  scope    =    traverseObjectLit(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	53	None	replace
320	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedByteFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedByteFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createJoinedByteFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).createJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
321	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createJoinedScope();	  scope    =    traverseObjectLiteral(n,    scope).createJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	14	None	replace
322	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFlowScope(scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFlowScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFlowScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
323	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFloatScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFloatScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFloatScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	6	None	replace
324	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildFlowScope(scope);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildFlowScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildFlowScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedInputScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	56	None	replace
325	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildLitFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedInputScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	56	None	replace
326	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  STRING_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  STRING_LITERAL_UNDEFINED_THIS);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  STRING_LITERAL_UNDEFINED_THIS);	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFunctionScope());    	non-compiled	[CE]  ';'  expected	12	None	replace
327	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  true);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  true);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  true);	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFunctionScope());    	non-compiled	[CE]  ';'  expected	12	None	replace
328	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  false);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  false);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope(),  false);	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFunctionScope());    	non-compiled	[CE]  ';'  expected	12	None	replace
329	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByOBJECTLITScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByOBJECTLITScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByOBJECTLITScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildByLitScope();    	non-compiled	[CE]  ';'  expected	45	None	replace
330	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getOBJECTLITFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getOBJECTLITFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getOBJECTLITFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedLitFlowScope();    	non-compiled	[CE]  ';'  expected	40	None	replace
331	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBinaryFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBinaryFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildBinaryFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
332	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildArrayScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildArrayScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildArrayScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	37	None	replace
333	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildFloatScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildFloatScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildFloatScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFloatScope();    	non-compiled	[CE]  ';'  expected	23	None	replace
334	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildFlowScope(scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildFlowScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildFlowScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedBase().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	57	None	replace
335	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildLitFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedBase().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	57	None	replace
336	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope());  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope());	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
337	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope.getJSDocInfo());  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope.getJSDocInfo());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope.getJSDocInfo());	  Scope    scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	26	None	replace
338	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildExpsScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildExpsScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildExpsScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	32	None	replace
339	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitMapScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitMapScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitMapScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildArrayScope();    	non-compiled	[CE]  ';'  expected	20	None	replace
340	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitArrayScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitArrayScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitArrayScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildArrayScope();    	non-compiled	[CE]  ';'  expected	20	None	replace
341	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitStreamScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitStreamScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitStreamScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildArrayScope();    	non-compiled	[CE]  ';'  expected	20	None	replace
342	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(n);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(n);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(n);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope(0);    	non-compiled	[CE]  ';'  expected	24	None	replace
343	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createChildObjectFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).createChildObjectFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).createChildObjectFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
344	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJSFlowScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJSFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createJSFlowScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	28	None	replace
345	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getObjectFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getObjectFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getObjectFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	17	None	replace
346	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createChildObjectScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createChildObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createChildObjectScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	31	None	replace
347	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createChildFunctionScope();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createChildFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createChildFunctionScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	31	None	replace
348	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJoinedScope();  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLit(n,  scope).createJoinedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).createJoinedScope();	  scope    =    traverseObjectLit(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	31	None	replace
349	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getObjectScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getObjectScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getObjectScope();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	19	None	replace
350	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitValues();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitValues();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedLitValues();	  scope    =    traverseBooleanLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	19	None	replace
351	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createSyntacticScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createSyntacticScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createSyntacticScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
352	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntheticScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntheticScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntheticScope();	  scope    =    traverseObjectLiteral(n,    scope).getSyntacticScope();    	non-compiled	[CE]  ';'  expected	16	None	replace
353	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerScope());  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerScope());	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFlowScope());    	non-compiled	[CE]  ';'  expected	59	None	replace
354	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLeastSupertype(n.getType()));  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLeastSupertype(n.getType()));  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getLeastSupertype(n.getType()));	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFlowScope());    	non-compiled	[CE]  ';'  expected	59	None	replace
355	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerByteFlowScope());  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerByteFlowScope());  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerByteFlowScope());	  scope    =    traverseObjectLiteral(n,    scope.getOwnerFlowScope());    	non-compiled	[CE]  ';'  expected	59	None	replace
356	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectLitFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectLitFlowScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitFlowScope();    	non-compiled	[CE]  ';'  expected	54	None	replace
357	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildEmbeddedScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildEmbeddedScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildEmbeddedScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildEmbeddedScope();    	non-compiled	[CE]  ';'  expected	44	None	replace
358	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  STRING_LITERAL_UNDEFINED_THIS);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  STRING_LITERAL_UNDEFINED_THIS);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  STRING_LITERAL_UNDEFINED_THIS);	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
359	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  BooleanLiteralSet.EMPTY);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  BooleanLiteralSet.EMPTY);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  BooleanLiteralSet.EMPTY);	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
360	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  BooleanLiteralSet.NONE);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  BooleanLiteralSet.NONE);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createObjectScope(),  BooleanLiteralSet.NONE);	  scope    =    traverseObjectLiteral(n,    scope.createObjectScope());    	non-compiled	[CE]  ';'  expected	50	None	replace
361	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObject(),  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObject(),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObject(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
362	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getNativeType(OBJECTLIT_TYPE),  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getNativeType(OBJECTLIT_TYPE),  scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getNativeType(OBJECTLIT_TYPE),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    scope);    	non-compiled	[CE]  ';'  expected	8	None	replace
363	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope(0);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope(0);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope(0);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	33	None	replace
364	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope(scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope(scope);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope(scope);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	36	None	replace
365	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope(0);  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope(0);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope(0);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildObjectScope();    	non-compiled	[CE]  ';'  expected	36	None	replace
366	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildFunctionScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildFunctionScope();  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createChildFunctionScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope();    	non-compiled	[CE]  ';'  expected	15	None	replace
367	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getType(),  castType);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:      [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getType(),  castType);  [BUGGY]      break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getType(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope(),    castType);    	non-compiled	[CE]  ';'  expected	52	None	replace
