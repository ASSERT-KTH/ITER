bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
2	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
3	[BUG]  [BUGGY]  scope  =  traverseOBJECTLit(n,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseOBJECTLit(n,  scope);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLit(n,  scope);	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
4	[BUG]  [BUGGY]  scope  =  traverseBoolean(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseBoolean(n,  scope);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBoolean(n,  scope);	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
5	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  scope.getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope),  scope.getJoinedFlowScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope),  scope.getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
6	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFlowScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
7	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJSDocInfo().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
8	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  scope);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  scope);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
9	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanLiteralSet());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
10	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getLitValue());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getLitValue());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
11	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getBooleanValues());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getBooleanValues());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
12	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFunctionScope());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
13	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildFlowScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
14	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).createJoinedFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).createJoinedFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
15	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
16	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getSyntacticScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
17	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
18	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
19	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFunctionScope();	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildArrayScope();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildArrayScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildArrayScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildOrientationScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildOrientationScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildOrientationScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
22	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTypeScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTypeScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFloatScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFloatScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildFloatScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
24	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(0);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(0);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitScope(0);	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
25	[BUG]  [BUGGY]  scope  =  traverseObject(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObject(n,  scope);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObject(n,  scope);	      	non-compiled	[CE]  ';'  expected	6	None	replace
26	[BUG]  [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  Scope  scope  =  traverseObjectLit(n,  scope);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	Scope  scope  =  traverseObjectLit(n,  scope);	      	non-compiled	[CE]  ';'  expected	6	None	replace
27	[BUG]  [BUGGY]  scope  =  traverseLit(n,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseLit(n,  scope);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseLit(n,  scope);	      	non-compiled	[CE]  ';'  expected	6	None	replace
28	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope();	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
29	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFlowScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
30	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntacticScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLit(n,  scope).getSyntacticScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getSyntacticScope();	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
31	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope();	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
32	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
33	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
34	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeScope();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildTypeScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
35	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBooleanScope();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBooleanScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBooleanScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
36	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
37	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope).getJoinedFunctionScope().createChildFlowScope();	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
38	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
39	[BUG]  [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseBooleanLiteral(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseBooleanLiteral(n,    scope);    	non-compiled	[CE]  ';'  expected	9	None	replace
40	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope();    	non-compiled	[CE]  ';'  expected	2	None	replace
41	[BUG]  [BUGGY]  scope  =  traverseObjLit(n,  scope);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjLit(n,  scope);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjLit(n,  scope);	      	non-compiled	[CE]  ';'  expected	6	None	replace
42	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  -  1);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope  -  1);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope  -  1);	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
43	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
44	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildEmbeddedScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildEmbeddedScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildEmbeddedScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
45	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByLitScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByLitScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildByLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
46	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildObjectScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
47	[BUG]  [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseOBJECTLIT(n,  scope).getJoinedFlowScope().createChildLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
48	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildByLitScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildLitScope();    	non-compiled	[CE]  ';'  expected	7	None	replace
49	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createChildFlowScope());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
50	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.createObjectScope());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.createObjectScope());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
51	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFunctionScope());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
52	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getJoinedFlowScope(),  castType);	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
53	[BUG]  [BUGGY]  scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLit(n,  scope.getJoinedFlowScope());	  scope    =    traverseObjectLit(n,    scope);    	non-compiled	[CE]  ';'  expected	5	None	replace
54	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitFlowScope();  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFlowScope().createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
55	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedLitFlowScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
56	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedInputScope().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
57	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedBase().createChildFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFlowScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	1	None	replace
58	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLit());  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getObjectLit());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getObjectLit());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope());  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope.getOwnerFlowScope());	  scope    =    traverseObjectLiteral(n,    scope.getJoinedFlowScope());    	non-compiled	[CE]  ';'  expected	8	None	replace
60	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitFlowScope();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildLitFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
61	[BUG]  [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryFlowScope();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryFlowScope();  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjectLiteral(n,  scope).getJoinedFunctionScope().createChildBinaryFlowScope();	  scope    =    traverseObjectLiteral(n,    scope).getJoinedFunctionScope().createChildFlowScope();    	non-compiled	[CE]  ';'  expected	4	None	replace
62	[BUG]  [BUGGY]  scope  =  traverseObjECTLIT(n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    case  Token.OR:  scope  =  traverseOr(n,  scope).getJoinedFlowScope()  .createChildFlowScope();  break;  case  Token.HOOK:  scope  =  traverseHook(n,  scope);  break;  case  Token.OBJECTLIT:    [BUGGY]  scope  =  traverseObjECTLIT(n,  scope);  [BUGGY]    break;  case  Token.CALL:  scope  =  traverseCall(n,  scope);  break;  case  Token.NEW:  scope  =  traverseNew(n,  scope);  break;  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverse  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  castType  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  n  BooleanLiteralSet  booleanValues  toBooleanOutcomes  JSDocInfo  info  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.2773500981126146	280	280	1	replace	scope  =  traverseObjECTLIT(n,  scope);	  scope    =    traverseOBJECTLIT(n,    scope);    	non-compiled	[CE]  ';'  expected	3	None	replace
