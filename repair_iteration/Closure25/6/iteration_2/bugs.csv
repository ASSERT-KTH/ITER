bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  scope.getNativeType(UNKNOWN_TYPE);	  JSType    constructorType    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	3	None	replace
2	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getConstructorType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  scope.getConstructorType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  scope.getConstructorType();	  JSType    constructorType    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	3	None	replace
3	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getConstructor();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  scope.getConstructor();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  scope.getConstructor();	  JSType    constructorType    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	3	None	replace
4	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getNodeType();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  scope.getNodeType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  scope.getNodeType();	  JSType    constructorType    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	3	None	replace
5	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getParent();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  scope.getParent();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  scope.getParent();	  JSType    constructorType    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	3	None	replace
6	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  scope  :  constructor.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  scope  :  constructor.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  scope  :  constructor.getJSType();	  JSType    constructorType    =    constructor    ==    null?    scope    :    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
7	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope  :  context.getJSType();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope  :  context.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  scope  :  context.getJSType();	  JSType    constructorType    =    constructor    ==    null?    scope    :    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
8	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  context.getJSType()  :  null;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  context.getJSType()  :  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  context.getJSType()  :  null;	  JSType    constructorType    =    constructor!=    null?    context.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	10	None	replace
9	[BUG]  [BUGGY]  JSType  constructorType  =  context!=  null?  context.getJSType()  :  null;  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  context!=  null?  context.getJSType()  :  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  context!=  null?  context.getJSType()  :  null;	  JSType    constructorType    =    constructor!=    null?    context.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	10	None	replace
10	[BUG]  [BUGGY]  JSType  constructorType  =  context  ==  null?  context.getJSType()  :  null;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  context  ==  null?  context.getJSType()  :  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  context  ==  null?  context.getJSType()  :  null;	  JSType    constructorType    =    constructor!=    null?    context.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	10	None	replace
11	[BUG]  [BUGGY]  JSType  constructorType  =  n.getFirstChild();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  n.getFirstChild();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  n.getFirstChild();	  JSType    constructorType    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
12	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getLastChild();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor.getLastChild();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor.getLastChild();	  JSType    constructorType    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
13	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getNext();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor.getNext();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor.getNext();	  JSType    constructorType    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
14	[BUG]  [BUGGY]  JSType  constructorType  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  scope.getFirstChild();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  scope.getFirstChild();	  JSType    constructorType    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
15	[BUG]  [BUGGY]  Node  constructor  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  Node  constructor  =  n.getFirstChild();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	Node  constructor  =  n.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
16	[BUG]  [BUGGY]  Node  constructor  =  n.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  Node  constructor  =  n.getLastChild();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	Node  constructor  =  n.getLastChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
17	[BUG]  [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	FunctionType  constructorType  =  getNativeType(UNKNOWN_TYPE);	      	non-compiled	[CE]  ';'  expected	7	None	replace
18	[BUG]  [BUGGY]  Scope  constructor  =  scope.getScope();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  Scope  constructor  =  scope.getScope();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	Scope  constructor  =  scope.getScope();	      	non-compiled	[CE]  ';'  expected	7	None	replace
19	[BUG]  [BUGGY]  Node  constructor  =  n.getNext();  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  Node  constructor  =  n.getNext();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	Node  constructor  =  n.getNext();	      	non-compiled	[CE]  ';'  expected	7	None	replace
20	[BUG]  [BUGGY]  scope  =  traverse(constructor,  scope);  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  scope  =  traverse(constructor,  scope);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	scope  =  traverse(constructor,  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
21	[BUG]  [BUGGY]  Scope  scope  =  traverse(constructor,  scope);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  Scope  scope  =  traverse(constructor,  scope);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	Scope  scope  =  traverse(constructor,  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
22	[BUG]  [BUGGY]  JSType  constructorType  =  n.getFirstChild().getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  n.getFirstChild().getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  n.getFirstChild().getJSType();	  JSType    constructorType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
23	[BUG]  [BUGGY]  FunctionType  constructorType  =  constructor.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  FunctionType  constructorType  =  constructor.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	FunctionType  constructorType  =  constructor.getJSType();	  JSType    constructorType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
24	[BUG]  [BUGGY]  JSType  constructorType  =  context.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  context.getNativeType(UNKNOWN_TYPE);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  context.getNativeType(UNKNOWN_TYPE);	  JSType    constructorType    =    constructor.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	1	None	replace
25	[BUG]  [BUGGY]  JSType  constructorType  =  n.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  n.getNativeType(UNKNOWN_TYPE);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  n.getNativeType(UNKNOWN_TYPE);	  JSType    constructorType    =    constructor.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	1	None	replace
26	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE)+  1;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE)+  1;	  JSType    constructorType    =    constructor.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	1	None	replace
27	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE,  n);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE,  n);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor.getNativeType(UNKNOWN_TYPE,  n);	  JSType    constructorType    =    constructor.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	1	None	replace
28	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope.getJSType()  :  null;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope.getJSType()  :  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  scope.getJSType()  :  null;	  JSType    constructorType    =    constructor!=    null?    scope.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	12	None	replace
29	[BUG]  [BUGGY]  JSType  constructorType  =  scope!=  null?  constructor.getJSType()  :  null;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  scope!=  null?  constructor.getJSType()  :  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  scope!=  null?  constructor.getJSType()  :  null;	  JSType    constructorType    =    constructor!=    null?    scope.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	12	None	replace
30	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope.getConstructorType()  :  null;  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope.getConstructorType()  :  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  scope.getConstructorType()  :  null;	  JSType    constructorType    =    constructor!=    null?    scope.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	12	None	replace
31	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  scope.getConstructorType()  :  null;  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  scope.getConstructorType()  :  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  scope.getConstructorType()  :  null;	  JSType    constructorType    =    constructor!=    null?    scope.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	12	None	replace
32	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getComponentType();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor.getComponentType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor.getComponentType();	  JSType    constructorType    =    constructor.getParent();    	non-compiled	[CE]  ';'  expected	5	None	replace
33	[BUG]  [BUGGY]  JSType  constructorType  =  n.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  n.getConstructor();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  n.getConstructor();	  JSType    constructorType    =    constructor.getConstructor();    	non-compiled	[CE]  ';'  expected	6	None	replace
34	[BUG]  [BUGGY]  JSType  constructorType  =  context.getConstructor();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  context.getConstructor();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  context.getConstructor();	  JSType    constructorType    =    constructor.getConstructor();    	non-compiled	[CE]  ';'  expected	6	None	replace
35	[BUG]  [BUGGY]  JSType  constructorType  =  n.getConstructorType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  n.getConstructorType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  n.getConstructorType();	  JSType    constructorType    =    constructor.getConstructorType();    	non-compiled	[CE]  ';'  expected	4	None	replace
36	[BUG]  [BUGGY]  JSType  constructorType  =  context.getConstructorType();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  context.getConstructorType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  context.getConstructorType();	  JSType    constructorType    =    constructor.getConstructorType();    	non-compiled	[CE]  ';'  expected	4	None	replace
37	[BUG]  [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  getNativeType(UNKNOWN_TYPE);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  getNativeType(UNKNOWN_TYPE);	  JSType    constructorType    =    constructor.getConstructorType();    	non-compiled	[CE]  ';'  expected	4	None	replace
38	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  null  :  constructor.getConstructor();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  null  :  constructor.getConstructor();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  null  :  constructor.getConstructor();	  JSType    constructorType    =    constructor.getConstructor();    	non-compiled	[CE]  ';'  expected	6	None	replace
39	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getConstructor();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getConstructor();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getConstructor();	  JSType    constructorType    =    constructor.getConstructor();    	non-compiled	[CE]  ';'  expected	6	None	replace
40	[BUG]  [BUGGY]  JSType  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  compiler.getNativeType(UNKNOWN_TYPE);	  JSType    constructorType    =    constructor.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	1	None	replace
41	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  getNativeType(UNKNOWN_TYPE):  n.getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  getNativeType(UNKNOWN_TYPE):  n.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  getNativeType(UNKNOWN_TYPE):  n.getJSType();	  JSType    constructorType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
42	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  scope.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  scope.getJSType()  :  n.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  scope.getJSType()  :  n.getJSType();	  JSType    constructorType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
43	[BUG]  [BUGGY]  Node  arg  =  constructor.getNext();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  Node  arg  =  constructor.getNext();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	Node  arg  =  constructor.getNext();	      	non-compiled	[CE]  ';'  expected	7	None	replace
44	[BUG]  [BUGGY]  Node  arg  =  constructor.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  Node  arg  =  constructor.getLastChild();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	Node  arg  =  constructor.getLastChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
45	[BUG]  [BUGGY]  FunctionType  constructorType  =  n.getJSType();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  FunctionType  constructorType  =  n.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	FunctionType  constructorType  =  n.getJSType();	      	non-compiled	[CE]  ';'  expected	7	None	replace
46	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope  :  buildor.getJSType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope  :  buildor.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  scope  :  buildor.getJSType();	  JSType    constructorType    =    constructor    ==    null?    scope    :    constructor.getJSType();    	non-compiled	[CE]  ';'  expected	13	None	replace
47	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  null  :  constructor.getConstructorType();  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  null  :  constructor.getConstructorType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  null  :  constructor.getConstructorType();	  JSType    constructorType    =    constructor.getConstructorType();    	non-compiled	[CE]  ';'  expected	4	None	replace
48	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getConstructorType();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getConstructorType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getConstructorType();	  JSType    constructorType    =    constructor.getConstructorType();    	non-compiled	[CE]  ';'  expected	4	None	replace
49	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getParent();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getParent();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getParent();	  JSType    constructorType    =    constructor.getParent();    	non-compiled	[CE]  ';'  expected	5	None	replace
50	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  null  :  constructor.getParent();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  null  :  constructor.getParent();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  null  :  constructor.getParent();	  JSType    constructorType    =    constructor.getParent();    	non-compiled	[CE]  ';'  expected	5	None	replace
51	[BUG]  [BUGGY]  JSType  constructorType  =  context.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  context.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  context.getJSType();	  JSType    constructorType    =    scope.getJSType();    	non-compiled	[CE]  ';'  expected	3	None	replace
52	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getNativeType(UNKNOWN_TYPE);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  null  :  constructor.getNativeType(UNKNOWN_TYPE);	  JSType    constructorType    =    constructor.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	1	None	replace
53	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  getNativeType(UNKNOWN_TYPE):  context.getNativeType(UNKNOWN_TYPE);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  getNativeType(UNKNOWN_TYPE):  context.getNativeType(UNKNOWN_TYPE);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  getNativeType(UNKNOWN_TYPE):  context.getNativeType(UNKNOWN_TYPE);	  JSType    constructorType    =    constructor.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	1	None	replace
54	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  context.getNativeType(UNKNOWN_TYPE):  UNKNOWN_TYPE;  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  context.getNativeType(UNKNOWN_TYPE):  UNKNOWN_TYPE;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  context.getNativeType(UNKNOWN_TYPE):  UNKNOWN_TYPE;	  JSType    constructorType    =    constructor.getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  ';'  expected	1	None	replace
55	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  context.getJSType(constructor):  null;  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  context.getJSType(constructor):  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  context.getJSType(constructor):  null;	  JSType    constructorType    =    constructor!=    null?    context.getJSType()    :    null;    	non-compiled	[CE]  ';'  expected	10	None	replace
56	[BUG]  [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  n.setJSType(getNativeType(UNKNOWN_TYPE));  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	n.setJSType(getNativeType(UNKNOWN_TYPE));	      	non-compiled	[CE]  ';'  expected	7	None	replace
57	[BUG]  [BUGGY]  n.removeChild(constructor);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  n.removeChild(constructor);  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	n.removeChild(constructor);	      	non-compiled	[CE]  ';'  expected	7	None	replace
58	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor.restrictByNotNullOrUndefined();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor.restrictByNotNullOrUndefined();	      	non-compiled	[CE]  ';'  expected	7	None	replace
59	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getString();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor.getString();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor.getString();	  JSType    constructorType    =    constructor.getFirstChild();    	non-compiled	[CE]  ';'  expected	11	None	replace
60	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  getNativeType(UNKNOWN_TYPE):  n.getJSType();  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  getNativeType(UNKNOWN_TYPE):  n.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  getNativeType(UNKNOWN_TYPE):  n.getJSType();	  JSType    constructorType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
61	[BUG]  [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope.getJSType()  :  n.getJSType();  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor  ==  null?  scope.getJSType()  :  n.getJSType();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor  ==  null?  scope.getJSType()  :  n.getJSType();	  JSType    constructorType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
62	[BUG]  [BUGGY]  JSType  constructorType  =  constructor!=  null?  n.getJSType()  :  null;  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor!=  null?  n.getJSType()  :  null;  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor!=  null?  n.getJSType()  :  null;	  JSType    constructorType    =    n.getJSType();    	non-compiled	[CE]  ';'  expected	2	None	replace
63	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getPrototype();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();  scope  =  traverse(constructor,  scope);    [BUGGY]  JSType  constructorType  =  constructor.getPrototype();  [BUGGY]    JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {    [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1039	1039	1	replace	JSType  constructorType  =  constructor.getPrototype();	  JSType    constructorType    =    constructor.getConstructor();    	non-compiled	[CE]  ';'  expected	6	None	replace
