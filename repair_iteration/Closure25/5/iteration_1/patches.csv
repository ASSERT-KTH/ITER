bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(scope));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  new  FlowScope(scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  new  FlowScope(scope));	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
2	[BUG]  [BUGGY]  scope  =  traverse(compiler,  new  FlowScope(scope));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(compiler,  new  FlowScope(scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(compiler,  new  FlowScope(scope));	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
3	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  new  FlowScope(scope));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(functionScope,  new  FlowScope(scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(functionScope,  new  FlowScope(scope));	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
4	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(scope,  scope));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(scope,  scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(scope,  scope));	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
5	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(scope,  false));  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(scope,  false));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(scope,  false));	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
6	[BUG]  [BUGGY]  scope  =  traverse(n,  constructor);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  constructor);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  constructor);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
7	[BUG]  [BUGGY]  scope  =  traverse(constructor.getJSType(),  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor.getJSType(),  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor.getJSType(),  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
8	[BUG]  [BUGGY]  Scope  scope  =  traverse(constructor,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Scope  scope  =  traverse(constructor,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Scope  scope  =  traverse(constructor,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
9	[BUG]  [BUGGY]  scope  =  traverse(constructor.getJSType());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor.getJSType());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor.getJSType());	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  scope  =  traverse(registry,  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(registry,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(registry,  scope);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
11	[BUG]  [BUGGY]  scope  =  traverse(registry,  constructor);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(registry,  constructor);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(registry,  constructor);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  registry);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  scope,  registry);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  scope,  registry);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
13	[BUG]  [BUGGY]  scope  =  traverse(compiler,  scope,  registry);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(compiler,  scope,  registry);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(compiler,  scope,  registry);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
14	[BUG]  [BUGGY]  scope  =  traverse(scope,  constructor);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(scope,  constructor);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(scope,  constructor);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
15	[BUG]  [BUGGY]  scope  =  traverse(compiler,  scope);  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(compiler,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(compiler,  scope);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
16	[BUG]  [BUGGY]  scope  =  traverse(compiler,  scope,  n);  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(compiler,  scope,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(compiler,  scope,  n);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
17	[BUG]  [BUGGY]  scope  =  traverseNew(n,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNew(n,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNew(n,  scope);	  scope    =    traverseNew(constructor,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
18	[BUG]  [BUGGY]  scope  =  traverseNew(constructor,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNew(constructor,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNew(constructor,  n);	  scope    =    traverseNew(constructor,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
19	[BUG]  [BUGGY]  scope  =  traverseNew(constructor,  scope,  n);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNew(constructor,  scope,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNew(constructor,  scope,  n);	  scope    =    traverseNew(constructor,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
20	[BUG]  [BUGGY]  scope  =  traverseNew(constructor,  null);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNew(constructor,  null);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNew(constructor,  null);	  scope    =    traverseNew(constructor,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
21	[BUG]  [BUGGY]  scope  =  traverseNew(constructor,  scope,  registry);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNew(constructor,  scope,  registry);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNew(constructor,  scope,  registry);	  scope    =    traverseNew(constructor,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
22	[BUG]  [BUGGY]  Node  constructor  =  n.getLastChild();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Node  constructor  =  n.getLastChild();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Node  constructor  =  n.getLastChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
23	[BUG]  [BUGGY]  Node  constructor  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Node  constructor  =  n.getFirstChild();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Node  constructor  =  n.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
24	[BUG]  [BUGGY]  Node  constructor  =  scope.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Node  constructor  =  scope.getFirstChild();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Node  constructor  =  scope.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
25	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.getJSType();  [CE]  ';'  expected  [FE]                          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  JSType  constructorType  =  constructor.getJSType();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	JSType  constructorType  =  constructor.getJSType();	      	non-compiled	[CE]  ';'  expected	7	None	replace
26	[BUG]  [BUGGY]  Node  constructor  =  n.getNext();  [CE]  ';'  expected  [FE]                            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Node  constructor  =  n.getNext();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Node  constructor  =  n.getNext();	      	non-compiled	[CE]  ';'  expected	7	None	replace
27	[BUG]  [BUGGY]  Node  arg  =  constructor.getNext();  [CE]  ';'  expected  [FE]                              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Node  arg  =  constructor.getNext();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Node  arg  =  constructor.getNext();	      	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(constructor!=  null);  [CE]  ';'  expected  [FE]                                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(constructor!=  null);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Preconditions.checkState(constructor!=  null);	      	non-compiled	[CE]  ';'  expected	7	None	replace
29	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  operationScope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  scope,  operationScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  scope,  operationScope);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
30	[BUG]  [BUGGY]  scope  =  traverse(constructor,  operationScope,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  operationScope,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  operationScope,  scope);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
31	[BUG]  [BUGGY]  scope  =  traverse(constructor,  operationScope,  n);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  operationScope,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  operationScope,  n);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
32	[BUG]  [BUGGY]  scope  =  traverse(compiler,  scope,  operationScope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(compiler,  scope,  operationScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(compiler,  scope,  operationScope);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
33	[BUG]  [BUGGY]  scope  =  traverse(constructor,  scope,  syntacticScope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  scope,  syntacticScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  scope,  syntacticScope);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
34	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  constructor.getFirstChild());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  scope,  constructor.getFirstChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  scope,  constructor.getFirstChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
35	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  scope.getFirstChild());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  scope.getFirstChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  scope.getFirstChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
36	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  scope.getLastChild());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  scope.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  scope.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
37	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  constructor.getLastChild());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  scope,  constructor.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  scope,  constructor.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
38	[BUG]  [BUGGY]  scope  =  traverse(n,  constructor.getFirstChild());  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  constructor.getFirstChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  constructor.getFirstChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
39	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.getLastChild());  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
40	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.getFirstChild());  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  scope.getFirstChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  scope.getFirstChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
41	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  scope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  scope);	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
42	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  constructor,  n);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(functionScope,  constructor,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(functionScope,  constructor,  n);	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
43	[BUG]  [BUGGY]  scope  =  traverse(buildor,  scope,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(buildor,  scope,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(buildor,  scope,  n);	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
44	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  null);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  null);	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
45	[BUG]  [BUGGY]  scope  =  traverse(structor,  scope,  n);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(structor,  scope,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(structor,  scope,  n);	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
46	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(true));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(true));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(true));	  scope    =    traverse(constructor,    new    FlowScope(false));    	non-compiled	[CE]  ';'  expected	9	None	replace
47	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(false,  scope));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(false,  scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(false,  scope));	  scope    =    traverse(constructor,    new    FlowScope(false));    	non-compiled	[CE]  ';'  expected	9	None	replace
48	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(false));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  new  FlowScope(false));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  new  FlowScope(false));	  scope    =    traverse(constructor,    new    FlowScope(false));    	non-compiled	[CE]  ';'  expected	9	None	replace
49	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(false),  scope);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(false),  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(false),  scope);	  scope    =    traverse(constructor,    new    FlowScope(false));    	non-compiled	[CE]  ';'  expected	9	None	replace
50	[BUG]  [BUGGY]  scope  =  traverse(compiler,  new  FlowScope(false));  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(compiler,  new  FlowScope(false));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(compiler,  new  FlowScope(false));	  scope    =    traverse(constructor,    new    FlowScope(false));    	non-compiled	[CE]  ';'  expected	9	None	replace
51	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.getJSType());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n.getJSType());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n.getJSType());	  scope    =    traverse(constructor,    n);    	non-compiled	[CE]  ';'  expected	2	None	replace
52	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.cloneTree());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n.cloneTree());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n.cloneTree());	  scope    =    traverse(constructor,    n);    	non-compiled	[CE]  ';'  expected	2	None	replace
53	[BUG]  [BUGGY]  scope  =  traverse(n,  new  FlowScope(constructor));  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  new  FlowScope(constructor));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  new  FlowScope(constructor));	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
54	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  constructor);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  constructor);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(n,  scope),  constructor);	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
55	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  operationScope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  operationScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(n,  scope),  operationScope);	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
56	[BUG]  [BUGGY]  scope  =  traverse(compiler,  new  FlowScope(n,  scope));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(compiler,  new  FlowScope(n,  scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(compiler,  new  FlowScope(n,  scope));	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  true);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  true);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(n,  scope),  true);	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
58	[BUG]  [BUGGY]  scope  =  traverse(n,  null);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  null);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  null);	  scope    =    traverse(constructor,    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
59	[BUG]  [BUGGY]  scope  =  traverse(constructor,  null,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  null,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  null,  scope);	  scope    =    traverse(constructor,    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
60	[BUG]  [BUGGY]  scope  =  traverse(buildor,  scope);  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(buildor,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(buildor,  scope);	  scope    =    traverse(constructor,    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
61	[BUG]  [BUGGY]  scope  =  traverse(n,  scope,  n.getLastChild());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  scope,  n.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  scope,  n.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
62	[BUG]  [BUGGY]  scope  =  traverse(n,  scope.getLastChild());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  scope.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  scope.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
63	[BUG]  [BUGGY]  scope  =  traverse(n,  constructor.getLastChild());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(n,  constructor.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(n,  constructor.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
64	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  n.getLastChild());  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  n.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  n.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
65	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  new  FlowScope(false));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(functionScope,  new  FlowScope(false));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(functionScope,  new  FlowScope(false));	  scope    =    traverse(constructor,    new    FlowScope(false));    	non-compiled	[CE]  ';'  expected	9	None	replace
66	[BUG]  [BUGGY]  scope  =  traverse(buildor,  new  FlowScope(false));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(buildor,  new  FlowScope(false));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(buildor,  new  FlowScope(false));	  scope    =    traverse(constructor,    new    FlowScope(false));    	non-compiled	[CE]  ';'  expected	9	None	replace
67	[BUG]  [BUGGY]  scope  =  traverseNew(constructor,  constructor);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNew(constructor,  constructor);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNew(constructor,  constructor);	  scope    =    traverseNew(constructor,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
68	[BUG]  [BUGGY]  scope  =  traverseNew(constructor,  new  FlowScope(n,  scope));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNew(constructor,  new  FlowScope(n,  scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNew(constructor,  new  FlowScope(n,  scope));	  scope    =    traverseNew(constructor,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
69	[BUG]  [BUGGY]  scope  =  traverseChildren(constructor,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseChildren(constructor,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseChildren(constructor,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
70	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  constructor.getFirstChild());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  constructor.getFirstChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  constructor.getFirstChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	NodeTraversal.traverse(compiler,  n,  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
72	[BUG]  [BUGGY]  Node  arg  =  constructor.getLastChild();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Node  arg  =  constructor.getLastChild();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Node  arg  =  constructor.getLastChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  constructor,  scope);  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  NodeTraversal.traverse(compiler,  constructor,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	NodeTraversal.traverse(compiler,  constructor,  scope);	      	non-compiled	[CE]  ';'  expected	7	None	replace
74	[BUG]  [BUGGY]  scope  =  traverse(constructor,  null,  n);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  null,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  null,  n);	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
75	[BUG]  [BUGGY]  scope  =  traverse(constructor,  constructor,  n);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  constructor,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  constructor,  n);	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
76	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope());  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope());	  scope    =    traverse(constructor,    null);    	non-compiled	[CE]  ';'  expected	6	None	replace
77	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  operationScope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  operationScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  operationScope);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
78	[BUG]  [BUGGY]  scope  =  traverse(constructor,  functionScope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  functionScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  functionScope);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
79	[BUG]  [BUGGY]  scope  =  traverse(constructor,  syntacticScope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  syntacticScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  syntacticScope);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
80	[BUG]  [BUGGY]  scope  =  traverse(compiler,  constructor,  registry);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(compiler,  constructor,  registry);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(compiler,  constructor,  registry);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
81	[BUG]  [BUGGY]  scope  =  traverse(constructor,  registry);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  registry);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  registry);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
82	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  registry);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  registry);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  registry);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
83	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.getFirstChild());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n.getFirstChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n.getFirstChild());	  scope    =    traverse(constructor,    scope,    n.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
84	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(scope,  output));  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(scope,  output));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(scope,  output));	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
85	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  functionScope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  functionScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(n,  scope),  functionScope);	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
86	[BUG]  [BUGGY]  scope  =  traverse(functionScope,  new  FlowScope(n,  scope));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(functionScope,  new  FlowScope(n,  scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(functionScope,  new  FlowScope(n,  scope));	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
87	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  output);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  output);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(n,  scope),  output);	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
88	[BUG]  [BUGGY]  scope  =  traverse(buildor,  new  FlowScope(n,  scope));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(buildor,  new  FlowScope(n,  scope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(buildor,  new  FlowScope(n,  scope));	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
89	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  constructor.getLastChild());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  constructor.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  constructor.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
90	[BUG]  [BUGGY]  scope  =  traverse(constructor,  constructor,  n.getFirstChild());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  constructor,  n.getFirstChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  constructor,  n.getFirstChild());	  scope    =    traverse(constructor,    scope,    n.getLastChild());    	non-compiled	[CE]  ';'  expected	12	None	replace
91	[BUG]  [BUGGY]  scope  =  traverse(constructor,  registry,  n);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  registry,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  registry,  n);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
92	[BUG]  [BUGGY]  scope  =  traverse(config,  constructor,  registry);  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(config,  constructor,  registry);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(config,  constructor,  registry);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
93	[BUG]  [BUGGY]  scope  =  traverse(structor,  scope,  registry);  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(structor,  scope,  registry);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(structor,  scope,  registry);	  scope    =    traverse(constructor,    scope,    registry);    	non-compiled	[CE]  ';'  expected	5	None	replace
94	[BUG]  [BUGGY]  scope  =  traverseNew(constructor,  new  FlowScope(false));  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNew(constructor,  new  FlowScope(false));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNew(constructor,  new  FlowScope(false));	  scope    =    traverse(constructor,    new    FlowScope(false));    	non-compiled	[CE]  ';'  expected	9	None	replace
95	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(scope),  constructor);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(scope),  constructor);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(scope),  constructor);	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
96	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(functionScope));  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(functionScope));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(functionScope));	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
97	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(compiler));  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(compiler));  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(compiler));	  scope    =    traverse(constructor,    new    FlowScope(scope));    	non-compiled	[CE]  ';'  expected	10	None	replace
98	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  false);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  false);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(n,  scope),  false);	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
99	[BUG]  [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  context);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  new  FlowScope(n,  scope),  context);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  new  FlowScope(n,  scope),  context);	  scope    =    traverse(constructor,    new    FlowScope(n,    scope));    	non-compiled	[CE]  ';'  expected	8	None	replace
100	[BUG]  [BUGGY]  scope  =  traverse(constructor,  constructor,  n.getLastChild());  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  constructor,  n.getLastChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  constructor,  n.getLastChild());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
101	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n,  scope.getParent());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n,  scope.getParent());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n,  scope.getParent());	  scope    =    traverse(constructor,    scope,    n.getFirstChild());    	non-compiled	[CE]  ';'  expected	13	None	replace
102	[BUG]  [BUGGY]  scope  =  traverseScope(constructor,  scope);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseScope(constructor,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseScope(constructor,  scope);	  scope    =    traverseNew(constructor,    scope);    	non-compiled	[CE]  ';'  expected	4	None	replace
103	[BUG]  [BUGGY]  scope  =  traverse(constructor,  scope,  operationScope,  n);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  scope,  operationScope,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  scope,  operationScope,  n);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
104	[BUG]  [BUGGY]  scope  =  traverse(constructor,  scope,  operationScope,  false);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  scope,  operationScope,  false);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  scope,  operationScope,  false);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
105	[BUG]  [BUGGY]  scope  =  traverse(structor,  scope,  operationScope);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(structor,  scope,  operationScope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(structor,  scope,  operationScope);	  scope    =    traverse(constructor,    scope,    operationScope);    	non-compiled	[CE]  ';'  expected	11	None	replace
106	[BUG]  [BUGGY]  JSType  constructorType  =  constructor.restrictByNotNullOrUndefined();  [CE]  ';'  expected  [FE]                    ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  JSType  constructorType  =  constructor.restrictByNotNullOrUndefined();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	JSType  constructorType  =  constructor.restrictByNotNullOrUndefined();	      	non-compiled	[CE]  ';'  expected	7	None	replace
107	[BUG]  [BUGGY]  Node  arg  =  constructor.getString();  [CE]  ';'  expected  [FE]                      ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Node  arg  =  constructor.getString();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Node  arg  =  constructor.getString();	      	non-compiled	[CE]  ';'  expected	7	None	replace
108	[BUG]  [BUGGY]  Node  arg  =  constructor.getFirstChild();  [CE]  ';'  expected  [FE]                        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  Node  arg  =  constructor.getFirstChild();  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	Node  arg  =  constructor.getFirstChild();	      	non-compiled	[CE]  ';'  expected	7	None	replace
109	[BUG]  [BUGGY]  scope  =  traverse(constructor,  n.removeFirstChild());  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  n.removeFirstChild());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  n.removeFirstChild());	  scope    =    traverse(constructor,    n);    	non-compiled	[CE]  ';'  expected	2	None	replace
110	[BUG]  [BUGGY]  scope  =  traverse(constructor,  buildor,  n);  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  buildor,  n);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  buildor,  n);	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
111	[BUG]  [BUGGY]  scope  =  traverse(constructor,  constructor,  n.getJSType());  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverse(constructor,  constructor,  n.getJSType());  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverse(constructor,  constructor,  n.getJSType());	  scope    =    traverse(constructor,    scope,    n);    	non-compiled	[CE]  ';'  expected	3	None	replace
112	[BUG]  [BUGGY]  scope  =  traverseNode(constructor,  scope);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseNode(constructor,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseNode(constructor,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
113	[BUG]  [BUGGY]  scope  =  traverseChildren(n,  scope);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    private  FlowScope  traverseNew(Node  n,  FlowScope  scope)  {  Node  constructor  =  n.getFirstChild();    [BUGGY]  scope  =  traverseChildren(n,  scope);  [BUGGY]    JSType  constructorType  =  constructor.getJSType();  JSType  type  =  null;  if  (constructorType  !=  null)  {  constructorType  =  constructorType.restrictByNotNullOrUndefined();  if  (constructorType.isUnknownType())  {  type  =  getNativeType(UNKNOWN_TYPE);  }  else  {  FunctionType  ct  =  constructorType.toMaybeFunctionType();  if  (ct  ==  null  &&  constructorType  instanceof  FunctionType)  {  [CLASS]  TypeInference  BooleanOutcomePair  [METHOD]  traverseNew  [RETURN_TYPE]  FlowScope  Node  n  FlowScope  scope  [VARIABLES]  ReverseAbstractInterpreter  reverseInterpreter  AbstractCompiler  compiler  JSTypeRegistry  registry  JSType  constructorType  type  boolean  Scope  functionScope  syntacticScope  DiagnosticType  FUNCTION_LITERAL_UNDEFINED_THIS  TEMPLATE_TYPE_NOT_OBJECT_TYPE  TEMPLATE_TYPE_OF_THIS_EXPECTED  Node  arg  constructor  n  FunctionType  ct  BooleanLiteralSet  booleanValues  toBooleanOutcomes  Map  assertionFunctionsMap  FlowScope  bottomScope  conditionFlowScope  falseScope  functionScope  informed  input  joinedScope  leftScope  newScope  output  rightScope  scope  trueScope  	projects/Closure25/src/com/google/javascript/jscomp/TypeInference.java	0.5	1038	1038	1	replace	scope  =  traverseChildren(n,  scope);	  scope    =    traverse(n,    scope);    	non-compiled	[CE]  ';'  expected	1	None	replace
