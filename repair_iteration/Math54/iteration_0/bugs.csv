bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] return new Dfp(getField(), x); [FE] AssertionError testIssue567 [CONTEXT] public Dfp newInstance(final long x) { [BUGGY] return new Dfp(getField(), x); [BUGGY] } [CLASS] Dfp [METHOD] newInstance [RETURN_TYPE] Dfp  final long x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN nans sign x DfpField field int[] mant String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX decimalPos exp exponent i offset p q rsize sciexp significantDigits trailingZeros x long x  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	576	576	1	replace	
2	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] public Dfp newInstance(final long x) { [BUGGY] [BUGGY] return new Dfp(getField(), x); } [CLASS] Dfp [METHOD] newInstance [RETURN_TYPE] Dfp  final long x [VARIABLES] boolean byte FINITE INFINITE QNAN SNAN nans sign x DfpField field int[] mant String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s int ERR_SCALE MAX_EXP MIN_EXP RADIX decimalPos exp exponent i offset p q rsize sciexp significantDigits trailingZeros x long x  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	576	576	1	add	
3	[BUG] [BUGGY] return field.getTwo(); [FE] AssertionError testIssue567 [CONTEXT] public Dfp getTwo() { [BUGGY] return field.getTwo(); [BUGGY] } [CLASS] Dfp [METHOD] getTwo [RETURN_TYPE] Dfp  [VARIABLES] DfpField field int[] mant String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s boolean byte FINITE INFINITE QNAN SNAN code nans sig sign x int ERR_SCALE MAX_EXP MIN_EXP RADIX decimalPos exp exponent i offset p q rsize sciexp significantDigits trailingZeros x  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	661	661	1	replace	
4	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] public Dfp getTwo() { [BUGGY] [BUGGY] return field.getTwo(); } [CLASS] Dfp [METHOD] getTwo [RETURN_TYPE] Dfp  [VARIABLES] DfpField field int[] mant String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s boolean byte FINITE INFINITE QNAN SNAN code nans sig sign x int ERR_SCALE MAX_EXP MIN_EXP RADIX decimalPos exp exponent i offset p q rsize sciexp significantDigits trailingZeros x  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	661	661	1	add	
5	[BUG] [BUGGY] return nans == INFINITE; [FE] AssertionError testIssue567 [CONTEXT] public boolean isInfinite() { [BUGGY] return nans == INFINITE; [BUGGY] } [CLASS] Dfp [METHOD] isInfinite [RETURN_TYPE] boolean  [VARIABLES] DfpField field int[] mant String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s boolean byte FINITE INFINITE QNAN SNAN code nans sig sign x int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff decimalPos diff e exp exponent i lostdigit offset p q rsize sciexp significantDigits trailingZeros x  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	801	801	1	replace	
6	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] public boolean isInfinite() { [BUGGY] [BUGGY] return nans == INFINITE; } [CLASS] Dfp [METHOD] isInfinite [RETURN_TYPE] boolean  [VARIABLES] DfpField field int[] mant String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s boolean byte FINITE INFINITE QNAN SNAN code nans sig sign x int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff decimalPos diff e exp exponent i lostdigit offset p q rsize sciexp significantDigits trailingZeros x  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	801	801	1	add	
7	[BUG] [BUGGY] if (isInfinite()) { [FE] AssertionError testIssue567 [CONTEXT] public double toDouble() { [BUGGY] if (isInfinite()) { [BUGGY] if (lessThan(getZero())) { return Double.NEGATIVE_INFINITY; } else { return Double.POSITIVE_INFINITY; } } if (isNaN()) { return Double.NaN; } [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2305	2305	1	replace	
8	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] public double toDouble() { [BUGGY] [BUGGY] if (isInfinite()) { if (lessThan(getZero())) { return Double.NEGATIVE_INFINITY; } else { return Double.POSITIVE_INFINITY; } } if (isNaN()) { return Double.NaN; } [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2305	2305	1	add	
9	[BUG] [BUGGY] if (isNaN()) { [FE] AssertionError testIssue567 [CONTEXT] public double toDouble() { if (isInfinite()) { if (lessThan(getZero())) { return Double.NEGATIVE_INFINITY; } else { return Double.POSITIVE_INFINITY; } } [BUGGY] if (isNaN()) { [BUGGY] return Double.NaN; } Dfp y = this; boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2313	2313	1	replace	
10	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] public double toDouble() { if (isInfinite()) { if (lessThan(getZero())) { return Double.NEGATIVE_INFINITY; } else { return Double.POSITIVE_INFINITY; } } [BUGGY] [BUGGY] if (isNaN()) { return Double.NaN; } Dfp y = this; boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2313	2313	1	add	
11	[BUG] [BUGGY] Dfp y = this; [FE] AssertionError testIssue567 [CONTEXT] return Double.NEGATIVE_INFINITY; } else { return Double.POSITIVE_INFINITY; } } if (isNaN()) { return Double.NaN; } [BUGGY] Dfp y = this; [BUGGY] boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ int exponent = (int)(y.log10() * 3.32); if (exponent < 0) { [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2317	2317	1	replace	
12	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] return Double.NEGATIVE_INFINITY; } else { return Double.POSITIVE_INFINITY; } } if (isNaN()) { return Double.NaN; } [BUGGY] [BUGGY] Dfp y = this; boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ int exponent = (int)(y.log10() * 3.32); if (exponent < 0) { [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2317	2317	1	add	
13	[BUG] [BUGGY] boolean negate = false; [FE] AssertionError testIssue567 [CONTEXT] } else { return Double.POSITIVE_INFINITY; } } if (isNaN()) { return Double.NaN; } Dfp y = this; [BUGGY] boolean negate = false; [BUGGY] if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ int exponent = (int)(y.log10() * 3.32); if (exponent < 0) { exponent--; [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2318	2318	1	replace	
14	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] } else { return Double.POSITIVE_INFINITY; } } if (isNaN()) { return Double.NaN; } Dfp y = this; [BUGGY] [BUGGY] boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ int exponent = (int)(y.log10() * 3.32); if (exponent < 0) { exponent--; [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2318	2318	1	add	
15	[BUG] [BUGGY] if (lessThan(getZero())) { [FE] AssertionError testIssue567 [CONTEXT] return Double.POSITIVE_INFINITY; } } if (isNaN()) { return Double.NaN; } Dfp y = this; boolean negate = false; [BUGGY] if (lessThan(getZero())) { [BUGGY] y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ int exponent = (int)(y.log10() * 3.32); if (exponent < 0) { exponent--; } [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2319	2319	1	replace	
16	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] return Double.POSITIVE_INFINITY; } } if (isNaN()) { return Double.NaN; } Dfp y = this; boolean negate = false; [BUGGY] [BUGGY] if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ int exponent = (int)(y.log10() * 3.32); if (exponent < 0) { exponent--; } [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2319	2319	1	add	
17	[BUG] [BUGGY] int exponent = (int)(y.log10() * 3.32); [FE] AssertionError testIssue567 [CONTEXT] Dfp y = this; boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ [BUGGY] int exponent = (int)(y.log10() * 3.32); [BUGGY] if (exponent < 0) { exponent--; } Dfp tempDfp = DfpMath.pow(getTwo(), exponent); while (tempDfp.lessThan(y) || tempDfp.equals(y)) { tempDfp = tempDfp.multiply(2); exponent++; } exponent--; [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2326	2326	1	replace	
18	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] Dfp y = this; boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ [BUGGY] [BUGGY] int exponent = (int)(y.log10() * 3.32); if (exponent < 0) { exponent--; } Dfp tempDfp = DfpMath.pow(getTwo(), exponent); while (tempDfp.lessThan(y) || tempDfp.equals(y)) { tempDfp = tempDfp.multiply(2); exponent++; } exponent--; [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2326	2326	1	add	
19	[BUG] [BUGGY] if (exponent < 0) { [FE] AssertionError testIssue567 [CONTEXT] Dfp y = this; boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ int exponent = (int)(y.log10() * 3.32); [BUGGY] if (exponent < 0) { [BUGGY] exponent--; } Dfp tempDfp = DfpMath.pow(getTwo(), exponent); while (tempDfp.lessThan(y) || tempDfp.equals(y)) { tempDfp = tempDfp.multiply(2); exponent++; } exponent--;  [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2327	2327	1	replace	
20	[BUG] [BUGGY] [FE] AssertionError testIssue567 [CONTEXT] Dfp y = this; boolean negate = false; if (lessThan(getZero())) { y = negate(); negate = true; }  Should be faster than doing a natural logarithm.*/ int exponent = (int)(y.log10() * 3.32); [BUGGY] [BUGGY] if (exponent < 0) { exponent--; } Dfp tempDfp = DfpMath.pow(getTwo(), exponent); while (tempDfp.lessThan(y) || tempDfp.equals(y)) { tempDfp = tempDfp.multiply(2); exponent++; } exponent--;  [CLASS] Dfp [METHOD] toDouble [RETURN_TYPE] double  [VARIABLES] boolean negate byte FINITE INFINITE QNAN SNAN asign bsign code nans rsign sig sign x double x DfpField field int[] dividend mant product quotient remainder String ADD_TRAP ALIGN_TRAP DIVIDE_TRAP GREATER_THAN_TRAP LESS_THAN_TRAP MULTIPLY_TRAP NAN_STRING NEG_INFINITY_STRING NEW_INSTANCE_TRAP NEXT_AFTER_TRAP POS_INFINITY_STRING SQRT_TRAP TRUNC_TRAP fpdecimal fpexp s str what int ERR_SCALE MAX_EXP MIN_EXP RADIX adiff ae aextradigit bextradigit decimalPos diff divMsb divisor dm e excp exp exponent extra i j lostdigit max md min minadj n nsqd offset p q qd r result rh rl rsize sciexp shf significantDigits trailingZeros trial type x long bits mantissa Dfp tempDfp y  	projects/Math54/src/main/java/org/apache/commons/math/dfp/Dfp.java	1.0	2327	2327	1	add	
