bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(JSType  element  :  others.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  others  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  others.restrictByNotNullOrUndefined())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  others.restrictByNotNullOrUndefined())  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  others	19	None	replace
2	[BUG]  [BUGGY]  for(JSType  element  :  this.restrictByNotNullOrUndefined())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  this.restrictByNotNullOrUndefined())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  this.restrictByNotNullOrUndefined())  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	19	None	replace
3	[BUG]  [BUGGY]  for(JSType  element  :  alternates.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  alternates.restrictByNotNullOrUndefined())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  alternates.restrictByNotNullOrUndefined())  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
4	[BUG]  [BUGGY]  for(JSType  element  :  that.restrictByNotEmpty())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.restrictByNotEmpty())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.restrictByNotEmpty())  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
5	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(that);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(that);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(that);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternatives);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternatives);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternatives);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternatives);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternatives);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(required);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternatives);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(requires);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(requires);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(requires);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternatives);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  for(JSType  element  :  that.symbols)  {  [CE]  cannot  find  symbol  symbols  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.symbols)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.symbols)  {	  for(JSType    element    :    that.alternates)    {    	non-compiled	[CE]  cannot  find  symbol  symbols	1	None	replace
13	[BUG]  [BUGGY]  for(JSType  element  :  that.types)  {  [CE]  cannot  find  symbol  types  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.types)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.types)  {	  for(JSType    element    :    that.alternates)    {    	non-compiled	[CE]  cannot  find  symbol  types	1	None	replace
14	[BUG]  [BUGGY]  for(JSType  element  :  that.unions)  {  [CE]  cannot  find  symbol  unions  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.unions)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.unions)  {	  for(JSType    element    :    that.alternates)    {    	non-compiled	[CE]  cannot  find  symbol  unions	1	None	replace
15	[BUG]  [BUGGY]  for(JSType  element  :  that.ranges)  {  [CE]  cannot  find  symbol  ranges  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.ranges)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.ranges)  {	  for(JSType    element    :    that.alternates)    {    	non-compiled	[CE]  cannot  find  symbol  ranges	1	None	replace
16	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  that);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  that);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  that);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  for(JSType  element  :  other.asParameters())  {  [CE]  cannot  find  symbol  other  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  other.asParameters())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  other.asParameters())  {	  for(JSType    element    :    that.asParameters())    {    	non-compiled	[CE]  cannot  find  symbol  other	4	None	replace
20	[BUG]  [BUGGY]  for(JSType  element  :  alternates.asParameters())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  alternates.asParameters())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  alternates.asParameters())  {	  for(JSType    element    :    that.asParameters())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
21	[BUG]  [BUGGY]  for(JSType  element  :  this.asParameters())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  this.asParameters())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  this.asParameters())  {	  for(JSType    element    :    that.asParameters())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
22	[BUG]  [BUGGY]  for(JSType  element  :  others.asParameters())  {  [CE]  cannot  find  symbol  others  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  others.asParameters())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  others.asParameters())  {	  for(JSType    element    :    that.asParameters())    {    	non-compiled	[CE]  cannot  find  symbol  others	4	None	replace
23	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(that.size());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(that.size());  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(that.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(that);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(that);  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =(JSType)this.alternates.get(that);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  JSType  alternates  =(JSType)that.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =(JSType)that.clone();  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =(JSType)that.clone();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.iterator().next();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =(JSType)this.alternates.iterator().next();  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =(JSType)this.alternates.iterator().next();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  JSType  alternates  =  that.getRawClass();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  that.getRawClass();  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  that.getRawClass();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternators.get(that);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =(JSType)this.alternators.get(that);  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =(JSType)this.alternators.get(that);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
33	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(that);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(that);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(that);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(removed);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(removed);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(removed);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  JSType  alternates  =  element.getAlternates();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  element.getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  element.getAlternates();	      JSType    alternates    =    that.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
36	[BUG]  [BUGGY]  JSType  alternates  =  this.alternates.getAlternates();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  this.alternates.getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  this.alternates.getAlternates();	      JSType    alternates    =    that.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
37	[BUG]  [BUGGY]  JSType  alternates  =  other.getAlternates();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  other.getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  other.getAlternates();	      JSType    alternates    =    that.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
38	[BUG]  [BUGGY]  JSType  alternates  =  elements.getAlternates();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  elements.getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  elements.getAlternates();	      JSType    alternates    =    that.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  for(JSType  element  :  that.type)  {  [CE]  cannot  find  symbol  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.type)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.type)  {	  for(JSType    element    :    that)    {    	non-compiled	[CE]  cannot  find  symbol  type	12	None	replace
40	[BUG]  [BUGGY]  for(JSType  element  :  that.synthetic)  {  [CE]  cannot  find  symbol  synthetic  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.synthetic)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.synthetic)  {	  for(JSType    element    :    that)    {    	non-compiled	[CE]  cannot  find  symbol  synthetic	12	None	replace
41	[BUG]  [BUGGY]  for(JSType  element  :  others)  {  [CE]  cannot  find  symbol  others  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  others)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  others)  {	  for(JSType    element    :    that)    {    	non-compiled	[CE]  cannot  find  symbol  others	12	None	replace
42	[BUG]  [BUGGY]  for(JSType  element  :  that.singletonType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.singletonType())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.singletonType())  {	  for(JSType    element    :    that)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
43	[BUG]  [BUGGY]  for(JSType  element  :  that.strictByNotNullOrUndefined)  {  [CE]  cannot  find  symbol  strictByNotNullOrUndefined  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.strictByNotNullOrUndefined)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.strictByNotNullOrUndefined)  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined)    {    	non-compiled	[CE]  cannot  find  symbol  strictByNotNullOrUndefined	2	None	replace
44	[BUG]  [BUGGY]  for(JSType  element  :  that.asStatic)  {  [CE]  cannot  find  symbol  asStatic  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.asStatic)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.asStatic)  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined)    {    	non-compiled	[CE]  cannot  find  symbol  asStatic	2	None	replace
45	[BUG]  [BUGGY]  for(JSType  element  :  that.restrictByUndefined)  {  [CE]  cannot  find  symbol  restrictByUndefined  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.restrictByUndefined)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.restrictByUndefined)  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined)    {    	non-compiled	[CE]  cannot  find  symbol  restrictByUndefined	2	None	replace
46	[BUG]  [BUGGY]  ArrayList  alternates  =  new  ArrayList(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  alternates  =  new  ArrayList(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  alternates  =  new  ArrayList(alternates);	      Set    alternates    =    new    HashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
47	[BUG]  [BUGGY]  List  alternates  =  new  ArrayList(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  alternates  =  new  ArrayList(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  alternates  =  new  ArrayList(alternates);	      Set    alternates    =    new    HashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
48	[BUG]  [BUGGY]  Set  alternates  =  new  HashSet(that);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  alternates  =  new  HashSet(that);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  alternates  =  new  HashSet(that);	      Set    alternates    =    new    HashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
49	[BUG]  [BUGGY]  Set  alternates  =  new  LinkedHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  alternates  =  new  LinkedHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  alternates  =  new  LinkedHashSet(alternates);	      Set    alternates    =    new    HashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
50	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(that);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(that);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  String>  alternates  =  Sets.newHashSet(that);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
51	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(alternates,  that);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(alternates,  that);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  String>  alternates  =  Sets.newHashSet(alternates,  that);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
52	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  String>  alternates  =  Arrays.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
53	[BUG]  [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  String>  alternates  =  Sets.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
54	[BUG]  [BUGGY]  ArrayList  alternates  =  getAlternates();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  alternates  =  getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  alternates  =  getAlternates();	      Set    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
55	[BUG]  [BUGGY]  LinkedHashSet  alternates  =  getAlternates();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  LinkedHashSet  alternates  =  getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	LinkedHashSet  alternates  =  getAlternates();	      Set    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  List  alternates  =  getAlternates();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  alternates  =  getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  alternates  =  getAlternates();	      Set    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  java.util.ArrayList  alternates  =  getAlternates();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  java.util.ArrayList  alternates  =  getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	java.util.ArrayList  alternates  =  getAlternates();	      Set    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
58	[BUG]  [BUGGY]  for(JSType  element  :  that.isSubtype(this))  {  [CE]  for-each  not  applicable  to  expression  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.isSubtype(this))  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.isSubtype(this))  {	  for(JSType    element    :    that.asParameters)    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	13	None	replace
59	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(that).keySet();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(that).keySet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(that).keySet();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).keySet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).keySet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
61	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).keySet();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).keySet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates).keySet();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).keySet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
62	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(others).keySet();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(others).keySet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(others).keySet();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).keySet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
63	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(that).iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(that).iterator();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(that).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
66	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(that).iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet(that).iterator();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  Sets.newHashSet(that).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
67	[BUG]  [BUGGY]  for(JSType  that  :  element.alternates)  {  [CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  that  :  element.alternates)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  that  :  element.alternates)  {	  for(JSType    that    :    alternates)    {    	non-compiled	[CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)	3	None	replace
68	[BUG]  [BUGGY]  for(JSType  that  :  element)  {  [CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  that  :  element)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  that  :  element)  {	  for(JSType    that    :    alternates)    {    	non-compiled	[CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)	3	None	replace
69	[BUG]  [BUGGY]  for(JSType  that  :  elements)  {  [CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  that  :  elements)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  that  :  elements)  {	  for(JSType    that    :    alternates)    {    	non-compiled	[CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)	3	None	replace
70	[BUG]  [BUGGY]  for(JSType  that  :  this.alternates)  {  [CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  that  :  this.alternates)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  that  :  this.alternates)  {	  for(JSType    that    :    alternates)    {    	non-compiled	[CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)	3	None	replace
71	[BUG]  [BUGGY]  for(JSType  that  :  others)  {  [CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  that  :  others)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  that  :  others)  {	  for(JSType    that    :    alternates)    {    	non-compiled	[CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)	3	None	replace
72	[BUG]  [BUGGY]  for(JSType  element  :  that.values)  {  [CE]  cannot  find  symbol  values  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.values)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.values)  {	  for(JSType    element    :    that.alternates)    {    	non-compiled	[CE]  cannot  find  symbol  values	1	None	replace
73	[BUG]  [BUGGY]  for(JSType  element  :  that.asType())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.asType())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.asType())  {	  for(JSType    element    :    that)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
74	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  Sets.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
75	[BUG]  [BUGGY]  for(JSType  element  :  that.global)  {  [CE]  cannot  find  symbol  global  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.global)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.global)  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined)    {    	non-compiled	[CE]  cannot  find  symbol  global	2	None	replace
76	[BUG]  [BUGGY]  for(JSType  element  :  that.asSubtypes)  {  [CE]  cannot  find  symbol  asSubtypes  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.asSubtypes)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.asSubtypes)  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined)    {    	non-compiled	[CE]  cannot  find  symbol  asSubtypes	2	None	replace
77	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).keySet();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).keySet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  Sets.newHashSet(alternates).keySet();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).keySet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
78	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).keySet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
79	[BUG]  [BUGGY]  JSType  element  =  that.getElement();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  element  =  that.getElement();  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  element  =  that.getElement();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  JSType  alternates  =  that.getInterfaces();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  that.getInterfaces();  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  that.getInterfaces();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  JSType  alternates  =  getImpl(that);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  getImpl(that);  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  getImpl(that);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
82	[BUG]  [BUGGY]  for(JSType  element  :  that.placeholders)  {  [CE]  cannot  find  symbol  placeholders  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.placeholders)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.placeholders)  {	  for(JSType    element    :    that.asParameters)    {    	non-compiled	[CE]  cannot  find  symbol  placeholders	13	None	replace
83	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternatives);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternatives);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternatives);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternatives);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
84	[BUG]  [BUGGY]  JSType  alternates  =  all.getAlternates();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  all.getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  all.getAlternates();	      JSType    alternates    =    that.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  for(JSType  element  :  other.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  other  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  other.restrictByNotNullOrUndefined())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  other.restrictByNotNullOrUndefined())  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  other	19	None	replace
86	[BUG]  [BUGGY]  for(JSType  element  :  all.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  all  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  all.restrictByNotNullOrUndefined())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  all.restrictByNotNullOrUndefined())  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  all	19	None	replace
87	[BUG]  [BUGGY]  ArrayList  alternates  =  new  HashSet(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  alternates  =  new  HashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  alternates  =  new  HashSet(alternates);	      Set    alternates    =    new    HashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
88	[BUG]  [BUGGY]  LinkedHashSet  alternates  =  new  LinkedHashSet(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  LinkedHashSet  alternates  =  new  LinkedHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	LinkedHashSet  alternates  =  new  LinkedHashSet(alternates);	      Set    alternates    =    new    HashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
89	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size());  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  Sets.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
91	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  getAlternates();	      Set    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
92	[BUG]  [BUGGY]  LinkedList  alternates  =  getAlternates();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  LinkedList  alternates  =  getAlternates();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	LinkedList  alternates  =  getAlternates();	      Set    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
93	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType  alternates  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
94	[BUG]  [BUGGY]  for(JSType  element  :  that.types())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.types())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.types())  {	  for(JSType    element    :    that.asParameters())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
95	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
96	[BUG]  [BUGGY]  for(JSType  element  :  that.assignmentOps)  {  [CE]  cannot  find  symbol  assignmentOps  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.assignmentOps)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.assignmentOps)  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined)    {    	non-compiled	[CE]  cannot  find  symbol  assignmentOps	2	None	replace
97	[BUG]  [BUGGY]  for(JSType  element  :  that.restrictByNonNullOrUndefined)  {  [CE]  cannot  find  symbol  restrictByNonNullOrUndefined  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.restrictByNonNullOrUndefined)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.restrictByNonNullOrUndefined)  {	  for(JSType    element    :    that.restrictByNotNullOrUndefined)    {    	non-compiled	[CE]  cannot  find  symbol  restrictByNonNullOrUndefined	2	None	replace
98	[BUG]  [BUGGY]  Set  alternates  =  new  TreeSet(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  Set  alternates  =  new  TreeSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	Set  alternates  =  new  TreeSet(alternates);	      Set    alternates    =    new    HashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
99	[BUG]  [BUGGY]  for(JSType  element  :  others.iterator().next())  {  [CE]  cannot  find  symbol  others  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  others.iterator().next())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  others.iterator().next())  {	  for(JSType    element    :    that)    {    	non-compiled	[CE]  cannot  find  symbol  others	12	None	replace
100	[BUG]  [BUGGY]  for(JSType  element  :  that.restrictedSet)  {  [CE]  cannot  find  symbol  restrictedSet  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  element  :  that.restrictedSet)  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  element  :  that.restrictedSet)  {	  for(JSType    element    :    that.alternates)    {    	non-compiled	[CE]  cannot  find  symbol  restrictedSet	1	None	replace
101	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet();  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Lists.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
102	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternations);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternations);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternations);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  for(JSType  that  :  getAlternates())  {  [CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  for(JSType  that  :  getAlternates())  {  [BUGGY]    if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	for(JSType  that  :  getAlternates())  {	  for(JSType    that    :    alternates)    {    	non-compiled	[CE]  variable  that  is  already  defined  in  method  isSubtype(JSType)	3	None	replace
104	[BUG]  [BUGGY]  List  <  String>  alternates  =  Lists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  String>  alternates  =  Lists.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  String>  alternates  =  Lists.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
105	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  ArrayList.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  String>  alternates  =  ArrayList.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  String>  alternates  =  ArrayList.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
106	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	ArrayList  <  JSType>  alternates  =  ArrayLists.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
107	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isSubtype(JSType  that)  {    [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(alternates);  [BUGGY]    for  (JSType  element  :  alternates)  {  if  (!element.isSubtype(that))  {  return  false;  }  }  return  true;  }  [CLASS]  UnionType  [METHOD]  isSubtype  [RETURN_TYPE]  boolean  JSType  that  [VARIABLES]  Set  alternates  JSType  element  that  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	392	392	1	replace	List  <  JSType>  alternates  =  Lists.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
