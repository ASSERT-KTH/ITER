bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  for(JSType  t  :  getAlternates())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  for(JSType  t  :  getAlternates())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    for(JSType  t  :  getAlternates())  {	  	non-compiled	[CE]  ';'  expected	17	None	add
2	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  For(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  For(JSType  t  :  getAlternates())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    For(JSType  t  :  getAlternates())  {	  	non-compiled	[CE]  ')'  expected	17	None	add
3	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  FOR(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  FOR(JSType  t  :  getAlternates())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    FOR(JSType  t  :  getAlternates())  {	  	non-compiled	[CE]  ')'  expected	17	None	add
4	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  for(JSType  t  :  getAllAlternates())  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  for(JSType  t  :  getAllAlternates())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    for(JSType  t  :  getAllAlternates())  {	  	non-compiled	[CE]  ';'  expected	17	None	add
5	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    HashSet  <  JSType>  alternates  =  getAlternates();	  	non-compiled	[CE]  ';'  expected	17	None	add
6	[BUG]  [BUGGY]  for(JSType  t  :  getSimpleImmediateParentConstructors())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getSimpleImmediateParentConstructors())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSimpleImmediateParentConstructors())  {	  for(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
7	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  alternates)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  alternates)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  alternates)  {	  for(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  	24	None	replace
8	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParents())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImmediateParents())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParents())  {	  for(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
9	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors().values())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImmediateParentConstructors().values())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors().values())  {	  for(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
10	[BUG]  [BUGGY]  JSType  alternates  =(JSType)alternates.get(this.alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =(JSType)alternates.get(this.alternates.size()  -  1);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)alternates.get(this.alternates.size()  -  1);	      JSType    alternates    =(JSType)this.alternates.get(alternates.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
11	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.alternates.get(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =(JSType)super.alternates.get(alternates.size()  -  1);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.alternates.get(alternates.size()  -  1);	      JSType    alternates    =(JSType)this.alternates.get(alternates.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
12	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(alternates.size());  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.get(alternates.size());	      JSType    alternates    =(JSType)this.alternates.get(alternates.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
13	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getAlternates().iterator();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().iterator();	      JSType    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().values();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getAlternates().values();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().values();	      JSType    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
15	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates.values())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {	  for(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {	  for(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
21	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.iterator())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates.iterator())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.iterator())  {	  for(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	2	None	replace
22	[BUG]  [BUGGY]  for(JSType  t  :  alternates())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  alternates())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
23	[BUG]  [BUGGY]  for(JSType  t  :  getOwnAlternates())  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getOwnAlternates())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnAlternates())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
24	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates().values())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates().values())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates().values())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
25	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates().iterator())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates().iterator())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates().iterator())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	18	None	replace
26	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(interiors);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(interiors);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(interiors);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
27	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(reverse);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(reverse);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(reverse);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
28	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(references);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(references);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(references);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
29	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(reversed);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(reversed);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(reversed);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
31	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
32	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
33	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.size());  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
34	[BUG]  [BUGGY]  for(JSType  t  :  alternates.size())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  alternates.size())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.size())  {	  for(JSType    t    :    others.size())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	5	None	replace
35	[BUG]  [BUGGY]  for(JSType  t  :  this.others.size())  {  [CE]  cannot  find  symbol  others  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.others.size())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.others.size())  {	  for(JSType    t    :    others.size())    {    	non-compiled	[CE]  cannot  find  symbol  others	5	None	replace
36	[BUG]  [BUGGY]  for(JSType  t  :  this.alternators.size())  {  [CE]  cannot  find  symbol  alternators  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternators.size())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternators.size())  {	  for(JSType    t    :    others.size())    {    	non-compiled	[CE]  cannot  find  symbol  alternators	5	None	replace
37	[BUG]  [BUGGY]  for(JSType  t  :  this.assignments.size())  {  [CE]  cannot  find  symbol  assignments  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.assignments.size())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.assignments.size())  {	  for(JSType    t    :    others.size())    {    	non-compiled	[CE]  cannot  find  symbol  assignments	5	None	replace
38	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  alternates);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE,  alternates);	      JSType    t    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
42	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE);	      JSType    t    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
43	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUndefined())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUndefined())  {	  for(JSType    t    :    getImplicitReturnType())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
44	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().asType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturnType().asType())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().asType())  {	  for(JSType    t    :    getImplicitReturnType())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
45	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getSimpleName())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturnType().getSimpleName())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getSimpleName())  {	  for(JSType    t    :    getImplicitReturnType())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
46	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUnknownType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUnknownType())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUnknownType())  {	  for(JSType    t    :    getImplicitReturnType())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
47	[BUG]  [BUGGY]  for(JSType  t  :  others.values())  {  [CE]  cannot  find  symbol  others  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  others.values())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.values())  {	  for(JSType    t    :    alternates.values())    {    	non-compiled	[CE]  cannot  find  symbol  others	4	None	replace
48	[BUG]  [BUGGY]  for(JSType  t  :  this.alternators.values())  {  [CE]  cannot  find  symbol  alternators  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternators.values())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternators.values())  {	  for(JSType    t    :    alternates.values())    {    	non-compiled	[CE]  cannot  find  symbol  alternators	4	None	replace
49	[BUG]  [BUGGY]  for(JSType  t  :  arrays.values())  {  [CE]  cannot  find  symbol  arrays  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  arrays.values())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  arrays.values())  {	  for(JSType    t    :    alternates.values())    {    	non-compiled	[CE]  cannot  find  symbol  arrays	4	None	replace
50	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  alternates);	      JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
51	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  1;	      JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
52	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getImplicitReturnType().restrictByNotNullOrUndefined();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().restrictByNotNullOrUndefined();	      JSType    alternates    =    getImplicitReturnType();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
53	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknownType ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknownType ");  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknownType ");	      JSType    alternates    =    getImplicitReturnType();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
54	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  Sets.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet();	      Set    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Sets.newHashSet();	      Set    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
56	[BUG]  [BUGGY]  List  <  String>  alternates  =  Lists.newHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  String>  alternates  =  Lists.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Lists.newHashSet();	      Set    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
57	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Sets.newHashSet();	      Set    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  for(JSType  t  :  this.symbols)  {  [CE]  cannot  find  symbol  symbols  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.symbols)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.symbols)  {	  for(JSType    t    :    this.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  symbols	3	None	replace
59	[BUG]  [BUGGY]  for(JSType  t  :  this.unknownTypes)  {  [CE]  cannot  find  symbol  unknownTypes  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.unknownTypes)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.unknownTypes)  {	  for(JSType    t    :    this.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  unknownTypes	3	None	replace
60	[BUG]  [BUGGY]  for(JSType  t  :  this.mutators)  {  [CE]  cannot  find  symbol  mutators  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.mutators)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.mutators)  {	  for(JSType    t    :    this.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  mutators	3	None	replace
61	[BUG]  [BUGGY]  for(JSType  t  :  this.assignments)  {  [CE]  cannot  find  symbol  assignments  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.assignments)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.assignments)  {	  for(JSType    t    :    this.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  assignments	3	None	replace
62	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.super.getAlternates();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =(JSType)this.super.getAlternates();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.super.getAlternates();	      JSType    alternates    =(JSType)super.getAlternates();    	non-compiled	[CE]  	15	None	replace
63	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =(JSType)super.restrictByNotNullOrUndefined();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.restrictByNotNullOrUndefined();	      JSType    alternates    =(JSType)super.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
64	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  for(JSType  t  :  this.alternates)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  for(JSType  t  :  this.alternates)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    for(JSType  t  :  this.alternates)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
65	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  For(JSType  t  :  this.alternates)  {  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  For(JSType  t  :  this.alternates)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    For(JSType  t  :  this.alternates)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
66	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);	  	non-compiled	[CE]  ';'  expected	1	None	add
67	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  FOR(JSType  t  :  this.alternates)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  FOR(JSType  t  :  this.alternates)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    FOR(JSType  t  :  this.alternates)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
68	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    HashSet  <  JSType>  alternates  =  Sets.newHashSet();	  	non-compiled	[CE]  ';'  expected	1	None	add
69	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);	  	non-compiled	[CE]  ';'  expected	1	None	add
70	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(true);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(true);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(true);	      JSType    alternates    =    getSingleNodeType().getAlternates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
71	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(null);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(null);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(null);	      JSType    alternates    =    getSingleNodeType().getAlternates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
73	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
74	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
75	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
76	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Arrays.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
77	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  Sets.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
78	[BUG]  [BUGGY]  List  <  String>  alternates  =  Lists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  String>  alternates  =  Lists.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Lists.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
79	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  String>  alternates  =  Sets.newHashSet(alternates,  true);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
80	[BUG]  [BUGGY]  JSType  t  =(JSType)this.alternates.get(0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =(JSType)this.alternates.get(0);  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =(JSType)this.alternates.get(0);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
81	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE);  return  t.isUnknownType();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE);  return  t.isUnknownType();  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE);  return  t.isUnknownType();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
82	[BUG]  [BUGGY]  For(JSType  t  :  getImmediateParentConstructors())  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  For(JSType  t  :  getImmediateParentConstructors())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImmediateParentConstructors())  {	  for(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  ')'  expected	24	None	replace
83	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructorsForType())  {	  for(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
84	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    Iterator  <  JSType>  alternates  =  getAlternates().iterator();	  	non-compiled	[CE]  ';'  expected	17	None	add
85	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {	  	non-compiled	[CE]  ';'  expected	17	None	add
86	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {	  	non-compiled	[CE]  ';'  expected	17	None	add
87	[BUG]  [BUGGY]  JSType  alternates  =  getReturnType();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getReturnType();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getReturnType();	      JSType    alternates    =    getImplicitReturnType();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
88	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
89	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Arrays.newHashSet();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Arrays.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Arrays.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
90	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    Iterator  <  JSType>  alternates  =  this.alternates.iterator();	  	non-compiled	[CE]  ';'  expected	1	None	add
91	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];	  	non-compiled	[CE]  ';'  expected	1	None	add
92	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);	  	non-compiled	[CE]  ';'  expected	1	None	add
93	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();	  	non-compiled	[CE]  ';'  expected	1	None	add
94	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().values())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturnType().values())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().values())  {	  for(JSType    t    :    alternates.values())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
95	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Arrays.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Arrays.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Arrays.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
99	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  Lists.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE))  {  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE))  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE))  {	  for(JSType    t    :    getImplicitReturnType())    {    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	19	None	replace
101	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE))  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE))  {	  for(JSType    t    :    getImplicitReturnType())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
102	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getRawClass())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturnType().getRawClass())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getRawClass())  {	  for(JSType    t    :    getImplicitReturnType())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
103	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
104	[BUG]  [BUGGY]  JSType  t  =  getNativeType(NULL_TYPE);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(NULL_TYPE);  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(NULL_TYPE);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
105	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates,  true)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates,  true)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates,  true)  {	  for(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  	2	None	replace
106	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE)+  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE)+  1;  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE)+  1;	      JSType    t    =    getNativeType(UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
107	[BUG]  [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Sets.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
108	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
109	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternations);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternations);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternations);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
110	[BUG]  [BUGGY]  for(JSType  t  :  this.types)  {  [CE]  cannot  find  symbol  types  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.types)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.types)  {	  for(JSType    t    :    this.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  types	3	None	replace
111	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(false);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(false);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(false);	      JSType    alternates    =    getSingleNodeType().getAlternates();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
112	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.alternates.getAlternates();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =(JSType)super.alternates.getAlternates();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.alternates.getAlternates();	      JSType    alternates    =(JSType)super.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
113	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size());  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
114	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
115	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates(true);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getAlternates(true);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates(true);	      JSType    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
116	[BUG]  [BUGGY]  for(JSType  t  :  this.changes.size())  {  [CE]  cannot  find  symbol  changes  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.changes.size())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.changes.size())  {	  for(JSType    t    :    others.size())    {    	non-compiled	[CE]  cannot  find  symbol  changes	5	None	replace
117	[BUG]  [BUGGY]  for(JSType  t  :  other.size())  {  [CE]  cannot  find  symbol  other  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  other.size())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.size())  {	  for(JSType    t    :    others.size())    {    	non-compiled	[CE]  cannot  find  symbol  other	5	None	replace
118	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonType())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getSingletonType())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonType())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
119	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturn())  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getImplicitReturn())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturn())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
120	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newHashSet();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Arrays.newHashSet();	      Set    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
121	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  ArrayList.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  String>  alternates  =  ArrayList.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  ArrayList.newHashSet(alternates);	      Set    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
122	[BUG]  [BUGGY]  JSType  alternates  =(JSType)alternates.get(this.alternates.size());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =(JSType)alternates.get(this.alternates.size());  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)alternates.get(this.alternates.size());	      JSType    alternates    =(JSType)this.alternates.get(alternates.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
123	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType[]  alternates  =  Sets.newHashSet();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet();	      Set    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
124	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().iterator().next();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getAlternates().iterator().next();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().iterator().next();	      JSType    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
125	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.size())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates.size())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.size())  {	  for(JSType    t    :    others.size())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	5	None	replace
126	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayLists.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
127	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
128	[BUG]  [BUGGY]  for(JSType  t  :  other.values())  {  [CE]  cannot  find  symbol  other  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  other.values())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.values())  {	  for(JSType    t    :    alternates.values())    {    	non-compiled	[CE]  cannot  find  symbol  other	4	None	replace
129	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());	  	non-compiled	[CE]  ';'  expected	1	None	add
130	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString(),  alternates.toString());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString(),  alternates.toString());  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString(),  alternates.toString());	  	non-compiled	[CE]  ';'  expected	1	None	add
131	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.isUnknownType());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.isUnknownType());  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    this.alternates)    {    Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.isUnknownType());	  	non-compiled	[CE]  ';'  expected	1	None	add
132	[BUG]  [BUGGY]  for(JSType  t  :  getOwners())  {  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getOwners())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwners())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
133	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypes())  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getDeclaredTypes())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypes())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
134	[BUG]  [BUGGY]  for(JSType  t  :  getOwnSideEffects())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getOwnSideEffects())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnSideEffects())  {	  for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
135	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().isUnknownType();	      JSType    alternates    =    getImplicitReturnType();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
136	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());	  	non-compiled	[CE]  ';'  expected	17	None	add
137	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.next().isUnknownType());  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.next().isUnknownType());  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.next().isUnknownType());	  	non-compiled	[CE]  ';'  expected	17	None	add
138	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.isUnknownType());  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.isUnknownType());  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.isUnknownType());	  	non-compiled	[CE]  ';'  expected	17	None	add
139	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUnknownType());  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUnknownType());  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType    t    :    getAlternates())    {    Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUnknownType());	  	non-compiled	[CE]  ';'  expected	17	None	add
140	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.NO_OBJECT_TYPE);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
141	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_TYPE);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_TYPE);  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.NO_TYPE);	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
142	[BUG]  [BUGGY]  for(JSType  t  :  other.alternators)  {  [CE]  cannot  find  symbol  other  [FE]          AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  other.alternators)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.alternators)  {	  for(JSType    t    :    this.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  other	3	None	replace
143	[BUG]  [BUGGY]  for(JSType  t  :  this.astRoots)  {  [CE]  cannot  find  symbol  astRoots  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  this.astRoots)  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.astRoots)  {	  for(JSType    t    :    this.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  astRoots	3	None	replace
144	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).iterator();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates).iterator();	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
145	[BUG]  [BUGGY]  for(JSType  t  :  alternates.getImmediateParentConstructors())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  for(JSType  t  :  alternates.getImmediateParentConstructors())  {  [BUGGY]    if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.getImmediateParentConstructors())  {	  for(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
146	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(required);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
147	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(externals);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(externals);  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(externals);	      Set    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
148	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.getAlternates();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    public  boolean  isUnknownType()  {    [BUGGY]  JSType  alternates  =(JSType)this.alternates.getAlternates();  [BUGGY]    for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.getAlternates();	      JSType    alternates    =(JSType)super.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
