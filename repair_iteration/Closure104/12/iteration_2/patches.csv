bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates())  {	  for(JSType    t    :    alternates())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
2	[BUG]  [BUGGY]  for(JSType  t  :  others())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others())  {	  for(JSType    t    :    alternates())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
3	[BUG]  [BUGGY]  for(JSType  t  :  this.alternators())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternators())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternators())  {	  for(JSType    t    :    alternates())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
4	[BUG]  [BUGGY]  for(JSType  t  :  unions())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  unions())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  unions())  {	  for(JSType    t    :    alternates())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
5	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates.size()  -  1);	  JSType[]    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
6	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.size()  -  2);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.size()  -  2);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates.size()  -  2);	  JSType[]    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
7	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.size()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.size()  +  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates.size()  +  1);	  JSType[]    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
8	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.super.isUnknownType();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.super.isUnknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.super.isUnknownType();	  JSType    alternates    =(JSType)this.super.getAlternates();    	non-compiled	[CE]  	62	None	replace
9	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.super.isUnknownType()?  null  :  this.super.getAlternates();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.super.isUnknownType()?  null  :  this.super.getAlternates();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.super.isUnknownType()?  null  :  this.super.getAlternates();	  JSType    alternates    =(JSType)this.super.getAlternates();    	non-compiled	[CE]  	62	None	replace
10	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().values().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().values().iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().values().iterator();	  JSType    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().get( "unknownType ").iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().get( "unknownType ").iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().get( "unknownType ").iterator();	  JSType    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors().keySet())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors().keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors().keySet())  {	  for(JSType    t    :    getImmediateParentConstructors().values())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
13	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  alternates.values())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  alternates.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  alternates.values())  {	  for(JSType    t    :    getImmediateParentConstructors().values())    {    	non-compiled	[CE]  ')'  expected	9	None	replace
14	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors().types())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors().types())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors().types())  {	  for(JSType    t    :    getImmediateParentConstructors().values())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
15	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(this.alternates).iterator();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(this.alternates).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(this.alternates).iterator();	  JSType    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
16	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(interiors).iterator();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(interiors).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(interiors).iterator();	  JSType    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
17	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(types).iterator();  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(types).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(types).iterator();	  JSType    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
18	[BUG]  [BUGGY]  For(JSType  t  :  this.alternates)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  this.alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  this.alternates)  {	  for(JSType    t    :    this.alternates)    {    For(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
19	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getName())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getName())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getName())  {	  for(JSType    t    :    getImplicitReturnType().getSimpleName())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
20	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().name())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().name())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().name())  {	  for(JSType    t    :    getImplicitReturnType().getSimpleName())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
21	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().simpleName())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().simpleName())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().simpleName())  {	  for(JSType    t    :    getImplicitReturnType().getSimpleName())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
22	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates,  false)  {  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates,  false)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates,  false)  {	  for(JSType    t    :    this.alternates,    true)    {    	non-compiled	[CE]  	105	None	replace
23	[BUG]  [BUGGY]  for(JSType  t  :  alternates,  true)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates,  true)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates,  true)  {	  for(JSType    t    :    this.alternates,    true)    {    	non-compiled	[CE]  	105	None	replace
24	[BUG]  [BUGGY]  for(JSType  t  :  others,  true)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others,  true)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others,  true)  {	  for(JSType    t    :    this.alternates,    true)    {    	non-compiled	[CE]  	105	None	replace
25	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList(alternates.size());	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
26	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newArrayList(alternates.size());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newArrayList(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newArrayList(alternates.size());	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
27	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  List.newArrayList(alternates.size());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  List.newArrayList(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  List.newArrayList(alternates.size());	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
28	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList(alternates.size());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList(alternates.size());	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
29	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.iterator().values())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.iterator().values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.iterator().values())  {	  for(JSType    t    :    this.alternates.values())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
30	[BUG]  [BUGGY]  for(JSType  t  :  this.types.keySet())  {  [CE]  cannot  find  symbol  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.types.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.types.keySet())  {	  for(JSType    t    :    this.types)    {    	non-compiled	[CE]  cannot  find  symbol  types	110	None	replace
31	[BUG]  [BUGGY]  for(JSType  t  :  this.types.values())  {  [CE]  cannot  find  symbol  types  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.types.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.types.values())  {	  for(JSType    t    :    this.types)    {    	non-compiled	[CE]  cannot  find  symbol  types	110	None	replace
32	[BUG]  [BUGGY]  for(JSType  t  :  this.types.values)  {  [CE]  cannot  find  symbol  types  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.types.values)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.types.values)  {	  for(JSType    t    :    this.types)    {    	non-compiled	[CE]  cannot  find  symbol  types	110	None	replace
33	[BUG]  [BUGGY]  for(JSType  t  :  this.types.iterator())  {  [CE]  cannot  find  symbol  types  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.types.iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.types.iterator())  {	  for(JSType    t    :    this.types)    {    	non-compiled	[CE]  cannot  find  symbol  types	110	None	replace
34	[BUG]  [BUGGY]  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Iterator  <  JSType>  alternates  =  getAlternates().iterator();	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
35	[BUG]  [BUGGY]  for(JSType  t  :  getAllAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAllAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAllAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
36	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
37	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates().iterator();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates().iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates().iterator();	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  incompatible  types	84	None	replace
38	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  new  ArrayList  <  JSType>();  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  new  ArrayList  <  JSType>();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  new  ArrayList  <  JSType>();  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
39	[BUG]  [BUGGY]  For(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
40	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonTypes())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonTypes())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonTypes())  {	  for(JSType    t    :    getAlternates())    {    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
41	[BUG]  [BUGGY]  JSType  t  =  Collections.newHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Collections.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Collections.newHashSet();	  JSType    t    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
42	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(false,  true);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(false,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(false,  true);	  JSType    alternates    =    getSingleNodeType().getAlternates(false);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
43	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(false,  false);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(false,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(false,  false);	  JSType    alternates    =    getSingleNodeType().getAlternates(false);    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
44	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(alternates.size()  -  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(alternates.size()  -  2);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.get(alternates.size()  -  2);	  JSType    alternates    =(JSType)alternates.get(this.alternates.size());    	non-compiled	[CE]  illegal  start  of  type	122	None	replace
45	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates();  }	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
46	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates();	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    	non-compiled	[CE]  incompatible  types	5	None	replace
47	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  List  <  JSType>  alternates  =  getAlternates();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  List  <  JSType>  alternates  =  getAlternates();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  List  <  JSType>  alternates  =  getAlternates();	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
48	[BUG]  [BUGGY]  HashSet  <  JSType>  alternates  =  getAlternates();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  HashSet  <  JSType>  alternates  =  getAlternates();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	HashSet  <  JSType>  alternates  =  getAlternates();	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  for(JSType  t  :  getAllAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAllAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAllAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
50	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newArrayList(alternates);	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
51	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates);	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
52	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Arrays.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Arrays.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Arrays.newArrayList(alternates);	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
53	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
54	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(this.alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(this.alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(this.alternates);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
55	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates,  true);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
56	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(interiors);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(interiors);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(interiors);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
57	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates,  false);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
58	[BUG]  [BUGGY]  for(JSType  t  :  this.values())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.values())  {	  for(JSType    t    :    other.values())    {    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
59	[BUG]  [BUGGY]  for(JSType  t  :  equals.values())  {  [CE]  cannot  find  symbol  equals  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  equals.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  equals.values())  {	  for(JSType    t    :    other.values())    {    	non-compiled	[CE]  cannot  find  symbol  equals	128	None	replace
60	[BUG]  [BUGGY]  for(JSType  t  :  new  JSType[values())  {  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  new  JSType[values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  new  JSType[values())  {	  for(JSType    t    :    other.values())    {    	non-compiled	[CE]  ']'  expected	128	None	replace
61	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
62	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet();  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
63	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet();  [CE]  cannot  find  symbol  Sets  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet();	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol  Sets	68	None	replace
64	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  List  <  JSType>  alternates  =  Sets.newArrayList();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  List  <  JSType>  alternates  =  Sets.newArrayList();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  List  <  JSType>  alternates  =  Sets.newArrayList();	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
65	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors).iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors).iterator();	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors).iterator();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
66	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternators).iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternators).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternators).iterator();	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors).iterator();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
67	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(interiors).iterator();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(interiors).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(interiors).iterator();	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors).iterator();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
68	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
69	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
70	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(changes.next());  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(changes.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(changes.next());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
71	[BUG]  [BUGGY]  for(JSType  t  :  alternates.iterator())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates.iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.iterator())  {	  for(JSType    t    :    getAlternates().iterator())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	25	None	replace
72	[BUG]  [BUGGY]  for(JSType  t  :  alternates().iterator())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates().iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates().iterator())  {	  for(JSType    t    :    getAlternates().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
73	[BUG]  [BUGGY]  for(JSType  t  :  others.iterator())  {  [CE]  cannot  find  symbol  others  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others.iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.iterator())  {	  for(JSType    t    :    getAlternates().iterator())    {    	non-compiled	[CE]  cannot  find  symbol  others	25	None	replace
74	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates().values().iterator())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates().values().iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates().values().iterator())  {	  for(JSType    t    :    getAlternates().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
75	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.singleton())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.singleton())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.singleton())  {	  for(JSType    t    :    this.alternates)    {    for(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
76	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    List    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
77	[BUG]  [BUGGY]  for(JSType  t  :  getAllAlternates())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAllAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAllAlternates())  {	  for(JSType    t    :    getAlternates())    {    List    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
78	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  this.alternates)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  this.alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  this.alternates)  {	  for(JSType    t    :    getAlternates())    {    List    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
79	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE,  1);	  JSType    t    =    getNativeType(UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
80	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE,  DEFAULT_TYPE);	  JSType    t    =    getNativeType(UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
81	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  2);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE,  2);	  JSType    t    =    getNativeType(UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
82	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);	  JSType    t    =    getNativeType(UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
83	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  this.alternators);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  this.alternators);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE,  this.alternators);	  JSType    t    =    getNativeType(UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
84	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates,  true);	  JSType    t    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
85	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  alternates);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates,  alternates);	  JSType    t    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
86	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates,  1);	  JSType    t    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
87	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newArrayList();	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
88	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>();	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
89	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(Arrays.asList(alternates));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(Arrays.asList(alternates));  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(Arrays.asList(alternates));	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
90	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Arrays.newHashSet();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Arrays.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Arrays.newHashSet();	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
91	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Arrays.newArrayList();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Arrays.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Arrays.newArrayList();	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
92	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Lists.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newArrayList();	  List    <    JSType>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
93	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Lists.newHashSet();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Lists.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Lists.newHashSet();	  List    <    JSType>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
94	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newLinkedList();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Lists.newLinkedList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newLinkedList();	  List    <    JSType>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
95	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
96	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
97	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.alternates.getOwner();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)super.alternates.getOwner();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.alternates.getOwner();	  JSType    alternates    =(JSType)super.alternates.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
98	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newArrayList(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Lists.newArrayList(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newArrayList(alternates.size());	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
99	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates.size()  -  1);	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
100	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
101	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newHashSet(alternates.size()  -  1);	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
102	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.next().isUnknownType());    	non-compiled	[CE]  <identifier>  expected	139	None	replace
103	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUn  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUn  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUn	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.next().isUnknownType());    	non-compiled	[CE]  ')'  expected	139	None	replace
104	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.n  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.n  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.n	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.next().isUnknownType());    	non-compiled	[CE]  ')'  expected	139	None	replace
105	[BUG]  [BUGGY]  for(JSType  t  :  this.alternators.keySet())  {  [CE]  cannot  find  symbol  alternators  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternators.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternators.keySet())  {	  for(JSType    t    :    this.alternators.size())    {    	non-compiled	[CE]  cannot  find  symbol  alternators	36	None	replace
106	[BUG]  [BUGGY]  for(JSType  t  :  this.alternators.iterator())  {  [CE]  cannot  find  symbol  alternators  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternators.iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternators.iterator())  {	  for(JSType    t    :    this.alternators.size())    {    	non-compiled	[CE]  cannot  find  symbol  alternators	36	None	replace
107	[BUG]  [BUGGY]  for(JSType  t  :  this.alternators.get(0))  {  [CE]  cannot  find  symbol  alternators  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternators.get(0))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternators.get(0))  {	  for(JSType    t    :    this.alternators.size())    {    	non-compiled	[CE]  cannot  find  symbol  alternators	36	None	replace
108	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().iterator().values();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().iterator().values();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().iterator().values();	  JSType    alternates    =    getAlternates().values();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
109	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().get( "unknownType ");  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().get( "unknownType ");  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().get( "unknownType ");	  JSType    alternates    =    getAlternates().values();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
110	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.get(0))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.get(0))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.get(0))  {	  for(JSType    t    :    this.alternates.size())    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
111	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.iterator().next())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.iterator().next())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.iterator().next())  {	  for(JSType    t    :    this.alternates.size())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	125	None	replace
112	[BUG]  [BUGGY]  for(JSType  t  :  alternates.keySet())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.keySet())  {	  for(JSType    t    :    this.alternates.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
113	[BUG]  [BUGGY]  for(JSType  t  :  others.keySet())  {  [CE]  cannot  find  symbol  others  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.keySet())  {	  for(JSType    t    :    this.alternates.keySet())    {    	non-compiled	[CE]  cannot  find  symbol  others	20	None	replace
114	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.iterator().keySet())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.iterator().keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.iterator().keySet())  {	  for(JSType    t    :    this.alternates.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
115	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  null  :  getImplicitReturnType().restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  null  :  getImplicitReturnType().restrictByNotNullOrUndefined();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().isUnknownType()?  null  :  getImplicitReturnType().restrictByNotNullOrUndefined();	  JSType    alternates    =    getImplicitReturnType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
116	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_OBJECT_TYPE,  alternates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_OBJECT_TYPE,  alternates);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.NO_OBJECT_TYPE,  alternates);	  JSType    t    =    getNativeType(JSTypeNative.NO_OBJECT_TYPE);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
117	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(externals);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(externals);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(externals);	  Set    <    JSType>    alternates    =    Sets.newHashSet(externals);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
118	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.externals);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.externals);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(this.externals);	  Set    <    JSType>    alternates    =    Sets.newHashSet(externals);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
119	[BUG]  [BUGGY]  for(JSType  t  :  alternates.alternators)  {  [CE]  cannot  find  symbol  alternators  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates.alternators)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.alternators)  {	  for(JSType    t    :    other.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  alternators	142	None	replace
120	[BUG]  [BUGGY]  for(JSType  t  :  others.alternators)  {  [CE]  cannot  find  symbol  others  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others.alternators)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.alternators)  {	  for(JSType    t    :    other.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  others	142	None	replace
121	[BUG]  [BUGGY]  HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
122	[BUG]  [BUGGY]  for(JSType  t  :  getAlways())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlways())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlways())  {	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
123	[BUG]  [BUGGY]  HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternators())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternators())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	HashSet  <  JSType>  alternates  =  getAlternates();  for(JSType  t  :  getAlternators())  {	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
124	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Lists.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newArrayList(alternates);	  List    <    JSType>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
125	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Lists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Lists.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Lists.newHashSet(alternates);	  List    <    JSType>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
126	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(this.alternates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(this.alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newHashSet(this.alternates);	  List    <    JSType>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
127	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturn(),  alternates)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturn(),  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturn(),  alternates)  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  	119	None	replace
128	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturn().asType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturn().asType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturn().asType())  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
129	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnName())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnName())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnName())  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
130	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturn().symbol())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturn().symbol())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturn().symbol())  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
131	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonType().getUnknownType())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonType().getUnknownType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonType().getUnknownType())  {	  for(JSType    t    :    getSingletonType())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
132	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonType().singleton)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonType().singleton)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonType().singleton)  {	  for(JSType    t    :    getSingletonType())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
133	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonType().getBaseType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonType().getBaseType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonType().getBaseType())  {	  for(JSType    t    :    getSingletonType())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
134	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().iterator().getNext();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().iterator().getNext();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().iterator().getNext();	  JSType    alternates    =    getAlternates().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
135	[BUG]  [BUGGY]  for(JSType  t  :  getEmptyAlternates())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getEmptyAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getEmptyAlternates())  {	  for(JSType    t    :    getAlternates())    {    for(JSType    t    :    getAllAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
136	[BUG]  [BUGGY]  for(JSType  t  :  this.changes.values())  {  [CE]  cannot  find  symbol  changes  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.changes.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.changes.values())  {	  for(JSType    t    :    this.changes.size())    {    	non-compiled	[CE]  cannot  find  symbol  changes	116	None	replace
137	[BUG]  [BUGGY]  for(JSType  t  :  this.changes.iterator().next())  {  [CE]  cannot  find  symbol  changes  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.changes.iterator().next())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.changes.iterator().next())  {	  for(JSType    t    :    this.changes.size())    {    	non-compiled	[CE]  cannot  find  symbol  changes	116	None	replace
138	[BUG]  [BUGGY]  for(JSType  t  :  this.changes.keySet())  {  [CE]  cannot  find  symbol  changes  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.changes.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.changes.keySet())  {	  for(JSType    t    :    this.changes.size())    {    	non-compiled	[CE]  cannot  find  symbol  changes	116	None	replace
139	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(required,  true);	  Set    <    JSType>    alternates    =    Sets.newHashSet(required);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
140	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(required,  false);	  Set    <    JSType>    alternates    =    Sets.newHashSet(required);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
141	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.required);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.required);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(this.required);	  Set    <    JSType>    alternates    =    Sets.newHashSet(required);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
142	[BUG]  [BUGGY]  For(JSType  t  :  getImmediateParentConstructors(),  alternates)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImmediateParentConstructors(),  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImmediateParentConstructors(),  alternates)  {	  For(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  ')'  expected	82	None	replace
143	[BUG]  [BUGGY]  For(JSType  t  :  getImmediateParents())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImmediateParents())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImmediateParents())  {	  For(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  ')'  expected	82	None	replace
144	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  ArrayList.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  ArrayList.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  ArrayList.newArrayList(alternates);	  ArrayList    <    String>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
145	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  new  ArrayList  <  String>(alternates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  new  ArrayList  <  String>(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  new  ArrayList  <  String>(alternates);	  ArrayList    <    String>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
146	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  List.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  List.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  List.newArrayList(alternates);	  ArrayList    <    String>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
147	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Lists.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Lists.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Lists.newArrayList(alternates);	  ArrayList    <    String>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
148	[BUG]  [BUGGY]  List  <  String>  alternates  =  ArrayList.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  ArrayList.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  ArrayList.newArrayList(alternates);	  ArrayList    <    String>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
149	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(this.alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(this.alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(this.alternates);	  JSType[]    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
150	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates,  true);	  JSType[]    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
151	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates,  false);	  JSType[]    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
152	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(interiors);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(interiors);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(interiors);	  JSType[]    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
153	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates,  1);	  JSType[]    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
154	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.super.restrictByNotNullOrUndefined();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.super.restrictByNotNullOrUndefined();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.super.restrictByNotNullOrUndefined();	  JSType    alternates    =(JSType)super.restrictByNotNullOrUndefined();    	non-compiled	[CE]  	63	None	replace
155	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.getRestrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)super.getRestrictByNotNullOrUndefined();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.getRestrictByNotNullOrUndefined();	  JSType    alternates    =(JSType)super.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
156	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(true,  false);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(true,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(true,  false);	  JSType    alternates    =    getSingleNodeType().getAlternates(true);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
157	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  true  :  false;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  true  :  false;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().isUnknownType()?  true  :  false;	  JSType    alternates    =    getImplicitReturnType().isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
158	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  null  :  getImplicitReturnType().isUnknownType();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  null  :  getImplicitReturnType().isUnknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().isUnknownType()?  null  :  getImplicitReturnType().isUnknownType();	  JSType    alternates    =    getImplicitReturnType().isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
159	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  true  :  null;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  true  :  null;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().isUnknownType()?  true  :  null;	  JSType    alternates    =    getImplicitReturnType().isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
160	[BUG]  [BUGGY]  JSType  t  =  getNativeType(NO_TYPE);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(NO_TYPE);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(NO_TYPE);	  JSType    t    =    getNativeType(NULL_TYPE);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
161	[BUG]  [BUGGY]  JSType  t  =  getNativeType(NULL_TYPE,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(NULL_TYPE,  true);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(NULL_TYPE,  true);	  JSType    t    =    getNativeType(NULL_TYPE);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
162	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(references);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(references);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(references);	  Set    <    JSType>    alternates    =    Sets.newHashSet(references);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
163	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(references,  true);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(references,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(references,  true);	  Set    <    JSType>    alternates    =    Sets.newHashSet(references);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
164	[BUG]  [BUGGY]  JSType  alternates  =  getReturnType().restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getReturnType().restrictByNotNullOrUndefined();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getReturnType().restrictByNotNullOrUndefined();	  JSType    alternates    =    getReturnType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
165	[BUG]  [BUGGY]  JSType  alternates  =  getReturnType().restrictByNotNullOrUnknownType();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getReturnType().restrictByNotNullOrUnknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getReturnType().restrictByNotNullOrUnknownType();	  JSType    alternates    =    getReturnType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
166	[BUG]  [BUGGY]  JSType  alternates  =  getReturnType().getNativeType(UNKNOWN_TYPE);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getReturnType().getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getReturnType().getNativeType(UNKNOWN_TYPE);	  JSType    alternates    =    getReturnType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
167	[BUG]  [BUGGY]  JSType  alternates  =  getReturnType().isUnknownType();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getReturnType().isUnknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getReturnType().isUnknownType();	  JSType    alternates    =    getReturnType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
168	[BUG]  [BUGGY]  for(JSType  t  :  alternates.getImmediateParents())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates.getImmediateParents())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.getImmediateParents())  {	  for(JSType    t    :    getImmediateParents())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
169	[BUG]  [BUGGY]  for(JSType  t  :  getSingleImmediateParents())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingleImmediateParents())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingleImmediateParents())  {	  for(JSType    t    :    getImmediateParents())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
170	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParents(),  alternates)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParents(),  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParents(),  alternates)  {	  for(JSType    t    :    getImmediateParents())    {    	non-compiled	[CE]  	8	None	replace
171	[BUG]  [BUGGY]  List  <  String>  alternates  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Lists.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Lists.newArrayList();	  List    <    String>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
172	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Lists.newHashSet();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  String>  alternates  =  Lists.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  String>  alternates  =  Lists.newHashSet();	  List    <    String>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
173	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Lists.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Lists.newArrayList();	  List    <    String>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
174	[BUG]  [BUGGY]  List  <  String>  alternates  =  Lists.newLinkedList();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Lists.newLinkedList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Lists.newLinkedList();	  List    <    String>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
175	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(reversed);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(reversed);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(reversed);	  Set    <    JSType>    alternates    =    Sets.newHashSet(reversed);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
176	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(reversed,  false);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(reversed,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(reversed,  false);	  Set    <    JSType>    alternates    =    Sets.newHashSet(reversed);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
177	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(reversed,  true);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(reversed,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(reversed,  true);	  Set    <    JSType>    alternates    =    Sets.newHashSet(reversed);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
178	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
179	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
180	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newArrayList(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newArrayList(alternates).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newArrayList(alternates).iterator();	  JSType    alternates    =    Lists.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
181	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newHashSet(this.alternates).iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newHashSet(this.alternates).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newHashSet(this.alternates).iterator();	  JSType    alternates    =    Lists.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
182	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newHashSet(interiors).iterator();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newHashSet(interiors).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newHashSet(interiors).iterator();	  JSType    alternates    =    Lists.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
183	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newHashSet(types).iterator();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newHashSet(types).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newHashSet(types).iterator();	  JSType    alternates    =    Lists.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
184	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList(alternates);	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
185	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  List.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  List.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  List.newArrayList(alternates);	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
186	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  List.newArrayList();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  List.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  List.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
187	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
188	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString()  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString()	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.next().isUnknownType());    	non-compiled	[CE]  ')'  expected	137	None	replace
189	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.next().isUnknownType());    	non-compiled	[CE]  <identifier>  expected	137	None	replace
190	[BUG]  [BUGGY]  For(JSType  t  :  getOwnAlternates())  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getOwnAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getOwnAlternates())  {	  for(JSType    t    :    getAlternates())    {    For(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
191	[BUG]  [BUGGY]  For(JSType  t  :  getSingletonType())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getSingletonType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getSingletonType())  {	  for(JSType    t    :    getAlternates())    {    For(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
192	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  new  ArrayList  <  String>();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  new  ArrayList  <  String>();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  new  ArrayList  <  String>();	  ArrayList    <    String>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
193	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Arrays.newHashSet();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  String>  alternates  =  Arrays.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  String>  alternates  =  Arrays.newHashSet();	  ArrayList    <    String>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
194	[BUG]  [BUGGY]  List  <  String>  alternates  =  Arrays.newArrayList();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Arrays.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Arrays.newArrayList();	  ArrayList    <    String>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
195	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newArrayList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Arrays.newArrayList();	  ArrayList    <    String>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
196	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
197	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
198	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  [CE]  cannot  find  symbol  Sets  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(this.alternates);    	non-compiled	[CE]  cannot  find  symbol  Sets	69	None	replace
199	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  List  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  List  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  List  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
200	[BUG]  [BUGGY]  for(JSType  t  :  arrays.size())  {  [CE]  cannot  find  symbol  arrays  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  arrays.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  arrays.size())  {	  for(JSType    t    :    alternates.size())    {    	non-compiled	[CE]  cannot  find  symbol  arrays	34	None	replace
201	[BUG]  [BUGGY]  for(JSType  t  :  this.alterns)  {  [CE]  cannot  find  symbol  alterns  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alterns)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alterns)  {	  for(JSType    t    :    this.astRoots)    {    	non-compiled	[CE]  cannot  find  symbol  alterns	143	None	replace
202	[BUG]  [BUGGY]  for(JSType  t  :  this.arrangements)  {  [CE]  cannot  find  symbol  arrangements  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.arrangements)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.arrangements)  {	  for(JSType    t    :    this.astRoots)    {    	non-compiled	[CE]  cannot  find  symbol  arrangements	143	None	replace
203	[BUG]  [BUGGY]  for(JSType  t  :  this.placeholders)  {  [CE]  cannot  find  symbol  placeholders  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.placeholders)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.placeholders)  {	  for(JSType    t    :    this.astRoots)    {    	non-compiled	[CE]  cannot  find  symbol  placeholders	143	None	replace
204	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_TYPE,  alternates);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_TYPE,  alternates);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.NO_TYPE,  alternates);	  JSType    t    =    getNativeType(JSTypeNative.NO_TYPE);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
205	[BUG]  [BUGGY]  for(JSType  t  :  this.assignments.values())  {  [CE]  cannot  find  symbol  assignments  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.assignments.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.assignments.values())  {	  for(JSType    t    :    this.assignments.size())    {    	non-compiled	[CE]  cannot  find  symbol  assignments	37	None	replace
206	[BUG]  [BUGGY]  for(JSType  t  :  this.assignments.keySet())  {  [CE]  cannot  find  symbol  assignments  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.assignments.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.assignments.keySet())  {	  for(JSType    t    :    this.assignments.size())    {    	non-compiled	[CE]  cannot  find  symbol  assignments	37	None	replace
207	[BUG]  [BUGGY]  for(JSType  t  :  this.assignments.iterator().next())  {  [CE]  cannot  find  symbol  assignments  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.assignments.iterator().next())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.assignments.iterator().next())  {	  for(JSType    t    :    this.assignments.size())    {    	non-compiled	[CE]  cannot  find  symbol  assignments	37	None	replace
208	[BUG]  [BUGGY]  for(JSType  t  :  this.assignments.get(0))  {  [CE]  cannot  find  symbol  assignments  [FE]                              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.assignments.get(0))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.assignments.get(0))  {	  for(JSType    t    :    this.assignments.size())    {    	non-compiled	[CE]  cannot  find  symbol  assignments	37	None	replace
209	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getBaseType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getBaseType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getBaseType())  {	  for(JSType    t    :    getImplicitReturnType().getRawClass())    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
210	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getUnknownType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getUnknownType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getUnknownType())  {	  for(JSType    t    :    getImplicitReturnType().getRawClass())    {    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
211	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.isUn  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.isUn  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.isUn	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.isUnknownType());    	non-compiled	[CE]  ')'  expected	138	None	replace
212	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  it  =  getAlternates().iterator();  while(it.hasNext())  {  alternates.put(it.next().getName(),  it.isUnknownType());  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  it  =  getAlternates().iterator();  while(it.hasNext())  {  alternates.put(it.next().getName(),  it.isUnknownType());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  it  =  getAlternates().iterator();  while(it.hasNext())  {  alternates.put(it.next().getName(),  it.isUnknownType());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
213	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(VAR_UNKNOWN_TYPE))  {  [CE]  cannot  find  symbol  VAR_UNKNOWN_TYPE  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(VAR_UNKNOWN_TYPE))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(VAR_UNKNOWN_TYPE))  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  cannot  find  symbol  VAR_UNKNOWN_TYPE	100	None	replace
214	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UnionType.UNKNOWN_TYPE))  {  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UnionType.UNKNOWN_TYPE))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(UnionType.UNKNOWN_TYPE))  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	100	None	replace
215	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE,  true))  {  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE,  true))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE,  true))  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	100	None	replace
216	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(SYNTHETIC_TYPE))  {  [CE]  cannot  find  symbol  SYNTHETIC_TYPE  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(SYNTHETIC_TYPE))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(SYNTHETIC_TYPE))  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  cannot  find  symbol  SYNTHETIC_TYPE	100	None	replace
217	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(this.alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(this.alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.get(this.alternates.size());	  JSType    alternates    =(JSType)alternates.get(this.alternates.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
218	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(this.alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(this.alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.get(this.alternates.size()  -  1);	  JSType    alternates    =(JSType)alternates.get(this.alternates.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
219	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypes(),  alternates)  {  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypes(),  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypes(),  alternates)  {	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  	133	None	replace
220	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypes().values())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypes().values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypes().values())  {	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
221	[BUG]  [BUGGY]  for(JSType  t  :  getAssignedTypes())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAssignedTypes())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAssignedTypes())  {	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
222	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  1);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
223	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  2);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  -  2);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
224	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors);	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
225	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors);	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
226	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternators);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternators);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternators);	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
227	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternators);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternators);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternators);	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
228	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.alternates.get(alternates.size());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)super.alternates.get(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.alternates.get(alternates.size());	  JSType    alternates    =(JSType)super.alternates.get(alternates.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
229	[BUG]  [BUGGY]  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError[this.alternates.size()    ];    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
230	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError[this.alternates.size()    ];    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
231	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError[this.alternates.size()    ];    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
232	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError[this.alternates.size()    ];    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
233	[BUG]  [BUGGY]  for(JSType  t  :  getSimpleParentConstructors())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSimpleParentConstructors())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSimpleParentConstructors())  {	  for(JSType    t    :    getSimpleImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
234	[BUG]  [BUGGY]  for(JSType  t  :  getSimpleImmediateParentConstructors(),  alternates)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSimpleImmediateParentConstructors(),  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSimpleImmediateParentConstructors(),  alternates)  {	  for(JSType    t    :    getSimpleImmediateParentConstructors())    {    	non-compiled	[CE]  	6	None	replace
235	[BUG]  [BUGGY]  for(JSType  t  :  getSimpleImmediateParentConstructors().values())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSimpleImmediateParentConstructors().values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSimpleImmediateParentConstructors().values())  {	  for(JSType    t    :    getSimpleImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
236	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);	  JSType    t    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
237	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  false).iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  false).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates,  false).iterator();	  JSType    t    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
238	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  alternates).iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  alternates).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates,  alternates).iterator();	  JSType    t    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
239	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  1);	  JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
240	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  2);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  2);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  2);	  JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
241	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  3);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  3);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  3);	  JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
242	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  this.alternators);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  this.alternators);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  this.alternators);	  JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
243	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Arrays.newArrayList(alternates);	  ArrayList    <    String>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
244	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Arrays.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  String>  alternates  =  Arrays.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  String>  alternates  =  Arrays.newHashSet(alternates);	  ArrayList    <    String>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
245	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  new  ArrayList  <  String>(alternates.size());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  new  ArrayList  <  String>(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  new  ArrayList  <  String>(alternates.size());	  ArrayList    <    String>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
246	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE,  alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE,  alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE,  alternates);	  JSType    t    =    getNativeType(UnionType.UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
247	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE)+  1;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UnionType.UNKNOWN_TYPE)+  1;	  JSType    t    =    getNativeType(UnionType.UNKNOWN_TYPE);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
248	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
249	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
250	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
251	[BUG]  [BUGGY]  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Iterator  <  JSType>  alternates  =  this.alternates.iterator();	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
252	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
253	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
254	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(this.alternates).iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(this.alternates).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(this.alternates).iterator();	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
255	[BUG]  [BUGGY]  for(JSType  t  :  this.others.values())  {  [CE]  cannot  find  symbol  others  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.others.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.others.values())  {	  for(JSType    t    :    this.others.size())    {    	non-compiled	[CE]  cannot  find  symbol  others	35	None	replace
256	[BUG]  [BUGGY]  for(JSType  t  :  this.others.iterator().next())  {  [CE]  cannot  find  symbol  others  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.others.iterator().next())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.others.iterator().next())  {	  for(JSType    t    :    this.others.size())    {    	non-compiled	[CE]  cannot  find  symbol  others	35	None	replace
257	[BUG]  [BUGGY]  for(JSType  t  :  this.others.keySet())  {  [CE]  cannot  find  symbol  others  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.others.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.others.keySet())  {	  for(JSType    t    :    this.others.size())    {    	non-compiled	[CE]  cannot  find  symbol  others	35	None	replace
258	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates.size()  -  1);	  JSType    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
259	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size()  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size()  +  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates.size()  +  1);	  JSType    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
260	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size()  -  2);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.size()  -  2);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates.size()  -  2);	  JSType    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
261	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newArrayList();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Sets.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newArrayList();	  List    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
262	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newLinkedHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newLinkedHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newLinkedHashSet();	  JSType[]    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
263	[BUG]  [BUGGY]  AnnotatedType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  AnnotatedType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	AnnotatedType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);	  JSType    t    =    getNativeType(UNKNOWN_TYPE);    alternates.add(t);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
264	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(this);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(this);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(this);	  JSType    alternates    =    getSingleNodeType().getAlternates(null);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
265	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(null,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(null,  null);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(null,  null);	  JSType    alternates    =    getSingleNodeType().getAlternates(null);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
266	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(replacements);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(replacements);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(replacements);	  JSType    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
267	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newLinkedHashSet();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newLinkedHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newLinkedHashSet();	  JSType    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
268	[BUG]  [BUGGY]  List  <  String>  alternates  =  Sets.newArrayList();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Sets.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Sets.newArrayList();	  List    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
269	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newArrayList();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newArrayList();	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
270	[BUG]  [BUGGY]  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
271	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
272	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
273	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
274	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.getEmptySet();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.getEmptySet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.getEmptySet();	  JSType    alternates    =(JSType)this.alternates.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
275	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.getImplicitReturn();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.getImplicitReturn();	  JSType    alternates    =(JSType)this.alternates.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
276	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.getAlternators();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.getAlternators();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.getAlternators();	  JSType    alternates    =(JSType)this.alternates.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
277	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
278	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.put(it.next().getString(),  it.isUnknownType());  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.put(it.next().getString(),  it.isUnknownType());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.put(it.next().getString(),  it.isUnknownType());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
279	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  ';'  expected	131	None	replace
280	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType());  }  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
281	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternations);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternations);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternations);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
282	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternations,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternations,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternations,  true);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
283	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
284	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.add(it.next());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.add(it.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.add(it.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
285	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(alternates.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
286	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.add(it.next());  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.add(it.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.add(it.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
287	[BUG]  [BUGGY]  JSType  t  =(JSType)this.alternates.get(1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =(JSType)this.alternates.get(1);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =(JSType)this.alternates.get(1);	  JSType    t    =(JSType)this.alternates.get(0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
288	[BUG]  [BUGGY]  JSType  t  =(JSType)this.alternates.get(0,  this.alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =(JSType)this.alternates.get(0,  this.alternates.size()  -  1);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =(JSType)this.alternates.get(0,  this.alternates.size()  -  1);	  JSType    t    =(JSType)this.alternates.get(0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
289	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newArrayList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Sets.newArrayList();	  ArrayList    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
290	[BUG]  [BUGGY]  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedErrorImpl(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
291	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedErrorImpl(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
292	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates,  true);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates,  true);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates,  true);  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedErrorImpl(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
293	[BUG]  [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedErrorImpl(this.alternates);    	non-compiled	[CE]  	92	None	replace
294	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedErrorImpl(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
295	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().names())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().names())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().names())  {	  for(JSType    t    :    getImplicitReturnType().values())    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
296	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().types())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().types())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().types())  {	  for(JSType    t    :    getImplicitReturnType().values())    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
297	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().synthetic())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().synthetic())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().synthetic())  {	  for(JSType    t    :    getImplicitReturnType().values())    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
298	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().unknownType())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().unknownType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().unknownType())  {	  for(JSType    t    :    getImplicitReturnType().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
299	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().isUnknownType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().isUnknownType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().isUnknownType())  {	  for(JSType    t    :    getImplicitReturnType().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
300	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().asUnknownType())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().asUnknownType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().asUnknownType())  {	  for(JSType    t    :    getImplicitReturnType().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
301	[BUG]  [BUGGY]  for(JSType  t  :  others.assignments)  {  [CE]  cannot  find  symbol  others  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others.assignments)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.assignments)  {	  for(JSType    t    :    this.assignments)    {    	non-compiled	[CE]  cannot  find  symbol  others	61	None	replace
302	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
303	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
304	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [CE]  cannot  find  symbol  Sets  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  cannot  find  symbol  Sets	66	None	replace
305	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates().iterator().values())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates().iterator().values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates().iterator().values())  {	  for(JSType    t    :    getAlternates().values())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
306	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates().keySet())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates().keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates().keySet())  {	  for(JSType    t    :    getAlternates().values())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
307	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
308	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
309	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternates,  true);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
310	[BUG]  [BUGGY]  for(JSType  t  :  this.alternators.getImmediateParentConstructors())  {  [CE]  cannot  find  symbol  alternators  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternators.getImmediateParentConstructors())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternators.getImmediateParentConstructors())  {	  for(JSType    t    :    alternates.getImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol  alternators	145	None	replace
311	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.getImmediateParentConstructors())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.getImmediateParentConstructors())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.getImmediateParentConstructors())  {	  for(JSType    t    :    alternates.getImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
312	[BUG]  [BUGGY]  for(JSType  t  :  others.getImmediateParentConstructors())  {  [CE]  cannot  find  symbol  others  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others.getImmediateParentConstructors())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.getImmediateParentConstructors())  {	  for(JSType    t    :    alternates.getImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol  others	145	None	replace
313	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.put(it.next().toString(),  it.toString());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.put(it.next().toString(),  it.toString());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  while(it.hasNext())  {  alternates.put(it.next().toString(),  it.toString());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
314	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  it  =  this.alternates.iterator();	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
315	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().toType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().toType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().toType())  {	  for(JSType    t    :    getImplicitReturnType().asType())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
316	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  2;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  2;	  JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
317	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)/  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)/  1;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)/  1;	  JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
318	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  this)  {	  for(JSType    t    :    getImmediateParentConstructors(),    alternates)    {    	non-compiled	[CE]  	7	None	replace
319	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.alternates)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  this.alternates)  {	  for(JSType    t    :    getImmediateParentConstructors(),    alternates)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
320	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.asParents)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.asParents)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  this.asParents)  {	  for(JSType    t    :    getImmediateParentConstructors(),    alternates)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
321	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.alternators)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.alternators)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  this.alternators)  {	  for(JSType    t    :    getImmediateParentConstructors(),    alternates)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
322	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.asStatic)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.asStatic)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  this.asStatic)  {	  for(JSType    t    :    getImmediateParentConstructors(),    alternates)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
323	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(this.alternates).iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(this.alternates).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(this.alternates).iterator();	  JSType[]    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
324	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);	  JSType[]    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
325	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(interiors).iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(interiors).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(interiors).iterator();	  JSType[]    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
326	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(types).iterator();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(types).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(types).iterator();	  JSType[]    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
327	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(alternates,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(alternates,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  String>  alternates  =  Sets.newHashSet(alternates,  false);	  Set    <    String>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
328	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Sets.newHashSet(alternates,  true);	  Set    <    String>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
329	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(required,  true);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  String>  alternates  =  Sets.newHashSet(required,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  String>  alternates  =  Sets.newHashSet(required,  true);	  Set    <    String>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
330	[BUG]  [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Sets.newHashSet(alternates,  true);	  Set    <    String>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
331	[BUG]  [BUGGY]  for(JSType  t  :  this.symbols.values())  {  [CE]  cannot  find  symbol  symbols  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.symbols.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.symbols.values())  {	  for(JSType    t    :    this.symbols)    {    	non-compiled	[CE]  cannot  find  symbol  symbols	58	None	replace
332	[BUG]  [BUGGY]  for(JSType  t  :  this.symbols.keySet())  {  [CE]  cannot  find  symbol  symbols  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.symbols.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.symbols.keySet())  {	  for(JSType    t    :    this.symbols)    {    	non-compiled	[CE]  cannot  find  symbol  symbols	58	None	replace
333	[BUG]  [BUGGY]  for(JSType  t  :  this.symbols.size())  {  [CE]  cannot  find  symbol  symbols  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.symbols.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.symbols.size())  {	  for(JSType    t    :    this.symbols)    {    	non-compiled	[CE]  cannot  find  symbol  symbols	58	None	replace
334	[BUG]  [BUGGY]  for(JSType  t  :  this.symbols,  alternates)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.symbols,  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.symbols,  alternates)  {	  for(JSType    t    :    this.symbols)    {    	non-compiled	[CE]  	58	None	replace
335	[BUG]  [BUGGY]  List  <  String>  alternates  =  Lists.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Lists.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Lists.newArrayList(alternates);	  List    <    String>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
336	[BUG]  [BUGGY]  Set  <  String>  alternates  =  Lists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  String>  alternates  =  Lists.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  String>  alternates  =  Lists.newHashSet(alternates);	  List    <    String>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
337	[BUG]  [BUGGY]  List  <  String>  alternates  =  Lists.newHashSet(this.alternates);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Lists.newHashSet(this.alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Lists.newHashSet(this.alternates);	  List    <    String>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
338	[BUG]  [BUGGY]  List  <  String>  alternates  =  Lists.newLinkedList(alternates);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Lists.newLinkedList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Lists.newLinkedList(alternates);	  List    <    String>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
339	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(reverse);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(reverse);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(reverse);	  Set    <    JSType>    alternates    =    Sets.newHashSet(reverse);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
340	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE,  true))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE,  true))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE,  true))  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
341	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE,  null))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE,  null))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE,  null))  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
342	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  alternates)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  alternates)  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE))    {    	non-compiled	[CE]  	101	None	replace
343	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  this)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  this)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  this)  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE))    {    	non-compiled	[CE]  	101	None	replace
344	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType().asParent())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType().asParent())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructorsForType().asParent())  {	  for(JSType    t    :    getImmediateParentConstructorsForType())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
345	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType(),  alternates)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType(),  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructorsForType(),  alternates)  {	  for(JSType    t    :    getImmediateParentConstructorsForType())    {    	non-compiled	[CE]  	83	None	replace
346	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType().type)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType().type)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructorsForType().type)  {	  for(JSType    t    :    getImmediateParentConstructorsForType())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
347	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType().values())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructorsForType().values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructorsForType().values())  {	  for(JSType    t    :    getImmediateParentConstructorsForType())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
348	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(0,  this.alternates.size());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.get(0,  this.alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.get(0,  this.alternates.size());	  JSType    alternates    =(JSType)this.alternates.get(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
349	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates(false);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates(false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates(false);	  JSType    alternates    =    getAlternates(true);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
350	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates(false,  false);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates(false,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates(false,  false);	  JSType    alternates    =    getAlternates(true);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
351	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates(false,  true);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates(false,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates(false,  true);	  JSType    alternates    =    getAlternates(true);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
352	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates(true,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates(true,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates(true,  false);	  JSType    alternates    =    getAlternates(true);    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
353	[BUG]  [BUGGY]  for(JSType  t  :  alternates.getOwnAlternates())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates.getOwnAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.getOwnAlternates())  {	  for(JSType    t    :    getOwnAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
354	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayLists.newArrayList(alternates);	  ArrayList    <    JSType>    alternates    =    ArrayLists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
355	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternates);	  ArrayList    <    JSType>    alternates    =    ArrayLists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
356	[BUG]  [BUGGY]  for(JSType  t  :  alternates.getOwnSideEffects())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates.getOwnSideEffects())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.getOwnSideEffects())  {	  for(JSType    t    :    getOwnSideEffects())    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
357	[BUG]  [BUGGY]  for(JSType  t  :  others.getOwnSideEffects())  {  [CE]  cannot  find  symbol  others  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others.getOwnSideEffects())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.getOwnSideEffects())  {	  for(JSType    t    :    getOwnSideEffects())    {    	non-compiled	[CE]  cannot  find  symbol  others	134	None	replace
358	[BUG]  [BUGGY]  for(JSType  t  :  getOwnSideEffects(),  alternates)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnSideEffects(),  alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnSideEffects(),  alternates)  {	  for(JSType    t    :    getOwnSideEffects())    {    	non-compiled	[CE]  	134	None	replace
359	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(interiors).iterator();	  List    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
360	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().setSimpleName( "UnknownType ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().setSimpleName( "UnknownType ");  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().setSimpleName( "UnknownType ");	  JSType    alternates    =    getImplicitReturnType().setSimpleName(   "unknownType   ");    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
361	[BUG]  [BUGGY]  for(JSType  t  :  this.unknownTypes.values())  {  [CE]  cannot  find  symbol  unknownTypes  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.unknownTypes.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.unknownTypes.values())  {	  for(JSType    t    :    this.alternators.values())    {    	non-compiled	[CE]  cannot  find  symbol  unknownTypes	48	None	replace
362	[BUG]  [BUGGY]  for(JSType  t  :  this.mutators.values())  {  [CE]  cannot  find  symbol  mutators  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.mutators.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.mutators.values())  {	  for(JSType    t    :    this.alternators.values())    {    	non-compiled	[CE]  cannot  find  symbol  mutators	48	None	replace
363	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Sets.newHashSet(alternates);	  List    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
364	[BUG]  [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet(this.alternates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Sets.newHashSet(this.alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Sets.newHashSet(this.alternates);	  List    <    String>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
365	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE)+  2;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE)+  2;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE)+  2;	  JSType    t    =    getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
366	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE)/  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE)/  1;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE)/  1;	  JSType    t    =    getNativeType(UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
367	[BUG]  [BUGGY]  for(JSType  t  :  this.unknownTypes.keySet())  {  [CE]  cannot  find  symbol  unknownTypes  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.unknownTypes.keySet())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.unknownTypes.keySet())  {	  for(JSType    t    :    this.unknownTypes)    {    	non-compiled	[CE]  cannot  find  symbol  unknownTypes	59	None	replace
368	[BUG]  [BUGGY]  for(JSType  t  :  this.unknownTypes.size())  {  [CE]  cannot  find  symbol  unknownTypes  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.unknownTypes.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.unknownTypes.size())  {	  for(JSType    t    :    this.unknownTypes)    {    	non-compiled	[CE]  cannot  find  symbol  unknownTypes	59	None	replace
369	[BUG]  [BUGGY]  for(JSType  t  :  this.unknownTypes.asList())  {  [CE]  cannot  find  symbol  unknownTypes  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.unknownTypes.asList())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.unknownTypes.asList())  {	  for(JSType    t    :    this.unknownTypes)    {    	non-compiled	[CE]  cannot  find  symbol  unknownTypes	59	None	replace
370	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  1);  return  t.isUnknownType();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  1);  return  t.isUnknownType();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE,  1);  return  t.isUnknownType();	  JSType    t    =    getNativeType(UNKNOWN_TYPE);    return    t.isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
371	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(this.alternations);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(this.alternations);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(this.alternations);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
372	[BUG]  [BUGGY]  for(JSType  t  :  alternates.getOwners())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates.getOwners())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.getOwners())  {	  for(JSType    t    :    getOwners())    {    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
373	[BUG]  [BUGGY]  for(JSType  t  :  others.getOwners())  {  [CE]  cannot  find  symbol  others  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others.getOwners())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.getOwners())  {	  for(JSType    t    :    getOwners())    {    	non-compiled	[CE]  cannot  find  symbol  others	132	None	replace
374	[BUG]  [BUGGY]  FOR(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  FOR(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	FOR(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    FOR(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
375	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonTypes())  {  FOR(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonTypes())  {  FOR(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonTypes())  {  FOR(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    FOR(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
376	[BUG]  [BUGGY]  FOR(JSType  t  :  this.alternates)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  FOR(JSType  t  :  this.alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	FOR(JSType  t  :  this.alternates)  {	  for(JSType    t    :    this.alternates)    {    FOR(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
377	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternals);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternals);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternals);	  Set    <    JSType>    alternates    =    Sets.newHashSet(externals);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
378	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
379	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
380	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
381	[BUG]  [BUGGY]  for(JSType  t  :  this.unknownTypes)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  unknownTypes  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.unknownTypes)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.unknownTypes)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol  unknownTypes	129	None	replace
382	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates,  1);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
383	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.asList(alternates);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Arrays.asList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Arrays.asList(alternates);	  ArrayList    <    String>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
384	[BUG]  [BUGGY]  For(JSType  t  :  this.alternates.values())  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  this.alternates.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  this.alternates.values())  {	  for(JSType    t    :    this.alternates.values())    {    	non-compiled	[CE]  ')'  expected	19	None	replace
385	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.alternatives)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.alternatives)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  this.alternatives)  {	  for(JSType    t    :    getImmediateParentConstructors(),    alternates)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
386	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newLinkedList();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newLinkedList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newLinkedList();	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
387	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
388	[BUG]  [BUGGY]  for(JSType  t  :  equals)  {  [CE]  cannot  find  symbol  equals  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  equals)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  equals)  {	  for(JSType    t    :    other.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  equals	142	None	replace
389	[BUG]  [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError();    	non-compiled	[CE]  	93	None	replace
390	[BUG]  [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError();	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError();    	non-compiled	[CE]  ')'  expected	93	None	replace
391	[BUG]  [BUGGY]  List  <  String>  alternates  =  Arrays.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Arrays.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Arrays.newHashSet(alternates);	  ArrayList    <    String>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
392	[BUG]  [BUGGY]  for(JSType  t  :  getAlters())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlters())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlters())  {	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
393	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonType())  {  For(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonType())  {  For(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonType())  {  For(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    For(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
394	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonTypes())  {  For(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonTypes())  {  For(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonTypes())  {  For(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    For(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
395	[BUG]  [BUGGY]  for(JSType  t  :  alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates)  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
396	[BUG]  [BUGGY]  for(JSType  t  :  this.astRoots.values())  {  [CE]  cannot  find  symbol  astRoots  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.astRoots.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.astRoots.values())  {	  for(JSType    t    :    arrays.values())    {    	non-compiled	[CE]  cannot  find  symbol  astRoots	49	None	replace
397	[BUG]  [BUGGY]  for(JSType  t  :  this.asStaticFields.values())  {  [CE]  cannot  find  symbol  asStaticFields  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.asStaticFields.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.asStaticFields.values())  {	  for(JSType    t    :    arrays.values())    {    	non-compiled	[CE]  cannot  find  symbol  asStaticFields	49	None	replace
398	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().keySet().iterator().next();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().keySet().iterator().next();	  JSType    alternates    =    getAlternates().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
399	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).keySet().iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates).keySet().iterator();	  JSType    t    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
400	[BUG]  [BUGGY]  for(JSType  t  :  types.size())  {  [CE]  cannot  find  symbol  types  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  types.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  types.size())  {	  for(JSType    t    :    alternates.size())    {    	non-compiled	[CE]  cannot  find  symbol  types	34	None	replace
401	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.unknownType();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)super.unknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.unknownType();	  JSType    alternates    =(JSType)super.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
402	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(null,  true);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(null,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(null,  true);	  JSType    alternates    =    getSingleNodeType().getAlternates(null);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
403	[BUG]  [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(null,  false);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getSingleNodeType().getAlternates(null,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getSingleNodeType().getAlternates(null,  false);	  JSType    alternates    =    getSingleNodeType().getAlternates(null);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
404	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypeReferences())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypeReferences())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypeReferences())  {	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
405	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypesInScope())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypesInScope())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypesInScope())  {	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
406	[BUG]  [BUGGY]  for(JSType  t  :  getOwnTypes())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnTypes())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnTypes())  {	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
407	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
408	[BUG]  [BUGGY]  for(JSType  t  :  getNativeType(UNKNOWN_TYPE))  {  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getNativeType(UNKNOWN_TYPE))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getNativeType(UNKNOWN_TYPE))  {	  for(JSType    t    :    this.mutators)    {    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	60	None	replace
409	[BUG]  [BUGGY]  for(JSType  t  :  other.mutators)  {  [CE]  cannot  find  symbol  other  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.mutators)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.mutators)  {	  for(JSType    t    :    this.mutators)    {    	non-compiled	[CE]  cannot  find  symbol  other	60	None	replace
410	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.next().isUnknownType());    	non-compiled	[CE]  <identifier>  expected	139	None	replace
411	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().keySet().iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().keySet().iterator();	  JSType    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
412	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().toArray(new  JSType[0]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().toArray(new  JSType[0]);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().toArray(new  JSType[0]);	  JSType    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
413	[BUG]  [BUGGY]  For(JSType  t  :  getImplicitReturnType().getRawClass())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImplicitReturnType().getRawClass())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImplicitReturnType().getRawClass())  {	  for(JSType    t    :    getImplicitReturnType().getRawClass())    {    	non-compiled	[CE]  ')'  expected	102	None	replace
414	[BUG]  [BUGGY]  JSType  t  =(JSType)this.alternates.get(i);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =(JSType)this.alternates.get(i);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =(JSType)this.alternates.get(i);	  JSType    t    =(JSType)this.alternates.get(0);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
415	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newLinkedList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Sets.newLinkedList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Sets.newLinkedList();	  ArrayList    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
416	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType(),  t.getSimpleName())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType(),  t.getSimpleName())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType(),  t.getSimpleName())  {	  for(JSType    t    :    getImplicitReturnType().getSimpleName())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
417	[BUG]  [BUGGY]  For(JSType  t  :  getImplicitReturnType().getSimpleName())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImplicitReturnType().getSimpleName())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImplicitReturnType().getSimpleName())  {	  for(JSType    t    :    getImplicitReturnType().getSimpleName())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
418	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  UNKNOWN_TYPE);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  UNKNOWN_TYPE);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE,  UNKNOWN_TYPE);	  JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE,    alternates);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
419	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString()  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString()	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  ')'  expected	130	None	replace
420	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.toString()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.toString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.toString()	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  ')'  expected	130	None	replace
421	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.toString()  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.toString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.toString()	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  ')'  expected	130	None	replace
422	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString(),  alternates.to  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString(),  alternates.to  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString(),  alternates.to	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  ')'  expected	130	None	replace
423	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Arrays.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Arrays.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Arrays.newHashSet(alternates);	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
424	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getRawType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getRawType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getRawType())  {	  for(JSType    t    :    getImplicitReturnType().asType())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
425	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).keySet().iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates).keySet().iterator();	  JSType[]    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
426	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).values();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).values();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates).values();	  JSType[]    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
427	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).toArray(new  Type[alternates.size()  ]);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).toArray(new  Type[alternates.size()  ]);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates).toArray(new  Type[alternates.size()  ]);	  JSType[]    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
428	[BUG]  [BUGGY]  for(JSType  t  :  this.symbols,  false)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.symbols,  false)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.symbols,  false)  {	  for(JSType    t    :    this.symbols)    {    	non-compiled	[CE]  	58	None	replace
429	[BUG]  [BUGGY]  for(JSType  t  :  this.symbols,  true)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.symbols,  true)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.symbols,  true)  {	  for(JSType    t    :    this.symbols)    {    	non-compiled	[CE]  	58	None	replace
430	[BUG]  [BUGGY]  for(JSType  t  :  other.symbols)  {  [CE]  cannot  find  symbol  other  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.symbols)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.symbols)  {	  for(JSType    t    :    this.symbols)    {    	non-compiled	[CE]  cannot  find  symbol  other	58	None	replace
431	[BUG]  [BUGGY]  for(JSType  t  :  this.placeholders())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.placeholders())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.placeholders())  {	  for(JSType    t    :    other.values())    {    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
432	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_UNKNOWN_TYPE);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_UNKNOWN_TYPE);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.NO_UNKNOWN_TYPE);	  JSType    t    =    getNativeType(JSTypeNative.NO_OBJECT_TYPE);    	non-compiled	[CE]  illegal  start  of  type	140	None	replace
433	[BUG]  [BUGGY]  for(JSType  t  :  getSimpleImplicitReturn())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSimpleImplicitReturn())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSimpleImplicitReturn())  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
434	[BUG]  [BUGGY]  for(JSType  t  :  getReturnType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getReturnType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getReturnType())  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
435	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitSynthetic())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitSynthetic())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitSynthetic())  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
436	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitInstantiator())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitInstantiator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitInstantiator())  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
437	[BUG]  [BUGGY]  Iterator  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Iterator  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Iterator  <  JSType>  alternates  =  Sets.newHashSet(alternates).iterator();	  List    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
438	[BUG]  [BUGGY]  for(JSType  t  :  other.unknownTypes)  {  [CE]  cannot  find  symbol  other  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.unknownTypes)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.unknownTypes)  {	  for(JSType    t    :    this.unknownTypes)    {    	non-compiled	[CE]  cannot  find  symbol  other	59	None	replace
439	[BUG]  [BUGGY]  for(JSType  t  :  this.unknownTypes,  false)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.unknownTypes,  false)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.unknownTypes,  false)  {	  for(JSType    t    :    this.unknownTypes)    {    	non-compiled	[CE]  	59	None	replace
440	[BUG]  [BUGGY]  for(JSType  t  :  this.unknownTypes,  true)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.unknownTypes,  true)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.unknownTypes,  true)  {	  for(JSType    t    :    this.unknownTypes)    {    	non-compiled	[CE]  	59	None	replace
441	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternations).iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternations).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternations).iterator();	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors).iterator();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
442	[BUG]  [BUGGY]  For(JSType  t  :  getSimpleImmediateParentConstructors())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getSimpleImmediateParentConstructors())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getSimpleImmediateParentConstructors())  {	  For(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  ')'  expected	82	None	replace
443	[BUG]  [BUGGY]  For(JSType  t  :  getImmediateConstructors())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImmediateConstructors())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImmediateConstructors())  {	  For(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  ')'  expected	82	None	replace
444	[BUG]  [BUGGY]  for(JSType  t  :  others)  {  [CE]  cannot  find  symbol  others  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others)  {	  for(JSType    t    :    this.alternates)    {    for(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  cannot  find  symbol  others	64	None	replace
445	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.alternates.getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)super.alternates.getImplicitReturn();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.alternates.getImplicitReturn();	  JSType    alternates    =(JSType)super.alternates.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
446	[BUG]  [BUGGY]  JSType  alternates  =(JSType)super.alternates.getAlternates(0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)super.alternates.getAlternates(0);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)super.alternates.getAlternates(0);	  JSType    alternates    =(JSType)super.alternates.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
447	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  getAlternates().iterator();  }  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  getAlternates().iterator();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  getAlternates().iterator();  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  incompatible  types	84	None	replace
448	[BUG]  [BUGGY]  for(JSType  t  :  others)  {  For(JSType  t  :  this.alternates)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others)  {  For(JSType  t  :  this.alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others)  {  For(JSType  t  :  this.alternates)  {	  for(JSType    t    :    this.alternates)    {    For(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
449	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  For(JSType  t  :  t.alternates)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  For(JSType  t  :  t.alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  For(JSType  t  :  t.alternates)  {	  for(JSType    t    :    this.alternates)    {    For(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
450	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.getEquivalenceClass();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.getEquivalenceClass();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.getEquivalenceClass();	  JSType    alternates    =(JSType)this.alternates.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
451	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.alternates.getElementsByTag( "unknownType ");  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.alternates.getElementsByTag( "unknownType ");  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.alternates.getElementsByTag( "unknownType ");	  JSType    alternates    =(JSType)this.alternates.getAlternates();    	non-compiled	[CE]  illegal  start  of  type	148	None	replace
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.toArray(new  JSType[this.alternates.size()  ]))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	add	for(JSType  t  :  this.alternates.toArray(new  JSType[this.alternates.size()  ]))  {	  for(JSType    t    :    this.alternates.keySet())    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
453	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.toArray(new  JSType[this.alternates.size()  ]))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.toArray(new  JSType[this.alternates.size()  ]))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.toArray(new  JSType[this.alternates.size()  ]))  {	  for(JSType    t    :    this.alternates.keySet())    {    	compilable	  [FE]  AssertionFailedError  	20	1	replace
454	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  FOR(JSType  t  :  t.alternates)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  FOR(JSType  t  :  t.alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  FOR(JSType  t  :  t.alternates)  {	  for(JSType    t    :    this.alternates)    {    FOR(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
455	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  FOR(JSType  t  :  this.alternates)  {  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  FOR(JSType  t  :  this.alternates)  {  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  FOR(JSType  t  :  this.alternates)  {  }	  for(JSType    t    :    this.alternates)    {    FOR(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
456	[BUG]  [BUGGY]  for(JSType  t  :  this.others.get(this.others.size())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.others.get(this.others.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.others.get(this.others.size())  {	  for(JSType    t    :    this.others.size())    {    	non-compiled	[CE]  ')'  expected	35	None	replace
457	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  ArrayList.newArrayList();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  ArrayList.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  ArrayList.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
458	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newLinkedList(alternates);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newLinkedList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayLists.newLinkedList(alternates);	  ArrayList    <    JSType>    alternates    =    ArrayLists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
459	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newArrayList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newArrayList();	  List    <    JSType>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
460	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  isUnknownType)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  isUnknownType)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE),  isUnknownType)  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(JSTypeNative.UNKNOWN_TYPE))    {    	non-compiled	[CE]  	101	None	replace
461	[BUG]  [BUGGY]  for(JSType  t  :  getOwnSingletonType())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnSingletonType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnSingletonType())  {	  for(JSType    t    :    getSingletonType())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
462	[BUG]  [BUGGY]  for(JSType  t  :  getOwnerType())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnerType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnerType())  {	  for(JSType    t    :    getSingletonType())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
463	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonType(0))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonType(0))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonType(0))  {	  for(JSType    t    :    getSingletonType())    {    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
464	[BUG]  [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError[this.alternates.size()    ];    	non-compiled	[CE]  	91	None	replace
465	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newLinkedList(alternates).iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newLinkedList(alternates).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newLinkedList(alternates).iterator();	  JSType    alternates    =    Lists.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
466	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newHashSet(intervals).iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newHashSet(intervals).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newHashSet(intervals).iterator();	  JSType    alternates    =    Lists.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
467	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  null);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates,  null);	  JSType[]    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	127	None	replace
468	[BUG]  [BUGGY]  for(JSType  t  :  getEmptyTypes())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getEmptyTypes())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getEmptyTypes())  {	  for(JSType    t    :    getAlternates())    {    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
469	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet().iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet().iterator();	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
470	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).toArray(new  ArrayList  <  JSType>());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).toArray(new  ArrayList  <  JSType>());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).toArray(new  ArrayList  <  JSType>());	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
471	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations,  true);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations,  true);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
472	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations,  false);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternations,  false);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
473	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates(),  alternates.values())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates(),  alternates.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates(),  alternates.values())  {	  for(JSType    t    :    getAlternates().values())    {    	non-compiled	[CE]  ')'  expected	24	None	replace
474	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates()).booleanValue()  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates()).booleanValue()  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates()).booleanValue()  {	  for(JSType    t    :    getAlternates().values())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
475	[BUG]  [BUGGY]  JSType  alternates  =  Collections.newHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Collections.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Collections.newHashSet();	  JSType    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
476	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);	  JSType    alternates    =    getImplicitReturnType().isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
477	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().getUnknownType();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().getUnknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().getUnknownType();	  JSType    alternates    =    getImplicitReturnType().isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
478	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  HashSet  <  JSType>  alternates  =  getAlternates();  }	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
479	[BUG]  [BUGGY]  for(JSType  t  :  this.placements)  {  [CE]  cannot  find  symbol  placements  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.placements)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.placements)  {	  for(JSType    t    :    this.assignments)    {    	non-compiled	[CE]  cannot  find  symbol  placements	61	None	replace
480	[BUG]  [BUGGY]  for(JSType  t  :  other.assignments)  {  [CE]  cannot  find  symbol  other  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.assignments)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.assignments)  {	  for(JSType    t    :    this.assignments)    {    	non-compiled	[CE]  cannot  find  symbol  other	61	None	replace
481	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
482	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.isUnknownType());    	non-compiled	[CE]  ';'  expected	138	None	replace
483	[BUG]  [BUGGY]  for(JSType  t  :  getBaseType())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getBaseType())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getBaseType())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getName(),  alternates.isUnknownType());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
484	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);	  JSType    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
485	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).keySet().iterator();  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates).keySet().iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternates).keySet().iterator();	  JSType    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
486	[BUG]  [BUGGY]  if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }	  JSType    t    =    getNativeType(UNKNOWN_TYPE);    alternates.add(t);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
487	[BUG]  [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);  alternates.add(t);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);  alternates.add(t);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(UNKNOWN_TYPE,  UNKNOWN_TYPE);  alternates.add(t);	  JSType    t    =    getNativeType(UNKNOWN_TYPE);    alternates.add(t);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
488	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newLinkedList(alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Lists.newLinkedList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newLinkedList(alternates);	  List    <    JSType>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
489	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newHashSet(alternates);	  List    <    JSType>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
490	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newArrayList(alternates);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newArrayList(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newArrayList(alternates);	  List    <    JSType>    alternates    =    Lists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
491	[BUG]  [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  this.alternates)  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedErrorImpl(this.alternates);    	non-compiled	[CE]  ')'  expected	92	None	replace
492	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newLinkedList(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newLinkedList(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newLinkedList(alternates.size());	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
493	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentsForType())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentsForType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentsForType())  {	  for(JSType    t    :    getImmediateParents())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
494	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParents()  ||  alternates.size()  ==  1)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParents()  ||  alternates.size()  ==  1)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParents()  ||  alternates.size()  ==  1)  {	  for(JSType    t    :    getImmediateParents())    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
495	[BUG]  [BUGGY]  for(JSType  t  :  this.assignments.iterator())  {  [CE]  cannot  find  symbol  assignments  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.assignments.iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.assignments.iterator())  {	  for(JSType    t    :    this.assignments.size())    {    	non-compiled	[CE]  cannot  find  symbol  assignments	37	None	replace
496	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternations);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternations);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(alternations);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
497	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.next().isUnknownType());    	non-compiled	[CE]  ')'  expected	137	None	replace
498	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.next().isUn  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.next().isUn  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.next().isUn	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.next().isUnknownType());    	non-compiled	[CE]  ')'  expected	137	None	replace
499	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.next().  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.next().  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.next().	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.next().isUnknownType());    	non-compiled	[CE]  <identifier>  expected	137	None	replace
500	[BUG]  [BUGGY]  JSType  alternates  =  getReturnType().getUnknownType();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getReturnType().getUnknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getReturnType().getUnknownType();	  JSType    alternates    =    getReturnType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
501	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Arrays.newArrayList();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Arrays.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Arrays.newArrayList();	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
502	[BUG]  [BUGGY]  for(JSType  t  :  getOwnAlternates())  {  FOR(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnAlternates())  {  FOR(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnAlternates())  {  FOR(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    FOR(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
503	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  FOR(JSType  t  :  getAlternates())  {  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  FOR(JSType  t  :  getAlternates())  {  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  FOR(JSType  t  :  getAlternates())  {  }	  for(JSType    t    :    getAlternates())    {    FOR(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
504	[BUG]  [BUGGY]  for(JSType  t  :  getSingletonType())  {  FOR(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSingletonType())  {  FOR(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSingletonType())  {  FOR(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    FOR(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
505	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().strictByNotNullOrUnknownType())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().strictByNotNullOrUnknownType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().strictByNotNullOrUnknownType())  {	  for(JSType    t    :    getImplicitReturnType().restrictByNotNullOrUnknownType())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
506	[BUG]  [BUGGY]  For(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUnknownType())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUnknownType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImplicitReturnType().restrictByNotNullOrUnknownType())  {	  for(JSType    t    :    getImplicitReturnType().restrictByNotNullOrUnknownType())    {    	non-compiled	[CE]  ')'  expected	46	None	replace
507	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().keySet();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().keySet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().keySet();	  JSType    alternates    =    getAlternates().values();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
508	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE),  this)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE),  this)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE),  this)  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  	100	None	replace
509	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(NO_TYPE))  {  [CE]  cannot  find  symbol  NO_TYPE  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(NO_TYPE))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(NO_TYPE))  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  cannot  find  symbol  NO_TYPE	100	None	replace
510	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(VOID_TYPE))  {  [CE]  cannot  find  symbol  VOID_TYPE  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(VOID_TYPE))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(VOID_TYPE))  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  cannot  find  symbol  VOID_TYPE	100	None	replace
511	[BUG]  [BUGGY]  for(JSType  t  :  getArguments())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getArguments())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getArguments())  {	  for(JSType    t    :    getAlternates())    {    List    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
512	[BUG]  [BUGGY]  for(JSType  t  :  getBaseType())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getBaseType())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getBaseType())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
513	[BUG]  [BUGGY]  for(JSType  t  :  getAllAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAllAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAllAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
514	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.get(0));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.get(0));  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates.get(0));	  JSType[]    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
515	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.super.getAlternatesReferences();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.super.getAlternatesReferences();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.super.getAlternatesReferences();	  JSType    alternates    =(JSType)this.super.getAlternates();    	non-compiled	[CE]  	62	None	replace
516	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_TYPE,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.NO_TYPE,  null);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.NO_TYPE,  null);	  JSType    t    =    getNativeType(JSTypeNative.NO_TYPE);    	non-compiled	[CE]  illegal  start  of  type	141	None	replace
517	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(required);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(required);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(required);	  Set    <    JSType>    alternates    =    Sets.newHashSet(required);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
518	[BUG]  [BUGGY]  List  <  String>  alternates  =  Sets.newLinkedList();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Sets.newLinkedList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Sets.newLinkedList();	  List    <    String>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
519	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().unknownType();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().unknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().unknownType();	  JSType    alternates    =    getImplicitReturnType().restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
520	[BUG]  [BUGGY]  for(JSType  t  :  getOwnUnknownType())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnUnknownType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnUnknownType())  {	  for(JSType    t    :    getOwnSideEffects())    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
521	[BUG]  [BUGGY]  for(JSType  t  :  getOwnEffects())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnEffects())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnEffects())  {	  for(JSType    t    :    getOwnSideEffects())    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
522	[BUG]  [BUGGY]  for(JSType  t  :  getOwnUnknownTypes())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnUnknownTypes())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnUnknownTypes())  {	  for(JSType    t    :    getOwnSideEffects())    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
523	[BUG]  [BUGGY]  for(JSType  t  :  other.changes.size())  {  [CE]  package  other  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.changes.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.changes.size())  {	  for(JSType    t    :    this.changes.size())    {    	non-compiled	[CE]  package  other  does  not  exist	116	None	replace
524	[BUG]  [BUGGY]  for(JSType  t  :  getSimpleUnknownTypeConstructors())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSimpleUnknownTypeConstructors())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSimpleUnknownTypeConstructors())  {	  for(JSType    t    :    getSimpleImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
525	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newLinkedList();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Sets.newLinkedList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Sets.newLinkedList();	  List    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
526	[BUG]  [BUGGY]  for(JSType  t  :  this.mutators.size())  {  [CE]  cannot  find  symbol  mutators  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.mutators.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.mutators.size())  {	  for(JSType    t    :    this.alternators.size())    {    	non-compiled	[CE]  cannot  find  symbol  mutators	36	None	replace
527	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().strictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().strictByNotNullOrUndefined())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().strictByNotNullOrUndefined())  {	  for(JSType    t    :    getImplicitReturnType().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
528	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().syntheticByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().syntheticByNotNullOrUndefined())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().syntheticByNotNullOrUndefined())  {	  for(JSType    t    :    getImplicitReturnType().restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
529	[BUG]  [BUGGY]  for(JSType  t  :  getOwnSingletonAlternates())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnSingletonAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnSingletonAlternates())  {	  for(JSType    t    :    getOwnAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
530	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  ArrayList.newArrayList();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  ArrayList.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  ArrayList.newArrayList();	  ArrayList    <    String>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
531	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString()	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  ')'  expected	131	None	replace
532	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType());  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
533	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  ')'  expected	131	None	replace
534	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString()	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  ')'  expected	131	None	replace
535	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  false);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates,  false);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates,  false);	  JSType    t    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
536	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknownType ",  true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknownType ",  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknownType ",  true);	  JSType    alternates    =    getImplicitReturnType().setSimpleName(   "unknownType   ");    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
537	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size()  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size()  -  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size()  -  1);	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
538	[BUG]  [BUGGY]  JSType  t  =  Sets.newLinkedHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newLinkedHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newLinkedHashSet();	  JSType    t    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
539	[BUG]  [BUGGY]  JSType[]  alternates  =  new  JSType[size()  ];  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  new  JSType[size()  ];  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  new  JSType[size()  ];	  JSType[]    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
540	[BUG]  [BUGGY]  JSType[]  alternates  =  Collections.newHashSet();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Collections.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Collections.newHashSet();	  JSType[]    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
541	[BUG]  [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  3;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  3;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  getNativeType(JSTypeNative.UNKNOWN_TYPE)+  3;	  JSType    t    =    getNativeType(JSTypeNative.UNKNOWN_TYPE)+    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
542	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternations);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternations);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternations);	  List    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
543	[BUG]  [BUGGY]  for(JSType  t  :  this.others.get(0))  {  [CE]  cannot  find  symbol  others  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.others.get(0))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.others.get(0))  {	  for(JSType    t    :    this.others.size())    {    	non-compiled	[CE]  cannot  find  symbol  others	35	None	replace
544	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required,  alternates);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(required,  alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(required,  alternates);	  Set    <    JSType>    alternates    =    Sets.newHashSet(required);    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
545	[BUG]  [BUGGY]  JSType  alternates  =(JSType)alternates.get(alternates.size());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)alternates.get(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)alternates.get(alternates.size());	  JSType    alternates    =(JSType)super.alternates.get(alternates.size()    -    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
546	[BUG]  [BUGGY]  for(JSType  t  :  types())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  types())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  types())  {	  for(JSType    t    :    alternates())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
547	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(required);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(required);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(required);	  JSType    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
548	[BUG]  [BUGGY]  for(JSType  t  :  types.alternators)  {  [CE]  cannot  find  symbol  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  types.alternators)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  types.alternators)  {	  for(JSType    t    :    other.alternators)    {    	non-compiled	[CE]  cannot  find  symbol  types	142	None	replace
549	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Arrays.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Arrays.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Arrays.newHashSet(alternates);	  ArrayList    <    JSType>    alternates    =    Arrays.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
550	[BUG]  [BUGGY]  for(JSType  t  :  getOwners())  {  FOR(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwners())  {  FOR(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwners())  {  FOR(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    FOR(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
551	[BUG]  [BUGGY]  for(JSType  t  :  getOwnSlots())  {  FOR(JSType  t  :  getAlternates())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnSlots())  {  FOR(JSType  t  :  getAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnSlots())  {  FOR(JSType  t  :  getAlternates())  {	  for(JSType    t    :    getAlternates())    {    FOR(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
552	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).keySet();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates).keySet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates).keySet();	  JSType[]    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
553	[BUG]  [BUGGY]  for(JSType  t  :  alternates.symbols)  {  [CE]  cannot  find  symbol  symbols  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  alternates.symbols)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  alternates.symbols)  {	  for(JSType    t    :    this.symbols)    {    	non-compiled	[CE]  cannot  find  symbol  symbols	58	None	replace
554	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  Lists.newHashSet(alternates.size());	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
555	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).restrictByNotNullOrUndefined();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates).restrictByNotNullOrUndefined();	  JSType    t    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
556	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).toArray(new  Type[alternates.size()  ]);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates).toArray(new  Type[alternates.size()  ]);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternates).toArray(new  Type[alternates.size()  ]);	  JSType    t    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
557	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedErrorImpl(this.alternates);  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedErrorImpl(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
558	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypes())  {  HashSet  <  JSType>  alternates  =  getAlternates();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypes())  {  HashSet  <  JSType>  alternates  =  getAlternates();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypes())  {  HashSet  <  JSType>  alternates  =  getAlternates();	  for(JSType    t    :    getAlternates())    {    HashSet    <    JSType>    alternates    =    getAlternates();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
559	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(changes.next());  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(changes.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.add(changes.next());  }	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
560	[BUG]  [BUGGY]  for(JSType  t  :  others)  {  FOR(JSType  t  :  this.alternates)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others)  {  FOR(JSType  t  :  this.alternates)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others)  {  FOR(JSType  t  :  this.alternates)  {	  for(JSType    t    :    this.alternates)    {    FOR(JSType    t    :    this.alternates)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
561	[BUG]  [BUGGY]  if(!isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  if(!isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	if(!isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }	  JSType    t    =    getNativeType(UNKNOWN_TYPE);    alternates.add(t);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
562	[BUG]  [BUGGY]  if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }  else  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }  else  {  return  false;  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  alternates.add(t);  }  else  {  return  false;  }	  JSType    t    =    getNativeType(UNKNOWN_TYPE);    alternates.add(t);    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
563	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(alternates);  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
564	[BUG]  [BUGGY]  JSType  alternates  =  getAlternates().iterator().restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getAlternates().iterator().restrictByNotNullOrUndefined();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getAlternates().iterator().restrictByNotNullOrUndefined();	  JSType    alternates    =    getAlternates().iterator().next();    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
565	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(type);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(type);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(type);	  Set    <    JSType>    alternates    =    Sets.newHashSet(reverse);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
566	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.peek())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.peek())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.peek())  {	  for(JSType    t    :    this.alternates.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
567	[BUG]  [BUGGY]  for(JSType  t  :  other.types)  {  [CE]  cannot  find  symbol  other  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.types)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.types)  {	  for(JSType    t    :    this.types)    {    	non-compiled	[CE]  cannot  find  symbol  other	110	None	replace
568	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(required).iterator();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Sets.newHashSet(required).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Sets.newHashSet(required).iterator();	  JSType    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
569	[BUG]  [BUGGY]  JSType  alternates  =  getReturnType().getImplicitReturn();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getReturnType().getImplicitReturn();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getReturnType().getImplicitReturn();	  JSType    alternates    =    getReturnType();    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
570	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).values();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).values();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates).values();	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
571	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Collections.newArrayList();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Collections.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Collections.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
572	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet().iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet().iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates).keySet().iterator();	  List    <    JSType>    alternates    =    Sets.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
573	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentsForType(type))  {  [CE]  cannot  find  symbol  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentsForType(type))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentsForType(type))  {	  for(JSType    t    :    getImmediateParents())    {    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
574	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates().values())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates().values())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates().values())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
575	[BUG]  [BUGGY]  for(JSType  t  :  getSlots())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSlots())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSlots())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.add(t.next());  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.add(alternates.next());    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
576	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates()).restrictByNotNullOrUndefined())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates()).restrictByNotNullOrUndefined())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates()).restrictByNotNullOrUndefined())  {	  for(JSType    t    :    getAlternates().values())    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
577	[BUG]  [BUGGY]  For(JSType  t  :  getImmediateParentConstructors().values())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImmediateParentConstructors().values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImmediateParentConstructors().values())  {	  For(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  ')'  expected	82	None	replace
578	[BUG]  [BUGGY]  For(JSType  t  :  getImmediateParentConstructors()).restrictByNotNullOrUndefined();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImmediateParentConstructors()).restrictByNotNullOrUndefined();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImmediateParentConstructors()).restrictByNotNullOrUndefined();	  For(JSType    t    :    getImmediateParentConstructors())    {    	non-compiled	[CE]  	82	None	replace
579	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypes())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypes())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypes())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
580	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  alternates.iterator();  }  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  alternates.iterator();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  if(alternates!=  null)  {  alternates  =  alternates.iterator();  }	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    	non-compiled	[CE]  incompatible  types	84	None	replace
581	[BUG]  [BUGGY]  JSType  alternates  =(JSType)this.super.getEquivalenceClass();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =(JSType)this.super.getEquivalenceClass();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =(JSType)this.super.getEquivalenceClass();	  JSType    alternates    =(JSType)this.super.getAlternates();    	non-compiled	[CE]  	62	None	replace
582	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values().iterator())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values().iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values().iterator())  {	  for(JSType    t    :    this.alternates.iterator())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
583	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.next().toString(),  alternates.to  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.next().toString(),  alternates.to  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.next().toString(),  alternates.to	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  ')'  expected	130	None	replace
584	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().toString()	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  ')'  expected	130	None	replace
585	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.next().toString()  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.next().toString()  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.next().toString()	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().toString(),    alternates.toString());    	non-compiled	[CE]  ')'  expected	130	None	replace
586	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  +  1);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.size()  +  1);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
587	[BUG]  [BUGGY]  HashSet  <  String>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  HashSet  <  String>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	HashSet  <  String>  alternates  =  Sets.newHashSet(alternates,  true);	  Set    <    String>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
588	[BUG]  [BUGGY]  for(JSType  t  :  other.alternates.values())  {  [CE]  package  other  does  not  exist  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.alternates.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.alternates.values())  {	  for(JSType    t    :    this.alternates.values())    {    	non-compiled	[CE]  package  other  does  not  exist	19	None	replace
589	[BUG]  [BUGGY]  for(JSType  t  :  this.ast.values())  {  [CE]  cannot  find  symbol  ast  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.ast.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.ast.values())  {	  for(JSType    t    :    arrays.values())    {    	non-compiled	[CE]  cannot  find  symbol  ast	49	None	replace
590	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet();  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
591	[BUG]  [BUGGY]  for(JSType  t  :  getOwnerTypes())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnerTypes())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnerTypes())  {	  for(JSType    t    :    getAlternates())    {    List    <    JSType>    alternates    =    getAlternates();    for(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
592	[BUG]  [BUGGY]  if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  return  t.isUnknownType();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  return  t.isUnknownType();  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	if(isUnknownType())  {  JSType  t  =  getNativeType(UNKNOWN_TYPE);  return  t.isUnknownType();  }	  JSType    t    =    getNativeType(UNKNOWN_TYPE);    return    t.isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
593	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  	100	None	replace
594	[BUG]  [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImplicitReturnType().getNativeType(UNKNOWN_TYPE);)  {	  for(JSType    t    :    getImplicitReturnType().getNativeType(UNKNOWN_TYPE))    {    	non-compiled	[CE]  ')'  expected	100	None	replace
595	[BUG]  [BUGGY]  for(JSType  t  :  getOwnSideEffects().values())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnSideEffects().values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnSideEffects().values())  {	  for(JSType    t    :    getOwnSideEffects())    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
596	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError[this.alternates.size()    ];    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
597	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.keySet())  {  AssertionFailedError  <  JSType>  alternates  =  new  AssertionFailedError[this.alternates.size()  ];  }	  for(JSType    t    :    this.alternates)    {    AssertionFailedError    <    JSType>    alternates    =    new    AssertionFailedError[this.alternates.size()    ];    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
598	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  set)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  set)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  set)  {	  for(JSType    t    :    getImmediateParentConstructors(),    alternates)    {    	non-compiled	[CE]  	7	None	replace
599	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.alternations)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors(),  this.alternations)  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors(),  this.alternations)  {	  for(JSType    t    :    getImmediateParentConstructors(),    alternates)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
600	[BUG]  [BUGGY]  For(JSType  t  :  this.alternators.values())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  this.alternators.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  this.alternators.values())  {	  for(JSType    t    :    this.alternators.values())    {    	non-compiled	[CE]  ')'  expected	48	None	replace
601	[BUG]  [BUGGY]  for(JSType  t  :  other.alternators.values())  {  [CE]  package  other  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.alternators.values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.alternators.values())  {	  for(JSType    t    :    this.alternators.values())    {    	non-compiled	[CE]  package  other  does  not  exist	48	None	replace
602	[BUG]  [BUGGY]  For(JSType  t  :  alternates.size())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  alternates.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  alternates.size())  {	  for(JSType    t    :    other.size())    {    	non-compiled	[CE]  ')'  expected	117	None	replace
603	[BUG]  [BUGGY]  List  <  String>  alternates  =  Arrays.newHashSet();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  Arrays.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  Arrays.newHashSet();	  ArrayList    <    String>    alternates    =    Arrays.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
604	[BUG]  [BUGGY]  for(JSType  t  :  getImmediateParentConstructors().class.getSimpleName())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getImmediateParentConstructors().class.getSimpleName())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getImmediateParentConstructors().class.getSimpleName())  {	  for(JSType    t    :    getImmediateParentConstructors().values())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
605	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newArrayList();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayLists.newArrayList();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  ArrayLists.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayLists.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	126	None	replace
606	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypes()).restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypes()).restrictByNotNullOrUndefined();  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypes()).restrictByNotNullOrUndefined();	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
607	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypesArray())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypesArray())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypesArray())  {	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
608	[BUG]  [BUGGY]  for(JSType  t  :  getDeclaredTypes().iterator())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getDeclaredTypes().iterator())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getDeclaredTypes().iterator())  {	  for(JSType    t    :    getDeclaredTypes())    {    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
609	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(reversed);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(reversed);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(reversed);	  Set    <    JSType>    alternates    =    Sets.newHashSet(reversed);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
610	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  HashSet  <  JSType>  alternates  =  Sets.newHashSet(this.alternates);  }	  for(JSType    t    :    this.alternates)    {    HashSet    <    JSType>    alternates    =    Sets.newHashSet(this.alternates);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
611	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  getImplicitReturnType().isUnknownType()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  getImplicitReturnType().isUnknownType()  :  null;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().isUnknownType()?  getImplicitReturnType().isUnknownType()  :  null;	  JSType    alternates    =    getImplicitReturnType().isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
612	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  getImplicitReturnType().restrictByNotNullOrUndefined()  :  null;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()?  getImplicitReturnType().restrictByNotNullOrUndefined()  :  null;  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().isUnknownType()?  getImplicitReturnType().restrictByNotNullOrUndefined()  :  null;	  JSType    alternates    =    getImplicitReturnType().isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
613	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()  &&  getImplicitReturnType().isUnknownType();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().isUnknownType()  &&  getImplicitReturnType().isUnknownType();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().isUnknownType()  &&  getImplicitReturnType().isUnknownType();	  JSType    alternates    =    getImplicitReturnType().isUnknownType();    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
614	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  JSType>  alternates  =  ArrayList.newHashSet(alternates.size());	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet(alternates.size());    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
615	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(externals);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(externals);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType[]  alternates  =  Sets.newHashSet(externals);	  Set    <    JSType>    alternates    =    Sets.newHashSet(externals);    	non-compiled	[CE]  illegal  start  of  type	147	None	replace
616	[BUG]  [BUGGY]  JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknown  type ");  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknown  type ");  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  getImplicitReturnType().setSimpleName( "unknown  type ");	  JSType    alternates    =    getImplicitReturnType().setSimpleName(   "unknownType   ");    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
617	[BUG]  [BUGGY]  For(JSType  t  :  getImmediateParentConstructorsForType())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getImmediateParentConstructorsForType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getImmediateParentConstructorsForType())  {	  for(JSType    t    :    getImmediateParentConstructorsForType())    {    	non-compiled	[CE]  ')'  expected	83	None	replace
618	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternators);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  t  =  Sets.newHashSet(alternators);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  t  =  Sets.newHashSet(alternators);	  JSType    t    =    Sets.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
619	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.is  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.is  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Iterator  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.is	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.isUnknownType());    	non-compiled	[CE]  ')'  expected	138	None	replace
620	[BUG]  [BUGGY]  for(JSType  t  :  this.alternators.peek())  {  [CE]  cannot  find  symbol  alternators  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternators.peek())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternators.peek())  {	  for(JSType    t    :    this.alternators.size())    {    	non-compiled	[CE]  cannot  find  symbol  alternators	36	None	replace
621	[BUG]  [BUGGY]  List  <  String>  alternates  =  ArrayList.newHashSet(alternates);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  List  <  String>  alternates  =  ArrayList.newHashSet(alternates);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	List  <  String>  alternates  =  ArrayList.newHashSet(alternates);	  ArrayList    <    String>    alternates    =    ArrayList.newHashSet(alternates);    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
622	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternations);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternations);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newHashSet(alternations);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternations);    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
623	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternators).iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternators).iterator();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(this.alternators).iterator();	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors).iterator();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
624	[BUG]  [BUGGY]  for(JSType  t  :  others.getOwnAlternates())  {  [CE]  cannot  find  symbol  others  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  others.getOwnAlternates())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  others.getOwnAlternates())  {	  for(JSType    t    :    getOwnAlternates())    {    	non-compiled	[CE]  cannot  find  symbol  others	23	None	replace
625	[BUG]  [BUGGY]  For(JSType  t  :  getOwners())  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getOwners())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getOwners())  {	  for(JSType    t    :    getAlternates())    {    For(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
626	[BUG]  [BUGGY]  For(JSType  t  :  getEmptyTypes())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  For(JSType  t  :  getEmptyTypes())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	For(JSType  t  :  getEmptyTypes())  {	  for(JSType    t    :    getAlternates())    {    For(JSType    t    :    getAlternates())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
627	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates().toArray(new  JSType[attributes.size()  ]))  {  [CE]  cannot  find  symbol  attributes  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates().toArray(new  JSType[attributes.size()  ]))  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates().toArray(new  JSType[attributes.size()  ]))  {	  for(JSType    t    :    getAlternates().iterator())    {    	non-compiled	[CE]  cannot  find  symbol  attributes	25	None	replace
628	[BUG]  [BUGGY]  ArrayList  <  String>  alternates  =  Lists.newHashSet();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  ArrayList  <  String>  alternates  =  Lists.newHashSet();  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	ArrayList  <  String>  alternates  =  Lists.newHashSet();	  List    <    String>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
629	[BUG]  [BUGGY]  for(JSType  t  :  getSimpleIntermediateParentConstructors())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getSimpleIntermediateParentConstructors())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getSimpleIntermediateParentConstructors())  {	  for(JSType    t    :    getSimpleImmediateParentConstructors())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
630	[BUG]  [BUGGY]  for(JSType  t  :  other.assignments.size())  {  [CE]  package  other  does  not  exist  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  other.assignments.size())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  other.assignments.size())  {	  for(JSType    t    :    this.assignments.size())    {    	non-compiled	[CE]  package  other  does  not  exist	37	None	replace
631	[BUG]  [BUGGY]  for(JSType  t  :  getOwners().values())  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwners().values())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwners().values())  {	  for(JSType    t    :    getOwners())    {    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
632	[BUG]  [BUGGY]  JSType  alternates  =  Lists.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  JSType  alternates  =  Lists.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);  [BUGGY]      for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	JSType  alternates  =  Lists.newHashSet(alternates).toArray(new  JSType[alternates.size()  ]);	  JSType    alternates    =    Lists.newHashSet(alternates).iterator();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
633	[BUG]  [BUGGY]  for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUn  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUn  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getAlternates())  {  Set  <  JSType>  alternates  =  getAlternates().iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getName(),  alternates.next().isUn	  for(JSType    t    :    getAlternates())    {    Iterator    <    JSType>    alternates    =    getAlternates().iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getName(),    alternates.next().isUnknownType());    	non-compiled	[CE]  ')'  expected	139	None	replace
634	[BUG]  [BUGGY]  for(JSType  t  :  getOwnReturnType())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  getOwnReturnType())  {  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  getOwnReturnType())  {	  for(JSType    t    :    getImplicitReturn())    {    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
635	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUn  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUn  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUn	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  ')'  expected	131	None	replace
636	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.isUn  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.isUn  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates)  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(alternates.next().getString(),  alternates.isUn	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  ')'  expected	131	None	replace
637	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType  [BUGGY]      if  (t.isUnknownType())  {  return  true;  }  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	252	252	1	replace	for(JSType  t  :  this.alternates.values())  {  Iterator  <  JSType>  alternates  =  this.alternates.iterator();  while(alternates.hasNext())  {  alternates.put(t.getString(),  alternates.isUnknownType	  for(JSType    t    :    this.alternates)    {    Iterator    <    JSType>    alternates    =    this.alternates.iterator();    while(alternates.hasNext())    {    alternates.put(alternates.next().getString(),    alternates.isUnknownType());    	non-compiled	[CE]  ')'  expected	131	None	replace
