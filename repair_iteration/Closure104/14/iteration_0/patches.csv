bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }		non-compiled	[CE]  ';'  expected	28	None	add
2	[BUG]  [BUGGY]    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }		non-compiled	[CE]  ';'  expected	28	None	add
3	[BUG]  [BUGGY]    Set  <  JSType>  alternates  =  Sets.newHashSet();  [CE]  cannot  find  symbol  Sets  [FE]        AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    Set  <  JSType>  alternates  =  Sets.newHashSet();  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    Set  <  JSType>  alternates  =  Sets.newHashSet();		non-compiled	[CE]  cannot  find  symbol  Sets	28	None	add
4	[BUG]  [BUGGY]    if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }		non-compiled	[CE]  ';'  expected	28	None	add
5	[BUG]  [BUGGY]    if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }		non-compiled	[CE]  ';'  expected	28	None	add
6	[BUG]  [BUGGY]    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }		non-compiled	[CE]  ';'  expected	28	None	add
7	[BUG]  [BUGGY]    if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }		non-compiled	[CE]  ';'  expected	28	None	add
8	[BUG]  [BUGGY]    if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }		non-compiled	[CE]  ';'  expected	28	None	add
9	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }	}  	non-compiled	[CE]  ';'  expected	27	None	replace
10	[BUG]  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }	}  	non-compiled	[CE]  ';'  expected	27	None	replace
11	[BUG]  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }	}  	non-compiled	[CE]  ';'  expected	27	None	replace
12	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [CE]  ';'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates);	}  	non-compiled	[CE]  ';'  expected	27	None	replace
13	[BUG]  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }	}  	non-compiled	[CE]  ';'  expected	27	None	replace
14	[BUG]  [BUGGY]    for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }  [BUGGY]    for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]  }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	    for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }		non-compiled	[CE]  ';'  expected	28	None	add
