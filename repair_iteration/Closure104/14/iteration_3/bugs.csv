bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(t);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(t);  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(t);	  JSType    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	39	None	replace
2	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newLinkedHashSet();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newLinkedHashSet();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newLinkedHashSet();	  JSType    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	39	None	replace
3	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(interiors);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(interiors);  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(interiors);	  JSType    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	39	None	replace
4	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    }    	non-compiled	[CE]  ';'  expected	53	None	replace
5	[BUG]  [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    this.alternates.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
6	[BUG]  [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(this.alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    this.alternates.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
7	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    }    	non-compiled	[CE]  ';'  expected	36	None	replace
8	[BUG]  [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    this.alternates.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
9	[BUG]  [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    this.alternates.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
10	[BUG]  [BUGGY]  HashSet  <  JSType>  alternates  =  new  HashSet  <  JSType>(this.alternates.values());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  HashSet  <  JSType>  alternates  =  new  HashSet  <  JSType>(this.alternates.values());  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	HashSet  <  JSType>  alternates  =  new  HashSet  <  JSType>(this.alternates.values());	  for(JSType    t    :    this.alternates.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
11	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
12	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  return  true;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
13	[BUG]  [BUGGY]  if(t!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet(alternates);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  t  =  Sets.newHashSet(alternates);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  t  =  Sets.newHashSet(alternates);	  Set    <    JSType>    alternates    =    Sets.newHashSet(t);    	non-compiled	[CE]  ';'  expected	54	None	replace
15	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(t);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(t);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(t);	  Set    <    JSType>    alternates    =    Sets.newHashSet(t);    	non-compiled	[CE]  ';'  expected	54	None	replace
16	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(t);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(t);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  Sets.newHashSet(t);	  Set    <    JSType>    alternates    =    Sets.newHashSet(t);    	non-compiled	[CE]  ';'  expected	54	None	replace
17	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
18	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
19	[BUG]  [BUGGY]  while(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  while(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	while(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  While(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
20	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(interiors);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	14	None	replace
21	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	52	None	replace
23	[BUG]  [BUGGY]  if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
24	[BUG]  [BUGGY]  if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
25	[BUG]  [BUGGY]  if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	52	None	replace
26	[BUG]  [BUGGY]  if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
27	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.keySet());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.keySet());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.keySet());	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.values());    	non-compiled	[CE]  ';'  expected	3	None	replace
28	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(t.values());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(t.values());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(t.values());	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.values());    	non-compiled	[CE]  ';'  expected	3	None	replace
29	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.size());	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.values());    	non-compiled	[CE]  ';'  expected	3	None	replace
30	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.values());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates.values());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(alternates.values());	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.values());    	non-compiled	[CE]  ';'  expected	3	None	replace
31	[BUG]  [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    }    	non-compiled	[CE]  ';'  expected	50	None	replace
32	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    }    	non-compiled	[CE]  ';'  expected	50	None	replace
33	[BUG]  [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }	  for(JSType    t    :    this.alternates.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
34	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    true;    }    }    	non-compiled	[CE]  ';'  expected	57	None	replace
35	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    }    	non-compiled	[CE]  ';'  expected	25	None	replace
36	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    }    	non-compiled	[CE]  ';'  expected	56	None	replace
37	[BUG]  [BUGGY]  for(JSType  t  :  alternates.keySet())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  alternates.keySet())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  alternates.keySet())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType()    ||!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
38	[BUG]  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType()    ||!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
39	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType()    ||!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
40	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates);  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates);	  JSType[]    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	51	None	replace
41	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(interiors);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(interiors);  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  Sets.newHashSet(interiors);	  JSType[]    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	51	None	replace
42	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newLinkedHashSet();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  Sets.newLinkedHashSet();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  Sets.newLinkedHashSet();	  JSType[]    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	51	None	replace
43	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(this.interiors);	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors);    	non-compiled	[CE]  ';'  expected	15	None	replace
44	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternators);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternators);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternators);	  Set    <    JSType>    alternates    =    Sets.newHashSet(interiors);    	non-compiled	[CE]  ';'  expected	15	None	replace
45	[BUG]  [BUGGY]  for(JSType  t  :  others.values())  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  others.values())  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  others.values())  {  if(t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    others.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	42	None	replace
46	[BUG]  [BUGGY]  Set  <  JSType>  others  =  Sets.newHashSet(alternates.values());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  others  =  Sets.newHashSet(alternates.values());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  others  =  Sets.newHashSet(alternates.values());	  for(JSType    t    :    others.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	42	None	replace
47	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
48	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
49	[BUG]  [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
50	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newArrayList();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newArrayList();	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	11	None	replace
51	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newLinkedList();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newLinkedList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newLinkedList();	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	11	None	replace
52	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	26	None	replace
53	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	26	None	replace
54	[BUG]  [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	26	None	replace
55	[BUG]  [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	26	None	replace
56	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(t);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
57	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(t);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
58	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(t);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
59	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(t);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
60	[BUG]  [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(this.alternates!=  null)  {  for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    this.alternates.values())    {    if(!t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
61	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
62	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newArrayList();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  List  <  JSType>  alternates  =  Sets.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	List  <  JSType>  alternates  =  Sets.newArrayList();	  List    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	12	None	replace
63	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newLinkedList();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  List  <  JSType>  alternates  =  Sets.newLinkedList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	List  <  JSType>  alternates  =  Sets.newLinkedList();	  List    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	12	None	replace
64	[BUG]  [BUGGY]  if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	43	None	replace
65	[BUG]  [BUGGY]  if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	43	None	replace
66	[BUG]  [BUGGY]  if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	43	None	replace
67	[BUG]  [BUGGY]  if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	43	None	replace
68	[BUG]  [BUGGY]  if(t.isNativeType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isNativeType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isNativeType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }	  if(t.isUnknownType())    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
69	[BUG]  [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }	  if(t.isUnknownType())    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
70	[BUG]  [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }	  if(t.isUnknownType())    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
71	[BUG]  [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }	  if(t.isUnknownType())    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
72	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(intermediates);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(intermediates);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(intermediates);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	16	None	replace
73	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(intervals);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(intervals);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(intervals);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	16	None	replace
74	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
75	[BUG]  [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  return  false;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
76	[BUG]  [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  return  false;  }  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  return  false;  }  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
77	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  ';'  expected	13	None	replace
78	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  List.newArrayList();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  List.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  List.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  ';'  expected	13	None	replace
79	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  ArrayList.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  ';'  expected	13	None	replace
80	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newArrayList();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  ';'  expected	13	None	replace
81	[BUG]  [BUGGY]  Set  <  JSType>  others  =  Sets.newHashSet();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  others  =  Sets.newHashSet();  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  others  =  Sets.newHashSet();	  for(JSType    t    :    others.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	33	None	replace
82	[BUG]  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  throw  new  IllegalArgumentException( " ");  }	  for(JSType    t    :    other.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
83	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newArrayList();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  List  <  JSType>  alternates  =  Lists.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	List  <  JSType>  alternates  =  Lists.newArrayList();	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  ';'  expected	40	None	replace
84	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Lists.newHashSet();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Lists.newHashSet();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Lists.newHashSet();	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  ';'  expected	40	None	replace
85	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newLinkedList();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Lists.newLinkedList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Lists.newLinkedList();	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  ';'  expected	40	None	replace
86	[BUG]  [BUGGY]  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isFunctionType())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isFunctionType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isFunctionType())  {  return  false;  }	  for(JSType    t    :    alternates.values())    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
87	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	37	None	replace
88	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	37	None	replace
89	[BUG]  [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	37	None	replace
90	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
91	[BUG]  [BUGGY]  While(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  While(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	While(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
92	[BUG]  [BUGGY]  if(t  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t  ==  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
93	[BUG]  [BUGGY]  try  {  [Delete]  catch(NoClassDefFoundError  e)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  try  {  [Delete]  catch(NoClassDefFoundError  e)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	try  {  [Delete]  catch(NoClassDefFoundError  e)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
94	[BUG]  [BUGGY]  if(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
95	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  ';'  expected	38	None	replace
96	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  false);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  false);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(alternates,  false);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  ';'  expected	38	None	replace
97	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(interiors,  false);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(interiors,  false);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(interiors,  false);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  ';'  expected	38	None	replace
98	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(t,  true);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(t,  true);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(t,  true);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  ';'  expected	38	None	replace
99	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());	  Set    <    JSType>    alternates    =    new    TreeSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
100	[BUG]  [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    TreeSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
101	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
102	[BUG]  [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
103	[BUG]  [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
104	[BUG]  [BUGGY]  For(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  For(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	For(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    other.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ')'  expected	45	None	replace
105	[BUG]  [BUGGY]  For(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  For(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	For(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    other.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ')'  expected	45	None	replace
106	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
107	[BUG]  [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
108	[BUG]  [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
109	[BUG]  [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
110	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(intermediates);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(intermediates);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(intermediates);	  Set    <    JSType>    alternates    =    Sets.newHashSet(intermediates);    	non-compiled	[CE]  ';'  expected	17	None	replace
111	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(intermediates);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(intermediates);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  Sets.newHashSet(intermediates);	  Set    <    JSType>    alternates    =    Sets.newHashSet(intermediates);    	non-compiled	[CE]  ';'  expected	17	None	replace
112	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(intermediates,  true);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  Sets.newHashSet(intermediates,  true);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  Sets.newHashSet(intermediates,  true);	  Set    <    JSType>    alternates    =    Sets.newHashSet(intermediates);    	non-compiled	[CE]  ';'  expected	17	None	replace
113	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.values());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.values());  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.values());	  HashSet    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.values());    	non-compiled	[CE]  ';'  expected	20	None	replace
114	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.values());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.values());  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.values());	  HashSet    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.values());    	non-compiled	[CE]  ';'  expected	20	None	replace
115	[BUG]  [BUGGY]  HashSet  <  JSType>  alternates  =  new  LinkedHashSet  <  JSType>(alternates.values());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  HashSet  <  JSType>  alternates  =  new  LinkedHashSet  <  JSType>(alternates.values());  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	HashSet  <  JSType>  alternates  =  new  LinkedHashSet  <  JSType>(alternates.values());	  HashSet    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.values());    	non-compiled	[CE]  ';'  expected	20	None	replace
116	[BUG]  [BUGGY]  HashSet  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.values());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  HashSet  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.values());  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	HashSet  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.values());	  HashSet    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.values());    	non-compiled	[CE]  ';'  expected	20	None	replace
117	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
118	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
119	[BUG]  [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
120	[BUG]  [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	6	None	replace
121	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    alternates.values())    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
122	[BUG]  [BUGGY]  for(JSType  t  :  others.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  others.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  others.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    alternates.values())    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
123	[BUG]  [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
124	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  this.alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  this.alternates)  {  if(t.isUnknownType())  {  return  false;  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	43	None	replace
125	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternators);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternators);  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(alternators);	  JSType    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	39	None	replace
126	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.values());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.values());  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.values());	  HashSet    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.values());    	non-compiled	[CE]  ';'  expected	20	None	replace
127	[BUG]  [BUGGY]  HashSet  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.values());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  HashSet  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.values());  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	HashSet  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.values());	  HashSet    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.values());    	non-compiled	[CE]  ';'  expected	20	None	replace
128	[BUG]  [BUGGY]  For(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  For(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	For(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    other.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ')'  expected	46	None	replace
129	[BUG]  [BUGGY]  for(JSType  other  :  alternates.values())  {  if(other.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  other  :  alternates.values())  {  if(other.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  other  :  alternates.values())  {  if(other.isUnknownType())  {  return  true;  }	  for(JSType    t    :    other.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
130	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Collections.newArrayList();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Collections.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Collections.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  ';'  expected	13	None	replace
131	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  ArrayList.newArrayList();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  List  <  JSType>  alternates  =  ArrayList.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	List  <  JSType>  alternates  =  ArrayList.newArrayList();	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  ';'  expected	13	None	replace
132	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  this.alternates.keySet())  {  if(!t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    this.alternates.values())    {    if(!t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	29	None	replace
133	[BUG]  [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    }    	non-compiled	[CE]  ';'  expected	56	None	replace
134	[BUG]  [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	37	None	replace
135	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  this.alternates.keySet())  {  if(t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    this.alternates.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
136	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
137	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
138	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(alternates,  true);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	16	None	replace
139	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	18	None	replace
140	[BUG]  [BUGGY]  for(JSType  other  :  alternates.values())  {  if(!other.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  other  :  alternates.values())  {  if(!other.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  other  :  alternates.values())  {  if(!other.isUnknownType())  {  return  false;  }	  for(JSType    t    :    other.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	58	None	replace
141	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates,  false);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	14	None	replace
142	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newLinkedList(alternates);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newLinkedList(alternates);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newLinkedList(alternates);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	14	None	replace
143	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates,  true);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  ';'  expected	38	None	replace
144	[BUG]  [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true    	non-compiled	[CE]  ';'  expected	26	None	replace
145	[BUG]  [BUGGY]  for(JSType  t  :  others.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  others.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  others.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    alternates.values())    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
146	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size()  -  1);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size()  -  1);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size()  -  1);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
147	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newArrayList();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  Sets.newArrayList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  Sets.newArrayList();	  JSType[]    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	51	None	replace
148	[BUG]  [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    TreeSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
149	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size()  -  1);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size()  -  1);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size()  -  1);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    TreeSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
150	[BUG]  [BUGGY]  for(JSType  t  :  others.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  others.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  others.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType()    ||!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
151	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  this.alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType()    ||!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
152	[BUG]  [BUGGY]  For(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  For(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	For(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    others.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ')'  expected	33	None	replace
153	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(reverse);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(reverse);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(reverse);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(t);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
154	[BUG]  [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates  ==  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
155	[BUG]  [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  false;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
156	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.values());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.values());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  Sets.newHashSet(alternates.values());	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.values());    	non-compiled	[CE]  ';'  expected	3	None	replace
157	[BUG]  [BUGGY]  final  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.values());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  final  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.values());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	final  Set  <  JSType>  alternates  =  Sets.newHashSet(alternates.values());	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.values());    	non-compiled	[CE]  ';'  expected	3	None	replace
158	[BUG]  [BUGGY]  for(JSType  other  :  alternates.values())  {  if(other.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  other  :  alternates.values())  {  if(other.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  other  :  alternates.values())  {  if(other.isUnknownType())  {  return  false;  }	  for(JSType    t    :    other.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
159	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  this.alternates.keySet())  {  if(!t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    this.alternates.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
160	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
161	[BUG]  [BUGGY]  if(t!=  null)  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t!=  null)  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t!=  null)  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
162	[BUG]  [BUGGY]  While(t!=  null)  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  While(t!=  null)  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	While(t!=  null)  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
163	[BUG]  [BUGGY]  While(t!=  null)  {  for(JSType  t  :  t.getSlots())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  While(t!=  null)  {  for(JSType  t  :  t.getSlots())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	While(t!=  null)  {  for(JSType  t  :  t.getSlots())  {  if(!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
164	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType()    ||!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	10	None	replace
165	[BUG]  [BUGGY]  try  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  try  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	try  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }	  if(alternates    ==    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
166	[BUG]  [BUGGY]  if(t!=  null)  {  for(JSType  t  :  t.getSimpleName())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t!=  null)  {  for(JSType  t  :  t.getSimpleName())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t!=  null)  {  for(JSType  t  :  t.getSimpleName())  {  if(!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
167	[BUG]  [BUGGY]  try  {  if(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  try  {  if(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	try  {  if(t!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
168	[BUG]  [BUGGY]  if(t!=  null)  {  for(JSType  t  :  t.getMembers())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t!=  null)  {  for(JSType  t  :  t.getMembers())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t!=  null)  {  for(JSType  t  :  t.getMembers())  {  if(!t.isUnknownType())  {  return  false;  }	  if(t!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	47	None	replace
169	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(t);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(t);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(t);	  Set    <    JSType>    alternates    =    Sets.newHashSet(t);    	non-compiled	[CE]  ';'  expected	54	None	replace
170	[BUG]  [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(t);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
171	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.type);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.type);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(t.type);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }	  Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(t);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
172	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(required);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(required);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(required);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	16	None	replace
173	[BUG]  [BUGGY]  JSType  alternates  =  Sets.newHashSet(externals);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  alternates  =  Sets.newHashSet(externals);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  alternates  =  Sets.newHashSet(externals);	  JSType    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	16	None	replace
174	[BUG]  [BUGGY]  for(JSType  t  :  other.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  other.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  other.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    alternates.values())    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	4	None	replace
175	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  this.alternates.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    this.alternates.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
176	[BUG]  [BUGGY]  if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	43	None	replace
177	[BUG]  [BUGGY]  try  {  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  try  {  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	try  {  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
178	[BUG]  [BUGGY]  try  {  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  try  {  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	try  {  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	2	None	replace
179	[BUG]  [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	ArrayList  <  JSType>  alternates  =  new  ArrayList  <  JSType>(alternates.size());	  ArrayList    <    JSType>    alternates    =    ArrayList.newHashSet();    	non-compiled	[CE]  ';'  expected	13	None	replace
180	[BUG]  [BUGGY]  if(other.values!=  null)  {  for(JSType  t  :  other.values())  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(other.values!=  null)  {  for(JSType  t  :  other.values())  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(other.values!=  null)  {  for(JSType  t  :  other.values())  {  if(!t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    other.values())    {    if(!t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	44	None	replace
181	[BUG]  [BUGGY]  For(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  For(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	For(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    other.values())    {    if(!t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ')'  expected	44	None	replace
182	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Lists.newLinkedList();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  List  <  JSType>  alternates  =  Lists.newLinkedList();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	List  <  JSType>  alternates  =  Lists.newLinkedList();	  ArrayList    <    JSType>    alternates    =    Lists.newHashSet();    	non-compiled	[CE]  ';'  expected	40	None	replace
183	[BUG]  [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  Set    <    JSType>    alternates    =    new    TreeSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
184	[BUG]  [BUGGY]  JSType[]  alternates  =  new  JSType[alternates.size()  ];  for(JSType  t  :  alternates)  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  new  JSType[alternates.size()  ];  for(JSType  t  :  alternates)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  new  JSType[alternates.size()  ];  for(JSType  t  :  alternates)  {  return  true;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
185	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  return  true;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    return    true;    }    	non-compiled	[CE]  ';'  expected	7	None	replace
186	[BUG]  [BUGGY]  try  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  try  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	try  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  true;  }	  if(alternates    ==    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	1	None	replace
187	[BUG]  [BUGGY]  if(t.isUnknownType())  {  while(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  while(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  while(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates);  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  While(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates);    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	55	None	replace
188	[BUG]  [BUGGY]  if(t.isUnionType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnionType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnionType())  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType())  {  return  false;  }	  if(t.isUnknownType())    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
189	[BUG]  [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  for(JSType  t  :  t.getSimpleNames())  {  if(!t.isUnknownType())  {  return  false;  }	  if(t.isUnknownType())    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
190	[BUG]  [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  t.getMembers())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  t.getMembers())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  for(JSType  t  :  t.getMembers())  {  if(!t.isUnknownType())  {  return  false;  }	  if(t.isUnknownType())    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
191	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    true;    }    }    	non-compiled	[CE]  ';'  expected	57	None	replace
192	[BUG]  [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  List  <  JSType>  alternates  =  Sets.newHashSet(alternates);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	List  <  JSType>  alternates  =  Sets.newHashSet(alternates);	  ArrayList    <    JSType>    alternates    =    Sets.newHashSet(alternates);    	non-compiled	[CE]  ';'  expected	14	None	replace
193	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.values());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates.values());  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates.values());	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates.values());    	non-compiled	[CE]  ';'  expected	3	None	replace
194	[BUG]  [BUGGY]  JSType  t  =  Sets.newHashSet();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType  t  =  Sets.newHashSet();  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType  t  =  Sets.newHashSet();	  List    <    JSType>    alternates    =    Sets.newHashSet();    	non-compiled	[CE]  ';'  expected	12	None	replace
195	[BUG]  [BUGGY]  if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates.size()  >  0)  {  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  try    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	52	None	replace
196	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
197	[BUG]  [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  this.alternates.keySet())  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  this.alternates.keySet())  {  if(t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    this.alternates.values())    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
198	[BUG]  [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  false);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  JSType[]  alternates  =  Sets.newHashSet(alternates,  false);  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	JSType[]  alternates  =  Sets.newHashSet(alternates,  false);	  Set    <    JSType>    alternates    =    Sets.newHashSet(alternates,    true);    	non-compiled	[CE]  ';'  expected	38	None	replace
199	[BUG]  [BUGGY]  for(JSType  t  :  other.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  other.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  other.values())  {  if(!t.isUnknownType()  ||!t.isUnknownType())  {  return  false;  }	  for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType()    ||!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	5	None	replace
200	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	24	None	replace
201	[BUG]  [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(!t.isUnknownType())    {    return    false;    }    }    	non-compiled	[CE]  ';'  expected	36	None	replace
202	[BUG]  [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	31	None	replace
203	[BUG]  [BUGGY]  for(JSType  other  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  other  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  other  :  alternates.values())  {  if(t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    other.values())    {    if(t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	46	None	replace
204	[BUG]  [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	Set  <  JSType>  alternates  =  new  TreeSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
205	[BUG]  [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(alternates!=  null)  {  Set  <  JSType>  alternates  =  new  HashSet  <  JSType>(alternates.size());  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  false;  }  }	  if(alternates!=    null)    {    Set    <    JSType>    alternates    =    new    HashSet    <    JSType>(alternates.size());    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
206	[BUG]  [BUGGY]  for(JSType  t  :  other.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  for(JSType  t  :  other.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	for(JSType  t  :  other.values())  {  if(t.isUnknownType()  ||  t.isUnknownType())  {  return  true;  }	  for(JSType    t    :    alternates.values())    {    if(t.isUnknownType()    ||    t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	35	None	replace
207	[BUG]  [BUGGY]  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [CE]  'try'  without  'catch',  'finally'  or  resource  declarations  [FE]                      AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }  [BUGGY]      }  return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	try  {  for(JSType  t  :  alternates)  {  if(t.isUnknownType())  {  return  true;  }  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates)    {    if(t.isUnknownType())    {    return    true;    }    }    	non-compiled	[CE]  'try'  without  'catch',  'finally'  or  resource  declarations	53	None	replace
208	[BUG]  [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isUnknownType()  {  for  (JSType  t  :  alternates)  {  if  (t.isUnknownType())  {  return  true;  }      [BUGGY]  if(t.isUnknownType())  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }  [BUGGY]      return  false;  }  [CLASS]  UnionType  [METHOD]  isUnknownType  [RETURN_TYPE]  boolean  [VARIABLES]  Set  alternates  JSType  t  boolean  long  serialVersionUID  	projects/Closure104/src/com/google/javascript/rhino/jstype/UnionType.java	0.3779644730092272	256	256	1	replace	if(t.isUnknownType())  {  for(JSType  t  :  alternates.values())  {  if(!t.isUnknownType())  {  return  true;  }	  if(alternates!=    null)    {    for(JSType    t    :    alternates.values())    {    if(!t.isUnknownType())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	28	None	replace
